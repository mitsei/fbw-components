/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8090/assets";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Filename: fbw_author/index.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var ItemAuthoring = __webpack_require__(3);

	ReactDOM.render(React.createElement(ItemAuthoring, null), document.getElementById('itemAuthoringPane'));

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = React;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = ReactDOM;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// ItemAuthoring.js
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Grid = ReactBS.Grid;
	var Row = ReactBS.Row;
	var Col = ReactBS.Col;
	var _ = __webpack_require__(5);

	var LibraryItemsStore = __webpack_require__(8);
	var LibrariesStore = __webpack_require__(18);

	var ItemWrapper = __webpack_require__(20);
	var LibrarySelector = __webpack_require__(101);

	var ShibSessionCheck = __webpack_require__(102);

	var ItemAuthoring = React.createClass({
	    displayName: 'ItemAuthoring',

	    getInitialState: function getInitialState() {
	        return {
	            libraries: [],
	            libraryDescription: '',
	            libraryId: '',
	            items: [],
	            outcomes: [],
	            showItems: false
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	        LibraryItemsStore.addChangeListener(function (items) {
	            _this.setState({ items: items });
	            _this.setState({ showItems: true });
	        });
	        LibrariesStore.addChangeListener(function (libraries) {
	            _this.setState({ libraries: libraries });
	        });
	    },
	    componentDidMount: function componentDidMount() {
	        LibrariesStore.getAll();
	        ShibSessionCheck();
	    },
	    hideItems: function hideItems() {
	        this.setState({ showItems: false });
	    },
	    librarySelected: function librarySelected(id, libraryDescription) {
	        this.setState({ libraryId: id });
	        this.setState({ libraryDescription: libraryDescription });
	    },
	    render: function render() {
	        var itemsWrapper = '';
	        if (this.state.showItems) {
	            itemsWrapper = React.createElement(ItemWrapper, { items: this.state.items,
	                libraries: this.state.libraries,
	                libraryId: this.state.libraryId,
	                libraryDescription: this.state.libraryDescription });
	        }
	        return React.createElement(
	            Grid,
	            null,
	            React.createElement(
	                Row,
	                null,
	                React.createElement(
	                    Col,
	                    { sm: 6, md: 3, lg: 3 },
	                    React.createElement(LibrarySelector, { libraries: this.state.libraries,
	                        onSelect: this.librarySelected,
	                        hideItems: this.hideItems })
	                )
	            ),
	            itemsWrapper
	        );
	    }
	});

	module.exports = ItemAuthoring;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1), __webpack_require__(2));
		else if(typeof define === 'function' && define.amd)
			define(["react", "react-dom"], factory);
		else if(typeof exports === 'object')
			exports["ReactBootstrap"] = factory(require("react"), require("react-dom"));
		else
			root["ReactBootstrap"] = factory(root["React"], root["ReactDOM"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_65__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		var _interopRequireWildcard = __webpack_require__(2)['default'];

		exports.__esModule = true;

		var _Accordion2 = __webpack_require__(3);

		var _Accordion3 = _interopRequireDefault(_Accordion2);

		exports.Accordion = _Accordion3['default'];

		var _Alert2 = __webpack_require__(34);

		var _Alert3 = _interopRequireDefault(_Alert2);

		exports.Alert = _Alert3['default'];

		var _Badge2 = __webpack_require__(37);

		var _Badge3 = _interopRequireDefault(_Badge2);

		exports.Badge = _Badge3['default'];

		var _Breadcrumb2 = __webpack_require__(38);

		var _Breadcrumb3 = _interopRequireDefault(_Breadcrumb2);

		exports.Breadcrumb = _Breadcrumb3['default'];

		var _BreadcrumbItem2 = __webpack_require__(39);

		var _BreadcrumbItem3 = _interopRequireDefault(_BreadcrumbItem2);

		exports.BreadcrumbItem = _BreadcrumbItem3['default'];

		var _Button2 = __webpack_require__(51);

		var _Button3 = _interopRequireDefault(_Button2);

		exports.Button = _Button3['default'];

		var _ButtonGroup2 = __webpack_require__(52);

		var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

		exports.ButtonGroup = _ButtonGroup3['default'];

		var _ButtonInput2 = __webpack_require__(54);

		var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

		exports.ButtonInput = _ButtonInput3['default'];

		var _ButtonToolbar2 = __webpack_require__(61);

		var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

		exports.ButtonToolbar = _ButtonToolbar3['default'];

		var _Carousel2 = __webpack_require__(62);

		var _Carousel3 = _interopRequireDefault(_Carousel2);

		exports.Carousel = _Carousel3['default'];

		var _CarouselItem2 = __webpack_require__(64);

		var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

		exports.CarouselItem = _CarouselItem3['default'];

		var _Checkbox2 = __webpack_require__(67);

		var _Checkbox3 = _interopRequireDefault(_Checkbox2);

		exports.Checkbox = _Checkbox3['default'];

		var _Clearfix2 = __webpack_require__(68);

		var _Clearfix3 = _interopRequireDefault(_Clearfix2);

		exports.Clearfix = _Clearfix3['default'];

		var _ControlLabel2 = __webpack_require__(69);

		var _ControlLabel3 = _interopRequireDefault(_ControlLabel2);

		exports.ControlLabel = _ControlLabel3['default'];

		var _Col2 = __webpack_require__(70);

		var _Col3 = _interopRequireDefault(_Col2);

		exports.Col = _Col3['default'];

		var _Collapse2 = __webpack_require__(71);

		var _Collapse3 = _interopRequireDefault(_Collapse2);

		exports.Collapse = _Collapse3['default'];

		var _Dropdown2 = __webpack_require__(85);

		var _Dropdown3 = _interopRequireDefault(_Dropdown2);

		exports.Dropdown = _Dropdown3['default'];

		var _DropdownButton2 = __webpack_require__(171);

		var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

		exports.DropdownButton = _DropdownButton3['default'];

		var _Fade2 = __webpack_require__(173);

		var _Fade3 = _interopRequireDefault(_Fade2);

		exports.Fade = _Fade3['default'];

		var _Form2 = __webpack_require__(174);

		var _Form3 = _interopRequireDefault(_Form2);

		exports.Form = _Form3['default'];

		var _FormControl2 = __webpack_require__(175);

		var _FormControl3 = _interopRequireDefault(_FormControl2);

		exports.FormControl = _FormControl3['default'];

		var _FormGroup2 = __webpack_require__(55);

		var _FormGroup3 = _interopRequireDefault(_FormGroup2);

		exports.FormGroup = _FormGroup3['default'];

		var _Glyphicon2 = __webpack_require__(57);

		var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

		exports.Glyphicon = _Glyphicon3['default'];

		var _Grid2 = __webpack_require__(178);

		var _Grid3 = _interopRequireDefault(_Grid2);

		exports.Grid = _Grid3['default'];

		var _HelpBlock2 = __webpack_require__(179);

		var _HelpBlock3 = _interopRequireDefault(_HelpBlock2);

		exports.HelpBlock = _HelpBlock3['default'];

		var _Image2 = __webpack_require__(180);

		var _Image3 = _interopRequireDefault(_Image2);

		exports.Image = _Image3['default'];

		var _Input2 = __webpack_require__(181);

		var _Input3 = _interopRequireDefault(_Input2);

		exports.Input = _Input3['default'];

		var _InputGroup2 = __webpack_require__(184);

		var _InputGroup3 = _interopRequireDefault(_InputGroup2);

		exports.InputGroup = _InputGroup3['default'];

		var _Interpolate2 = __webpack_require__(187);

		var _Interpolate3 = _interopRequireDefault(_Interpolate2);

		exports.Interpolate = _Interpolate3['default'];

		var _Jumbotron2 = __webpack_require__(188);

		var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

		exports.Jumbotron = _Jumbotron3['default'];

		var _Label2 = __webpack_require__(189);

		var _Label3 = _interopRequireDefault(_Label2);

		exports.Label = _Label3['default'];

		var _ListGroup2 = __webpack_require__(190);

		var _ListGroup3 = _interopRequireDefault(_ListGroup2);

		exports.ListGroup = _ListGroup3['default'];

		var _ListGroupItem2 = __webpack_require__(191);

		var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

		exports.ListGroupItem = _ListGroupItem3['default'];

		var _Media2 = __webpack_require__(192);

		var _Media3 = _interopRequireDefault(_Media2);

		exports.Media = _Media3['default'];

		var _MenuItem2 = __webpack_require__(199);

		var _MenuItem3 = _interopRequireDefault(_MenuItem2);

		exports.MenuItem = _MenuItem3['default'];

		var _Modal2 = __webpack_require__(200);

		var _Modal3 = _interopRequireDefault(_Modal2);

		exports.Modal = _Modal3['default'];

		var _ModalBody2 = __webpack_require__(221);

		var _ModalBody3 = _interopRequireDefault(_ModalBody2);

		exports.ModalBody = _ModalBody3['default'];

		var _ModalFooter2 = __webpack_require__(224);

		var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

		exports.ModalFooter = _ModalFooter3['default'];

		var _ModalHeader2 = __webpack_require__(222);

		var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

		exports.ModalHeader = _ModalHeader3['default'];

		var _ModalTitle2 = __webpack_require__(223);

		var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

		exports.ModalTitle = _ModalTitle3['default'];

		var _Nav2 = __webpack_require__(225);

		var _Nav3 = _interopRequireDefault(_Nav2);

		exports.Nav = _Nav3['default'];

		var _Navbar2 = __webpack_require__(227);

		var _Navbar3 = _interopRequireDefault(_Navbar2);

		exports.Navbar = _Navbar3['default'];

		var _NavbarBrand2 = __webpack_require__(228);

		var _NavbarBrand3 = _interopRequireDefault(_NavbarBrand2);

		exports.NavbarBrand = _NavbarBrand3['default'];

		var _NavDropdown2 = __webpack_require__(232);

		var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

		exports.NavDropdown = _NavDropdown3['default'];

		var _NavItem2 = __webpack_require__(233);

		var _NavItem3 = _interopRequireDefault(_NavItem2);

		exports.NavItem = _NavItem3['default'];

		var _Overlay2 = __webpack_require__(234);

		var _Overlay3 = _interopRequireDefault(_Overlay2);

		exports.Overlay = _Overlay3['default'];

		var _OverlayTrigger2 = __webpack_require__(243);

		var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

		exports.OverlayTrigger = _OverlayTrigger3['default'];

		var _PageHeader2 = __webpack_require__(244);

		var _PageHeader3 = _interopRequireDefault(_PageHeader2);

		exports.PageHeader = _PageHeader3['default'];

		var _PageItem2 = __webpack_require__(245);

		var _PageItem3 = _interopRequireDefault(_PageItem2);

		exports.PageItem = _PageItem3['default'];

		var _Pager2 = __webpack_require__(246);

		var _Pager3 = _interopRequireDefault(_Pager2);

		exports.Pager = _Pager3['default'];

		var _Pagination2 = __webpack_require__(247);

		var _Pagination3 = _interopRequireDefault(_Pagination2);

		exports.Pagination = _Pagination3['default'];

		var _Panel2 = __webpack_require__(249);

		var _Panel3 = _interopRequireDefault(_Panel2);

		exports.Panel = _Panel3['default'];

		var _PanelGroup2 = __webpack_require__(21);

		var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

		exports.PanelGroup = _PanelGroup3['default'];

		var _Popover2 = __webpack_require__(250);

		var _Popover3 = _interopRequireDefault(_Popover2);

		exports.Popover = _Popover3['default'];

		var _ProgressBar2 = __webpack_require__(251);

		var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

		exports.ProgressBar = _ProgressBar3['default'];

		var _Radio2 = __webpack_require__(252);

		var _Radio3 = _interopRequireDefault(_Radio2);

		exports.Radio = _Radio3['default'];

		var _ResponsiveEmbed2 = __webpack_require__(253);

		var _ResponsiveEmbed3 = _interopRequireDefault(_ResponsiveEmbed2);

		exports.ResponsiveEmbed = _ResponsiveEmbed3['default'];

		var _Row2 = __webpack_require__(254);

		var _Row3 = _interopRequireDefault(_Row2);

		exports.Row = _Row3['default'];

		var _SafeAnchor2 = __webpack_require__(40);

		var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

		exports.SafeAnchor = _SafeAnchor3['default'];

		var _SplitButton2 = __webpack_require__(255);

		var _SplitButton3 = _interopRequireDefault(_SplitButton2);

		exports.SplitButton = _SplitButton3['default'];

		var _Tab2 = __webpack_require__(257);

		var _Tab3 = _interopRequireDefault(_Tab2);

		exports.Tab = _Tab3['default'];

		var _TabContainer2 = __webpack_require__(259);

		var _TabContainer3 = _interopRequireDefault(_TabContainer2);

		exports.TabContainer = _TabContainer3['default'];

		var _TabContent2 = __webpack_require__(260);

		var _TabContent3 = _interopRequireDefault(_TabContent2);

		exports.TabContent = _TabContent3['default'];

		var _Table2 = __webpack_require__(261);

		var _Table3 = _interopRequireDefault(_Table2);

		exports.Table = _Table3['default'];

		var _TabPane2 = __webpack_require__(258);

		var _TabPane3 = _interopRequireDefault(_TabPane2);

		exports.TabPane = _TabPane3['default'];

		var _Tabs2 = __webpack_require__(262);

		var _Tabs3 = _interopRequireDefault(_Tabs2);

		exports.Tabs = _Tabs3['default'];

		var _Thumbnail2 = __webpack_require__(263);

		var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

		exports.Thumbnail = _Thumbnail3['default'];

		var _Tooltip2 = __webpack_require__(264);

		var _Tooltip3 = _interopRequireDefault(_Tooltip2);

		exports.Tooltip = _Tooltip3['default'];

		var _Well2 = __webpack_require__(265);

		var _Well3 = _interopRequireDefault(_Well2);

		exports.Well = _Well3['default'];

		var _FormControls2 = __webpack_require__(182);

		var _FormControls = _interopRequireWildcard(_FormControls2);

		exports.FormControls = _FormControls;

		var _utils2 = __webpack_require__(266);

		var _utils = _interopRequireWildcard(_utils2);

		exports.utils = _utils;

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		};

		exports.__esModule = true;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};

		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
		      }
		    }

		    newObj["default"] = obj;
		    return newObj;
		  }
		};

		exports.__esModule = true;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _PanelGroup = __webpack_require__(21);

		var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

		var Accordion = _react2['default'].createClass({
		  displayName: 'Accordion',

		  render: function render() {
		    return _react2['default'].createElement(
		      _PanelGroup2['default'],
		      _extends({}, this.props, { accordion: true }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Accordion;
		module.exports = exports['default'];

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		var _Object$assign = __webpack_require__(5)["default"];

		exports["default"] = _Object$assign || function (target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = arguments[i];

		    for (var key in source) {
		      if (Object.prototype.hasOwnProperty.call(source, key)) {
		        target[key] = source[key];
		      }
		    }
		  }

		  return target;
		};

		exports.__esModule = true;

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(6), __esModule: true };

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(7);
		module.exports = __webpack_require__(10).Object.assign;

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.3.1 Object.assign(target, source)
		var $export = __webpack_require__(8);

		$export($export.S + $export.F, 'Object', {assign: __webpack_require__(13)});

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		var global    = __webpack_require__(9)
		  , core      = __webpack_require__(10)
		  , ctx       = __webpack_require__(11)
		  , PROTOTYPE = 'prototype';

		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && key in target;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(param){
		        return this instanceof C ? new C(param) : C(param);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
		  }
		};
		// type bitmap
		$export.F = 1;  // forced
		$export.G = 2;  // global
		$export.S = 4;  // static
		$export.P = 8;  // proto
		$export.B = 16; // bind
		$export.W = 32; // wrap
		module.exports = $export;

	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

	/***/ },
	/* 10 */
	/***/ function(module, exports) {

		var core = module.exports = {version: '1.2.6'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		// optional / simple context binding
		var aFunction = __webpack_require__(12);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};

	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.2.1 Object.assign(target, source, ...)
		var $        = __webpack_require__(14)
		  , toObject = __webpack_require__(15)
		  , IObject  = __webpack_require__(17);

		// should work with symbols and should have deterministic property order (V8 bug)
		module.exports = __webpack_require__(19)(function(){
		  var a = Object.assign
		    , A = {}
		    , B = {}
		    , S = Symbol()
		    , K = 'abcdefghijklmnopqrst';
		  A[S] = 7;
		  K.split('').forEach(function(k){ B[k] = k; });
		  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
		}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
		  var T     = toObject(target)
		    , $$    = arguments
		    , $$len = $$.length
		    , index = 1
		    , getKeys    = $.getKeys
		    , getSymbols = $.getSymbols
		    , isEnum     = $.isEnum;
		  while($$len > index){
		    var S      = IObject($$[index++])
		      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
		      , length = keys.length
		      , j      = 0
		      , key;
		    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
		  }
		  return T;
		} : Object.assign;

	/***/ },
	/* 14 */
	/***/ function(module, exports) {

		var $Object = Object;
		module.exports = {
		  create:     $Object.create,
		  getProto:   $Object.getPrototypeOf,
		  isEnum:     {}.propertyIsEnumerable,
		  getDesc:    $Object.getOwnPropertyDescriptor,
		  setDesc:    $Object.defineProperty,
		  setDescs:   $Object.defineProperties,
		  getKeys:    $Object.keys,
		  getNames:   $Object.getOwnPropertyNames,
		  getSymbols: $Object.getOwnPropertySymbols,
		  each:       [].forEach
		};

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		// 7.1.13 ToObject(argument)
		var defined = __webpack_require__(16);
		module.exports = function(it){
		  return Object(defined(it));
		};

	/***/ },
	/* 16 */
	/***/ function(module, exports) {

		// 7.2.1 RequireObjectCoercible(argument)
		module.exports = function(it){
		  if(it == undefined)throw TypeError("Can't call method on  " + it);
		  return it;
		};

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		var cof = __webpack_require__(18);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
		  return cof(it) == 'String' ? it.split('') : Object(it);
		};

	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		var toString = {}.toString;

		module.exports = function(it){
		  return toString.call(it).slice(8, -1);
		};

	/***/ },
	/* 19 */
	/***/ function(module, exports) {

		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};

	/***/ },
	/* 20 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_20__;

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var PanelGroup = _react2['default'].createClass({
		  displayName: 'PanelGroup',

		  propTypes: {
		    accordion: _react2['default'].PropTypes.bool,
		    activeKey: _react2['default'].PropTypes.any,
		    className: _react2['default'].PropTypes.string,
		    children: _react2['default'].PropTypes.node,
		    defaultActiveKey: _react2['default'].PropTypes.any,
		    onSelect: _react2['default'].PropTypes.func
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      accordion: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    var defaultActiveKey = this.props.defaultActiveKey;

		    return {
		      activeKey: defaultActiveKey
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    if (this.props.accordion) {
		      props.role = 'tablist';
		    }
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
		      _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
		    );
		  },

		  renderPanel: function renderPanel(child, index) {
		    var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

		    var props = {
		      bsStyle: child.props.bsStyle || this.props.bsStyle,
		      key: child.key ? child.key : index,
		      ref: child.ref
		    };

		    if (this.props.accordion) {
		      props.headerRole = 'tab';
		      props.panelRole = 'tabpanel';
		      props.collapsible = true;
		      props.expanded = child.props.eventKey === activeKey;
		      props.onSelect = this.handleSelect;
		    }

		    return _react.cloneElement(child, props);
		  },

		  shouldComponentUpdate: function shouldComponentUpdate() {
		    // Defer any updates to this component during the `onSelect` handler.
		    return !this._isChanging;
		  },

		  handleSelect: function handleSelect(key, e) {
		    e.preventDefault();

		    if (this.props.onSelect) {
		      this._isChanging = true;
		      this.props.onSelect(key, e);
		      this._isChanging = false;
		    }

		    if (this.state.activeKey === key) {
		      key = null;
		    }

		    this.setState({
		      activeKey: key
		    });
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('panel-group', PanelGroup);
		module.exports = exports['default'];

	/***/ },
	/* 22 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj, keys) {
		  var target = {};

		  for (var i in obj) {
		    if (keys.indexOf(i) >= 0) continue;
		    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
		    target[i] = obj[i];
		  }

		  return target;
		};

		exports.__esModule = true;

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		  Copyright (c) 2016 Jed Watson.
		  Licensed under the MIT License (MIT), see
		  http://jedwatson.github.io/classnames
		*/
		/* global define */

		(function () {
			'use strict';

			var hasOwn = {}.hasOwnProperty;

			function classNames () {
				var classes = [];

				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;

					var argType = typeof arg;

					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						classes.push(classNames.apply(null, arg));
					} else if (argType === 'object') {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}

				return classes.join(' ');
			}

			if (typeof module !== 'undefined' && module.exports) {
				module.exports = classNames;
			} else if (true) {
				// register as 'classnames', consistent with npm package name
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return classNames;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else {
				window.classNames = classNames;
			}
		}());


	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.prefix = prefix;
		exports.getClassSet = getClassSet;
		exports.addStyle = addStyle;

		var _react = __webpack_require__(20);

		var _styleMaps = __webpack_require__(25);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _invariant = __webpack_require__(32);

		var _invariant2 = _interopRequireDefault(_invariant);

		function curry(fn) {
		  return function () {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    var last = args[args.length - 1];
		    if (typeof last === 'function') {
		      return fn.apply(undefined, args);
		    }
		    return function (Component) {
		      return fn.apply(undefined, args.concat([Component]));
		    };
		  };
		}

		function prefix(props, variant) {
		  if (props === undefined) props = {};

		  !(props.bsClass || '').trim() ?  true ? _invariant2['default'](false, 'A `bsClass` prop is required for this component') : _invariant2['default'](false) : undefined;
		  return props.bsClass + (variant ? '-' + variant : '');
		}

		var bsClass = curry(function (defaultClass, Component) {
		  var propTypes = Component.propTypes || (Component.propTypes = {});
		  var defaultProps = Component.defaultProps || (Component.defaultProps = {});

		  propTypes.bsClass = _react.PropTypes.string;
		  defaultProps.bsClass = defaultClass;

		  return Component;
		});

		exports.bsClass = bsClass;
		var bsStyles = curry(function (styles, defaultStyle, Component) {
		  if (typeof defaultStyle !== 'string') {
		    Component = defaultStyle;
		    defaultStyle = undefined;
		  }

		  var existing = Component.STYLES || [];
		  var propTypes = Component.propTypes || {};

		  styles.forEach(function (style) {
		    if (existing.indexOf(style) === -1) {
		      existing.push(style);
		    }
		  });

		  var propType = _react.PropTypes.oneOf(existing);

		  // expose the values on the propType function for documentation
		  Component.STYLES = propType._values = existing;

		  Component.propTypes = _extends({}, propTypes, {
		    bsStyle: propType
		  });

		  if (defaultStyle !== undefined) {
		    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
		    defaultProps.bsStyle = defaultStyle;
		  }

		  return Component;
		});

		exports.bsStyles = bsStyles;
		var bsSizes = curry(function (sizes, defaultSize, Component) {
		  if (typeof defaultSize !== 'string') {
		    Component = defaultSize;
		    defaultSize = undefined;
		  }

		  var existing = Component.SIZES || [];
		  var propTypes = Component.propTypes || {};

		  sizes.forEach(function (size) {
		    if (existing.indexOf(size) === -1) {
		      existing.push(size);
		    }
		  });

		  var values = [];
		  existing.forEach(function (size) {
		    var mappedSize = _styleMaps2['default'].SIZES[size];
		    if (mappedSize && mappedSize !== size) {
		      values.push(mappedSize);
		    }

		    values.push(size);
		  });

		  var propType = _react.PropTypes.oneOf(values);
		  propType._values = values;

		  // expose the values on the propType function for documentation
		  Component.SIZES = existing;

		  Component.propTypes = _extends({}, propTypes, {
		    bsSize: propType
		  });

		  if (defaultSize !== undefined) {
		    if (!Component.defaultProps) {
		      Component.defaultProps = {};
		    }
		    Component.defaultProps.bsSize = defaultSize;
		  }

		  return Component;
		});

		exports.bsSizes = bsSizes;

		function getClassSet(props) {
		  var _classes;

		  var classes = (_classes = {}, _classes[prefix(props)] = true, _classes);

		  if (props.bsSize) {
		    var bsSize = _styleMaps2['default'].SIZES[props.bsSize] || bsSize;
		    classes[prefix(props, bsSize)] = true;
		  }

		  if (props.bsStyle) {
		    classes[prefix(props, props.bsStyle)] = true;
		  }

		  return classes;
		}

		/**
		 * Add a style variant to a Component. Mutates the propTypes of the component
		 * in order to validate the new variant.
		 */

		function addStyle(Component) {
		  for (var _len2 = arguments.length, styleVariant = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		    styleVariant[_key2 - 1] = arguments[_key2];
		  }

		  bsStyles(styleVariant, Component);
		}

		var _curry = curry;
		exports._curry = _curry;

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _Object$assign = __webpack_require__(5)['default'];

		var _Object$create = __webpack_require__(26)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		exports.__esModule = true;

		var constant = function constant(obj) {
		  return _Object$assign(_Object$create({
		    values: function values() {
		      var _this = this;

		      return _Object$keys(this).map(function (k) {
		        return _this[k];
		      });
		    }
		  }), obj);
		};

		var styleMaps = {

		  SIZES: {
		    'large': 'lg',
		    'medium': 'md',
		    'small': 'sm',
		    'xsmall': 'xs',
		    'lg': 'lg',
		    'md': 'md',
		    'sm': 'sm',
		    'xs': 'xs'
		  },
		  GRID_COLUMNS: 12
		};

		var Sizes = constant({
		  LARGE: 'large',
		  MEDIUM: 'medium',
		  SMALL: 'small',
		  XSMALL: 'xsmall'
		});

		exports.Sizes = Sizes;
		var State = constant({
		  SUCCESS: 'success',
		  WARNING: 'warning',
		  DANGER: 'danger',
		  INFO: 'info'
		});

		exports.State = State;
		var DEFAULT = 'default';
		exports.DEFAULT = DEFAULT;
		var PRIMARY = 'primary';
		exports.PRIMARY = PRIMARY;
		var LINK = 'link';
		exports.LINK = LINK;
		var INVERSE = 'inverse';

		exports.INVERSE = INVERSE;
		exports['default'] = styleMaps;

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(27), __esModule: true };

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		var $ = __webpack_require__(14);
		module.exports = function create(P, D){
		  return $.create(P, D);
		};

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(29), __esModule: true };

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(30);
		module.exports = __webpack_require__(10).Object.keys;

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.2.14 Object.keys(O)
		var toObject = __webpack_require__(15);

		__webpack_require__(31)('keys', function($keys){
		  return function keys(it){
		    return $keys(toObject(it));
		  };
		});

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		// most Object methods by ES6 should accept primitives
		var $export = __webpack_require__(8)
		  , core    = __webpack_require__(10)
		  , fails   = __webpack_require__(19);
		module.exports = function(KEY, exec){
		  var fn  = (core.Object || {})[KEY] || Object[KEY]
		    , exp = {};
		  exp[KEY] = exec(fn);
		  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
		};

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */

		var invariant = function(condition, format, a, b, c, d, e, f) {
		  if (true) {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  }

		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error(
		        'Minified exception occurred; use the non-minified dev environment ' +
		        'for the full error message and additional helpful warnings.'
		      );
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(
		        format.replace(/%s/g, function() { return args[argIndex++]; })
		      );
		      error.name = 'Invariant Violation';
		    }

		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		};

		module.exports = invariant;


	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		// FIXME: This should really be ValidElementChildren.

		/**
		 * Iterates through children that are typically specified as `props.children`,
		 * but only maps over children that are "valid components".
		 *
		 * The mapFunction provided index will be normalised to the components mapped,
		 * so an invalid component would not increase the index.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func.
		 * @param {*} context Context for func.
		 * @return {object} Object containing the ordered map of results.
		 */
		function map(children, func, context) {
		  var index = 0;

		  return _react2['default'].Children.map(children, function (child) {
		    if (!_react2['default'].isValidElement(child)) {
		      return child;
		    }

		    return func.call(context, child, index++);
		  });
		}

		/**
		 * Iterates through children that are "valid components".
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child with the index reflecting the position relative to "valid components".
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func.
		 * @param {*} context Context for context.
		 */
		function forEach(children, func, context) {
		  var index = 0;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (!_react2['default'].isValidElement(child)) {
		      return;
		    }

		    func.call(context, child, index++);
		  });
		}

		/**
		 * Count the number of "valid components" in the Children container.
		 *
		 * @param {?*} children Children tree container.
		 * @returns {number}
		 */
		function count(children) {
		  var result = 0;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (!_react2['default'].isValidElement(child)) {
		      return;
		    }

		    ++result;
		  });

		  return result;
		}

		/**
		 * Finds children that are typically specified as `props.children`,
		 * but only iterates over children that are "valid components".
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child with the index reflecting the position relative to "valid components".
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func.
		 * @param {*} context Context for func.
		 * @returns {array} of children that meet the func return statement
		 */
		function filter(children, func, context) {
		  var index = 0;
		  var result = [];

		  _react2['default'].Children.forEach(children, function (child) {
		    if (!_react2['default'].isValidElement(child)) {
		      return;
		    }

		    if (func.call(context, child, index++)) {
		      result.push(child);
		    }
		  });

		  return result;
		}

		function find(children, func, context) {
		  var index = 0;
		  var result = undefined;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (result) {
		      return;
		    }
		    if (!_react2['default'].isValidElement(child)) {
		      return;
		    }

		    if (func.call(context, child, index++)) {
		      result = child;
		    }
		  });

		  return result;
		}

		function some(children, func, context) {
		  var index = 0;
		  var result = false;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (result) {
		      return;
		    }
		    if (!_react2['default'].isValidElement(child)) {
		      return;
		    }

		    if (func.call(context, child, index++)) {
		      result = true;
		    }
		  });

		  return result;
		}

		exports['default'] = {
		  map: map,
		  forEach: forEach,
		  count: count,
		  find: find,
		  filter: filter,
		  some: some
		};
		module.exports = exports['default'];

	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibDeprecated = __webpack_require__(35);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var Alert = _react2['default'].createClass({
		  displayName: 'Alert',

		  propTypes: {
		    onDismiss: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    dismissAfter: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'No longer supported.'),
		    closeLabel: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      closeLabel: 'Close Alert'
		    };
		  },

		  renderDismissButton: function renderDismissButton() {
		    return _react2['default'].createElement(
		      'button',
		      {
		        type: 'button',
		        className: 'close',
		        onClick: this.props.onDismiss,
		        'aria-hidden': 'true',
		        tabIndex: '-1'
		      },
		      _react2['default'].createElement(
		        'span',
		        null,
		        '×'
		      )
		    );
		  },

		  renderSrOnlyDismissButton: function renderSrOnlyDismissButton() {
		    return _react2['default'].createElement(
		      'button',
		      {
		        type: 'button',
		        className: 'close sr-only',
		        onClick: this.props.onDismiss
		      },
		      this.props.closeLabel
		    );
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);
		    var isDismissable = !!this.props.onDismiss;

		    classes[_utilsBootstrapUtils.prefix(this.props, 'dismissable')] = isDismissable;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        role: 'alert',
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      isDismissable ? this.renderDismissButton() : null,
		      this.props.children,
		      isDismissable ? this.renderSrOnlyDismissButton() : null
		    );
		  },

		  componentDidMount: function componentDidMount() {
		    if (this.props.dismissAfter && this.props.onDismiss) {
		      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    clearTimeout(this.dismissTimer);
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _styleMaps.State.INFO, _utilsBootstrapUtils.bsClass('alert', Alert));
		module.exports = exports['default'];

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = deprecated;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		function deprecated(propType, explanation) {
		  return function validate(props, propName, componentName) {
		    if (props[propName] != null) {
		      _warning2['default'](false, '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation);
		    }

		    return propType(props, propName, componentName);
		  };
		}

		module.exports = exports['default'];

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */

		var warning = function() {};

		if (true) {
		  warning = function(condition, format, args) {
		    var len = arguments.length;
		    args = new Array(len > 2 ? len - 2 : 0);
		    for (var key = 2; key < len; key++) {
		      args[key - 2] = arguments[key];
		    }
		    if (format === undefined) {
		      throw new Error(
		        '`warning(condition, format, ...args)` requires a warning ' +
		        'message argument'
		      );
		    }

		    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
		      throw new Error(
		        'The warning format should be able to uniquely identify this ' +
		        'warning. Please, use a more descriptive format than: ' + format
		      );
		    }

		    if (!condition) {
		      var argIndex = 0;
		      var message = 'Warning: ' +
		        format.replace(/%s/g, function() {
		          return args[argIndex++];
		        });
		      if (typeof console !== 'undefined') {
		        console.error(message);
		      }
		      try {
		        // This error was thrown as a convenience so that you can use this stack
		        // to find the callsite that caused this warning to fire.
		        throw new Error(message);
		      } catch(x) {}
		    }
		  };
		}

		module.exports = warning;


	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var Badge = _react2['default'].createClass({
		  displayName: 'Badge',

		  propTypes: {
		    pullRight: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      pullRight: false,
		      bsClass: 'badge'
		    };
		  },

		  hasContent: function hasContent() {
		    var children = this.props.children;

		    return _utilsValidComponentChildren2['default'].count(children) > 0 || _react2['default'].Children.count(children) > 1 || typeof children === 'string' || typeof children === 'number';
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {
		      'pull-right': this.props.pullRight
		    }, _classes[_utilsBootstrapUtils.prefix(this.props)] = this.hasContent(), _classes);
		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Badge;
		module.exports = exports['default'];

	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _BreadcrumbItem = __webpack_require__(39);

		var _BreadcrumbItem2 = _interopRequireDefault(_BreadcrumbItem);

		var Breadcrumb = _react2['default'].createClass({
		  displayName: 'Breadcrumb',

		  propTypes: {
		    /**
		     * bootstrap className
		     * @private
		     */
		    bsClass: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'breadcrumb'
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    return _react2['default'].createElement(
		      'ol',
		      _extends({}, props, {
		        role: 'navigation',
		        'aria-label': 'breadcrumbs',
		        className: _classnames2['default'](className, this.props.bsClass) }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderBreadcrumbItem)
		    );
		  },

		  renderBreadcrumbItem: function renderBreadcrumbItem(child, index) {
		    return _react.cloneElement(child, { key: child.key || index });
		  }
		});

		Breadcrumb.Item = _BreadcrumbItem2['default'];

		exports['default'] = Breadcrumb;
		module.exports = exports['default'];

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var BreadcrumbItem = _react2['default'].createClass({
		  displayName: 'BreadcrumbItem',

		  propTypes: {
		    /**
		     * If set to true, renders `span` instead of `a`
		     */
		    active: _react2['default'].PropTypes.bool,
		    /**
		     * HTML id for the wrapper `li` element
		     */
		    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    /**
		     * HTML id for the inner `a` element
		     */
		    linkId: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    /**
		     * `href` attribute for the inner `a` element
		     */
		    href: _react2['default'].PropTypes.string,
		    /**
		     * `title` attribute for the inner `a` element
		     */
		    title: _react2['default'].PropTypes.node,
		    /**
		     * `target` attribute for the inner `a` element
		     */
		    target: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var active = _props.active;
		    var className = _props.className;
		    var id = _props.id;
		    var linkId = _props.linkId;
		    var children = _props.children;
		    var href = _props.href;
		    var title = _props.title;
		    var target = _props.target;

		    var props = _objectWithoutProperties(_props, ['active', 'className', 'id', 'linkId', 'children', 'href', 'title', 'target']);

		    var linkProps = {
		      href: href,
		      title: title,
		      target: target,
		      id: linkId
		    };

		    return _react2['default'].createElement(
		      'li',
		      { id: id, className: _classnames2['default'](className, { active: active }) },
		      active ? _react2['default'].createElement(
		        'span',
		        props,
		        children
		      ) : _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        _extends({}, props, linkProps),
		        children
		      )
		    );
		  }
		});

		exports['default'] = BreadcrumbItem;
		module.exports = exports['default'];

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		function isTrivialHref(href) {
		  return !href || href.trim() === '#';
		}

		/**
		 * There are situations due to browser quirks or bootstrap css where
		 * an anchor tag is needed, when semantically a button tag is the
		 * better choice. SafeAnchor ensures that when an anchor is used like a
		 * button its accessible. It also emulates input `disabled` behavior for
		 * links, which is usually desirable for Buttons, NavItems, MenuItems, etc.
		 */

		var SafeAnchor = (function (_React$Component) {
		  _inherits(SafeAnchor, _React$Component);

		  function SafeAnchor(props) {
		    _classCallCheck(this, SafeAnchor);

		    _React$Component.call(this, props);
		    this.handleClick = this.handleClick.bind(this);
		  }

		  SafeAnchor.prototype.render = function render() {
		    var _props = this.props;
		    var href = _props.href;
		    var role = _props.role;
		    var tabIndex = _props.tabIndex;
		    var disabled = _props.disabled;
		    var style = _props.style;

		    var props = _objectWithoutProperties(_props, ['href', 'role', 'tabIndex', 'disabled', 'style']);

		    var Component = this.props.componentClass || 'a';

		    if (isTrivialHref(href)) {
		      role = role || 'button';
		      // we want to make sure there is a href attribute on the node
		      // otherwise, the cursor incorrectly styled (except with role='button')
		      href = href || '';
		    }

		    if (disabled) {
		      tabIndex = -1;
		      style = _extends({ pointerEvents: 'none' }, style);
		    }

		    return _react2['default'].createElement(Component, _extends({}, props, {
		      role: role,
		      href: href,
		      style: style,
		      // http://getbootstrap.com/javascript/#dismiss-on-next-click
		      tabIndex: tabIndex || 0,
		      onClick: this.handleClick
		    }));
		  };

		  SafeAnchor.prototype.handleClick = function handleClick(event) {
		    var _props2 = this.props;
		    var disabled = _props2.disabled;
		    var href = _props2.href;
		    var onClick = _props2.onClick;

		    if (disabled || isTrivialHref(href)) {
		      event.preventDefault();
		    }

		    if (disabled) {
		      event.stopPropagation();
		      return;
		    }

		    if (onClick) {
		      onClick(event);
		    }
		  };

		  return SafeAnchor;
		})(_react2['default'].Component);

		exports['default'] = SafeAnchor;

		SafeAnchor.propTypes = {
		  href: _react2['default'].PropTypes.string,
		  onClick: _react2['default'].PropTypes.func,
		  disabled: _react2['default'].PropTypes.bool,
		  role: _react2['default'].PropTypes.string,
		  tabIndex: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		  /**
		   * this is sort of silly but needed for Button
		   */
		  componentClass: _reactPropTypesLibElementType2['default']
		};
		module.exports = exports['default'];

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		var _Object$create = __webpack_require__(26)["default"];

		var _Object$setPrototypeOf = __webpack_require__(42)["default"];

		exports["default"] = function (subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		  }

		  subClass.prototype = _Object$create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		};

		exports.__esModule = true;

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(43), __esModule: true };

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(44);
		module.exports = __webpack_require__(10).Object.setPrototypeOf;

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.3.19 Object.setPrototypeOf(O, proto)
		var $export = __webpack_require__(8);
		$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(45).set});

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		// Works with __proto__ only. Old v8 can't work with null proto objects.
		/* eslint-disable no-proto */
		var getDesc  = __webpack_require__(14).getDesc
		  , isObject = __webpack_require__(46)
		  , anObject = __webpack_require__(47);
		var check = function(O, proto){
		  anObject(O);
		  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
		};
		module.exports = {
		  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
		    function(test, buggy, set){
		      try {
		        set = __webpack_require__(11)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
		        set(test, []);
		        buggy = !(test instanceof Array);
		      } catch(e){ buggy = true; }
		      return function setPrototypeOf(O, proto){
		        check(O, proto);
		        if(buggy)O.__proto__ = proto;
		        else set(O, proto);
		        return O;
		      };
		    }({}, false) : undefined),
		  check: check
		};

	/***/ },
	/* 46 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(46);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};

	/***/ },
	/* 48 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};

		exports.__esModule = true;

	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _common = __webpack_require__(50);

		/**
		 * Checks whether a prop provides a type of element.
		 *
		 * The type of element can be provided in two forms:
		 * - tag name (string)
		 * - a return value of React.createClass(...)
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

		  if (typeof props[propName] !== 'function') {
		    if (_react2['default'].isValidElement(props[propName])) {
		      return new Error(errBeginning + ', not an actual Element');
		    }

		    if (typeof props[propName] !== 'string') {
		      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
		    }
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 50 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.errMsg = errMsg;
		exports.createChainableTypeChecker = createChainableTypeChecker;

		function errMsg(props, propName, componentName, msgContinuation) {
		  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
		}

		/**
		 * Create chain-able isRequired validator
		 *
		 * Largely copied directly from:
		 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
		 */

		function createChainableTypeChecker(validate) {
		  function checkType(isRequired, props, propName, componentName) {
		    componentName = componentName || '<<anonymous>>';
		    if (props[propName] == null) {
		      if (isRequired) {
		        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
		      }
		    } else {
		      return validate(props, propName, componentName);
		    }
		  }

		  var chainedCheckType = checkType.bind(null, false);
		  chainedCheckType.isRequired = checkType.bind(null, true);

		  return chainedCheckType;
		}

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var ButtonStyles = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY, _styleMaps.LINK);

		var types = ['button', 'reset', 'submit'];

		var Button = (function (_React$Component) {
		  _inherits(Button, _React$Component);

		  function Button(props, context) {
		    _classCallCheck(this, Button);

		    _React$Component.call(this, props, context);
		  }

		  Button.prototype.render = function render() {
		    var _extends2;

		    var classes = this.props.navDropdown ? {} : _utilsBootstrapUtils.getClassSet(this.props);
		    var renderFuncName = undefined;

		    var blockClass = _utilsBootstrapUtils.prefix(this.props, 'block');

		    classes = _extends((_extends2 = {
		      active: this.props.active
		    }, _extends2[blockClass] = this.props.block, _extends2), classes);

		    if (this.props.navItem) {
		      return this.renderNavItem(classes);
		    }

		    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

		    return this[renderFuncName](classes);
		  };

		  Button.prototype.renderAnchor = function renderAnchor(classes) {
		    var _props = this.props;
		    var disabled = _props.disabled;
		    var href = _props.href;

		    classes.disabled = disabled;

		    return _react2['default'].createElement(
		      _SafeAnchor2['default'],
		      _extends({}, this.props, {
		        href: href || '#',
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  };

		  Button.prototype.renderButton = function renderButton(classes) {
		    var Component = this.props.componentClass || 'button';

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, this.props, {
		        type: this.props.type || 'button',
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  };

		  Button.prototype.renderNavItem = function renderNavItem(classes) {
		    var liClasses = {
		      active: this.props.active
		    };

		    return _react2['default'].createElement(
		      'li',
		      { className: _classnames2['default'](liClasses) },
		      this.renderAnchor(classes)
		    );
		  };

		  return Button;
		})(_react2['default'].Component);

		Button.propTypes = {
		  active: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  block: _react2['default'].PropTypes.bool,
		  navItem: _react2['default'].PropTypes.bool,
		  navDropdown: _react2['default'].PropTypes.bool,
		  onClick: _react2['default'].PropTypes.func,
		  /**
		   * You can use a custom element for this component
		   */
		  componentClass: _reactPropTypesLibElementType2['default'],
		  href: _react2['default'].PropTypes.string,
		  target: _react2['default'].PropTypes.string,
		  /**
		   * Defines HTML button type Attribute
		   * @type {("button"|"reset"|"submit")}
		   * @defaultValue 'button'
		   */
		  type: _react2['default'].PropTypes.oneOf(types)
		};

		Button.defaultProps = {
		  active: false,
		  block: false,
		  disabled: false,
		  navItem: false,
		  navDropdown: false
		};

		Button.types = types;

		exports['default'] = _utilsBootstrapUtils.bsStyles(ButtonStyles, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL, _styleMaps.Sizes.XSMALL], _utilsBootstrapUtils.bsClass('btn', Button)));
		module.exports = exports['default'];

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibAll = __webpack_require__(53);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var ButtonGroup = _react2['default'].createClass({
		  displayName: 'ButtonGroup',

		  propTypes: {
		    vertical: _react2['default'].PropTypes.bool,
		    justified: _react2['default'].PropTypes.bool,
		    /**
		     * Display block buttons, only useful when used with the "vertical" prop.
		     * @type {bool}
		     */
		    block: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
		      if (props.block && !props.vertical) {
		        return new Error('The block property requires the vertical property to be set to have any effect');
		      }
		    })
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      block: false,
		      justified: false,
		      vertical: false
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    classes[_utilsBootstrapUtils.prefix(this.props)] = !this.props.vertical;
		    classes[_utilsBootstrapUtils.prefix(this.props, 'vertical')] = this.props.vertical;
		    classes[_utilsBootstrapUtils.prefix(this.props, 'justified')] = this.props.justified;

		    // this is annoying, since the class is `btn-block` not `btn-group-block`
		    classes[_utilsBootstrapUtils.prefix(_Button2['default'].defaultProps, 'block')] = this.props.block;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('btn-group', ButtonGroup);
		module.exports = exports['default'];

	/***/ },
	/* 53 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = all;

		function all() {
		  for (var _len = arguments.length, propTypes = Array(_len), _key = 0; _key < _len; _key++) {
		    propTypes[_key] = arguments[_key];
		  }

		  if (propTypes === undefined) {
		    throw new Error('No validations provided');
		  }

		  if (propTypes.some(function (propType) {
		    return typeof propType !== 'function';
		  })) {
		    throw new Error('Invalid arguments, must be functions');
		  }

		  if (propTypes.length === 0) {
		    throw new Error('No validations provided');
		  }

		  return function validate(props, propName, componentName) {
		    for (var i = 0; i < propTypes.length; i++) {
		      var result = propTypes[i](props, propName, componentName);

		      if (result !== undefined && result !== null) {
		        return result;
		      }
		    }
		  };
		}

		module.exports = exports['default'];

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var _FormGroup = __webpack_require__(55);

		var _FormGroup2 = _interopRequireDefault(_FormGroup);

		var _InputBase2 = __webpack_require__(56);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _utilsChildrenValueInputValidation = __webpack_require__(58);

		var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

		var _utilsDeprecationWarning = __webpack_require__(60);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var ButtonInput = (function (_InputBase) {
		  _inherits(ButtonInput, _InputBase);

		  function ButtonInput() {
		    _classCallCheck(this, ButtonInput);

		    _InputBase.apply(this, arguments);
		  }

		  ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
		    var _props = this.props;
		    var bsStyle = _props.bsStyle;
		    var value = _props.value;

		    var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

		    return _react2['default'].createElement(
		      _FormGroup2['default'],
		      other,
		      children
		    );
		  };

		  ButtonInput.prototype.renderInput = function renderInput() {
		    var _props2 = this.props;
		    var children = _props2.children;
		    var value = _props2.value;

		    var other = _objectWithoutProperties(_props2, ['children', 'value']);

		    var val = children ? children : value;
		    return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
		  };

		  return ButtonInput;
		})(_InputBase3['default']);

		ButtonInput.types = _Button2['default'].types;

		ButtonInput.defaultProps = {
		  type: 'button'
		};

		ButtonInput.propTypes = {
		  type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
		  bsStyle: function bsStyle() {
		    // defer to Button propTypes of bsStyle
		    return null;
		  },
		  children: _utilsChildrenValueInputValidation2['default'],
		  value: _utilsChildrenValueInputValidation2['default']
		};

		exports['default'] = _utilsDeprecationWarning2['default'].wrapper(ButtonInput, '`<ButtonInput>`', '`<Button>` directly');
		module.exports = exports['default'];

	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibDeprecated = __webpack_require__(35);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var propTypes = {
		  /**
		   * Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`.
		   */
		  controlId: _react2['default'].PropTypes.string,
		  /**
		   * @private
		   */
		  standalone: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use a `<FormControl>` or `<InputGroup>` directly.'),
		  validationState: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
		  /**
		   * @private
		   */
		  bsStyle: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.oneOf(['success', 'warning', 'error']), 'Use `validationState`'),
		  /**
		   * @private
		   */
		  hasFeedback: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use a `<FormControl.Feedback>` element.'),
		  /**
		   * @private
		   */
		  groupClassName: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'Use `className`.')
		};

		var childContextTypes = {
		  $bs_formGroup: _react2['default'].PropTypes.object.isRequired
		};

		var FormGroup = (function (_React$Component) {
		  _inherits(FormGroup, _React$Component);

		  function FormGroup() {
		    _classCallCheck(this, FormGroup);

		    _React$Component.apply(this, arguments);
		  }

		  FormGroup.prototype.getChildContext = function getChildContext() {
		    var _props = this.props;
		    var controlId = _props.controlId;
		    var bsStyle = _props.bsStyle;
		    var _props$validationState = _props.validationState;
		    var validationState = _props$validationState === undefined ? bsStyle : _props$validationState;

		    return {
		      $bs_formGroup: {
		        controlId: controlId,
		        validationState: validationState
		      }
		    };
		  };

		  FormGroup.prototype.hasFeedback = function hasFeedback(children) {
		    var _this = this;

		    return _utilsValidComponentChildren2['default'].some(children, function (child) {
		      return child.props.bsRole === 'feedback' || child.props.children && _this.hasFeedback(child.props.children);
		    });
		  };

		  FormGroup.prototype.render = function render() {
		    var _props2 = this.props;
		    var standalone = _props2.standalone;
		    var bsStyle = _props2.bsStyle;
		    var _props2$validationState = _props2.validationState;
		    var validationState = _props2$validationState === undefined ? bsStyle : _props2$validationState;
		    var groupClassName = _props2.groupClassName;
		    var _props2$className = _props2.className;
		    var className = _props2$className === undefined ? groupClassName : _props2$className;
		    var children = _props2.children;
		    var _props2$hasFeedback = _props2.hasFeedback;
		    var hasFeedback = _props2$hasFeedback === undefined ? this.hasFeedback(children) : _props2$hasFeedback;

		    var props = _objectWithoutProperties(_props2, ['standalone', 'bsStyle', 'validationState', 'groupClassName', 'className', 'children', 'hasFeedback']);

		    delete props.bsClass;
		    delete props.bsSize;
		    delete props.controlId;

		    var classes = _extends({}, !standalone && _utilsBootstrapUtils.getClassSet(this.props), {
		      'has-feedback': hasFeedback
		    });
		    if (validationState) {
		      classes['has-' + validationState] = true;
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, { className: _classnames2['default'](className, classes) }),
		      children
		    );
		  };

		  return FormGroup;
		})(_react2['default'].Component);

		FormGroup.propTypes = propTypes;
		FormGroup.childContextTypes = childContextTypes;

		exports['default'] = _utilsBootstrapUtils.bsClass('form-group', _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], FormGroup));
		module.exports = exports['default'];

	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _FormGroup = __webpack_require__(55);

		var _FormGroup2 = _interopRequireDefault(_FormGroup);

		var _Glyphicon = __webpack_require__(57);

		var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

		var InputBase = (function (_React$Component) {
		  _inherits(InputBase, _React$Component);

		  function InputBase() {
		    _classCallCheck(this, InputBase);

		    _React$Component.apply(this, arguments);
		  }

		  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
		    return this.refs.input;
		  };

		  InputBase.prototype.getValue = function getValue() {
		    if (this.props.type === 'static') {
		      return this.props.value;
		    } else if (this.props.type) {
		      if (this.props.type === 'select' && this.props.multiple) {
		        return this.getSelectedOptions();
		      }
		      return this.getInputDOMNode().value;
		    }
		    throw new Error('Cannot use getValue without specifying input type.');
		  };

		  InputBase.prototype.getChecked = function getChecked() {
		    return this.getInputDOMNode().checked;
		  };

		  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
		    var values = [];

		    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
		      if (option.selected) {
		        var value = option.getAttribute('value') || option.innerHtml;
		        values.push(value);
		      }
		    });

		    return values;
		  };

		  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
		    return this.props.type === 'checkbox' || this.props.type === 'radio';
		  };

		  InputBase.prototype.isFile = function isFile() {
		    return this.props.type === 'file';
		  };

		  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
		    var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-addon', key: 'addonBefore' },
		      this.props.addonBefore
		    ) : null;

		    var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-addon', key: 'addonAfter' },
		      this.props.addonAfter
		    ) : null;

		    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-btn' },
		      this.props.buttonBefore
		    ) : null;

		    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-btn' },
		      this.props.buttonAfter
		    ) : null;

		    var inputGroupClassName = undefined;
		    switch (this.props.bsSize) {
		      case 'small':
		        inputGroupClassName = 'input-group-sm';break;
		      case 'large':
		        inputGroupClassName = 'input-group-lg';break;
		      default:
		    }

		    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
		      addonBefore,
		      buttonBefore,
		      children,
		      addonAfter,
		      buttonAfter
		    ) : children;
		  };

		  InputBase.prototype.renderIcon = function renderIcon() {
		    if (this.props.hasFeedback) {
		      if (this.props.feedbackIcon) {
		        return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
		      }

		      switch (this.props.bsStyle) {
		        case 'success':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
		        case 'warning':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
		        case 'error':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
		        default:
		          return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
		      }
		    } else {
		      return null;
		    }
		  };

		  InputBase.prototype.renderHelp = function renderHelp() {
		    return this.props.help ? _react2['default'].createElement(
		      'span',
		      { className: 'help-block', key: 'help' },
		      this.props.help
		    ) : null;
		  };

		  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
		    var classes = {
		      'checkbox': this.props.type === 'checkbox',
		      'radio': this.props.type === 'radio'
		    };

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
		      children
		    );
		  };

		  InputBase.prototype.renderWrapper = function renderWrapper(children) {
		    return this.props.wrapperClassName ? _react2['default'].createElement(
		      'div',
		      { className: this.props.wrapperClassName, key: 'wrapper' },
		      children
		    ) : children;
		  };

		  InputBase.prototype.renderLabel = function renderLabel(children) {
		    var classes = {
		      'control-label': !this.isCheckboxOrRadio()
		    };
		    classes[this.props.labelClassName] = this.props.labelClassName;

		    return this.props.label ? _react2['default'].createElement(
		      'label',
		      { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
		      children,
		      this.props.label
		    ) : children;
		  };

		  InputBase.prototype.renderInput = function renderInput() {
		    if (!this.props.type) {
		      return this.props.children;
		    }

		    switch (this.props.type) {
		      case 'select':
		        return _react2['default'].createElement(
		          'select',
		          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
		          this.props.children
		        );
		      case 'textarea':
		        return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
		      case 'static':
		        return _react2['default'].createElement(
		          'p',
		          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
		          this.props.value
		        );
		      default:
		        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
		        return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
		    }
		  };

		  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
		    return _react2['default'].createElement(
		      _FormGroup2['default'],
		      this.props,
		      children
		    );
		  };

		  InputBase.prototype.renderChildren = function renderChildren() {
		    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
		  };

		  InputBase.prototype.render = function render() {
		    var children = this.renderChildren();
		    return this.renderFormGroup(children);
		  };

		  return InputBase;
		})(_react2['default'].Component);

		InputBase.propTypes = {
		  type: _react2['default'].PropTypes.string,
		  label: _react2['default'].PropTypes.node,
		  help: _react2['default'].PropTypes.node,
		  addonBefore: _react2['default'].PropTypes.node,
		  addonAfter: _react2['default'].PropTypes.node,
		  buttonBefore: _react2['default'].PropTypes.node,
		  buttonAfter: _react2['default'].PropTypes.node,
		  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
		  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
		  hasFeedback: _react2['default'].PropTypes.bool,
		  feedbackIcon: _react2['default'].PropTypes.node,
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		  groupClassName: _react2['default'].PropTypes.string,
		  wrapperClassName: _react2['default'].PropTypes.string,
		  labelClassName: _react2['default'].PropTypes.string,
		  multiple: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  value: _react2['default'].PropTypes.any
		};

		InputBase.defaultProps = {
		  disabled: false,
		  hasFeedback: false,
		  multiple: false
		};

		exports['default'] = InputBase;
		module.exports = exports['default'];

	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibDeprecated = __webpack_require__(35);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var Glyphicon = _react2['default'].createClass({
		  displayName: 'Glyphicon',

		  propTypes: {
		    /**
		     * bootstrap className
		     * @private
		     */
		    bsClass: _react2['default'].PropTypes.string,
		    /**
		     * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
		     */
		    glyph: _react2['default'].PropTypes.string.isRequired,
		    /**
		     * Adds 'form-control-feedback' class
		     * @private
		     */
		    formControlFeedback: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `<FormControl.Feedback>`.')
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'glyphicon'
		    };
		  },

		  render: function render() {
		    var _classNames;

		    var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, { className: className }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Glyphicon;
		module.exports = exports['default'];

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports['default'] = valueValidation;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibSinglePropFrom = __webpack_require__(59);

		var _reactPropTypesLibSinglePropFrom2 = _interopRequireDefault(_reactPropTypesLibSinglePropFrom);

		function valueValidation(props, propName, componentName) {
		  var error = _reactPropTypesLibSinglePropFrom2['default']('children', 'value')(props, propName, componentName);

		  if (!error) {
		    error = _react2['default'].PropTypes.node(props, propName, componentName);
		  }

		  return error;
		}

		module.exports = exports['default'];

	/***/ },
	/* 59 */
	/***/ function(module, exports) {

		/**
		 * Checks if only one of the listed properties is in use. An error is given
		 * if multiple have a value
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */
		'use strict';

		exports.__esModule = true;
		exports['default'] = createSinglePropFromChecker;

		function createSinglePropFromChecker() {
		  for (var _len = arguments.length, arrOfProps = Array(_len), _key = 0; _key < _len; _key++) {
		    arrOfProps[_key] = arguments[_key];
		  }

		  function validate(props, propName, componentName) {
		    var usedPropCount = arrOfProps.map(function (listedProp) {
		      return props[listedProp];
		    }).reduce(function (acc, curr) {
		      return acc + (curr !== undefined ? 1 : 0);
		    }, 0);

		    if (usedPropCount > 1) {
		      var first = arrOfProps[0];
		      var others = arrOfProps.slice(1);

		      var message = others.join(', ') + ' and ' + first;
		      return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
		    }
		  }
		  return validate;
		}

		module.exports = exports['default'];

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports._resetWarned = _resetWarned;

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var warned = {};

		function deprecationWarning(oldname, newname, link) {
		  var message = undefined;

		  if (typeof oldname === 'object') {
		    message = oldname.message;
		  } else {
		    message = oldname + ' is deprecated. Use ' + newname + ' instead.';

		    if (link) {
		      message += '\nYou can read more about it at ' + link;
		    }
		  }

		  if (warned[message]) {
		    return;
		  }

		   true ? _warning2['default'](false, message) : undefined;
		  warned[message] = true;
		}

		deprecationWarning.wrapper = function (Component) {
		  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    args[_key - 1] = arguments[_key];
		  }

		  return (function (_Component) {
		    _inherits(DeprecatedComponent, _Component);

		    function DeprecatedComponent() {
		      _classCallCheck(this, DeprecatedComponent);

		      _Component.apply(this, arguments);
		    }

		    DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
		      deprecationWarning.apply(undefined, args);

		      if (_Component.prototype.componentWillMount) {
		        var _Component$prototype$componentWillMount;

		        for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		          methodArgs[_key2] = arguments[_key2];
		        }

		        (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
		      }
		    };

		    return DeprecatedComponent;
		  })(Component);
		};

		exports['default'] = deprecationWarning;

		function _resetWarned() {
		  warned = {};
		}

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var ButtonToolbar = _react2['default'].createClass({
		  displayName: 'ButtonToolbar',

		  propTypes: {
		    bsSize: _Button2['default'].propTypes.bsSize
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'btn-toolbar'
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        role: 'toolbar',
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = ButtonToolbar;
		module.exports = exports['default'];

	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _Object$assign = __webpack_require__(5)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _CarouselCaption = __webpack_require__(63);

		var _CarouselCaption2 = _interopRequireDefault(_CarouselCaption);

		var _CarouselItem = __webpack_require__(64);

		var _CarouselItem2 = _interopRequireDefault(_CarouselItem);

		var _Glyphicon = __webpack_require__(57);

		var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

		var Carousel = _react2['default'].createClass({
		  displayName: 'Carousel',

		  propTypes: {
		    slide: _react2['default'].PropTypes.bool,
		    indicators: _react2['default'].PropTypes.bool,
		    interval: _react2['default'].PropTypes.number,
		    controls: _react2['default'].PropTypes.bool,
		    pauseOnHover: _react2['default'].PropTypes.bool,
		    wrap: _react2['default'].PropTypes.bool,
		    /**
		     * Callback fired when the active item changes.
		     *
		     * ```js
		     * (eventKey: any) => any | (eventKey: any, event: Object) => any
		     * ```
		     *
		     * If this callback takes two or more arguments, the second argument will
		     * be a persisted event object with `direction` set to the direction of the
		     * transition.
		     */
		    onSelect: _react2['default'].PropTypes.func,
		    onSlideEnd: _react2['default'].PropTypes.func,
		    activeIndex: _react2['default'].PropTypes.number,
		    defaultActiveIndex: _react2['default'].PropTypes.number,
		    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
		    prevIcon: _react2['default'].PropTypes.node,
		    nextIcon: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'carousel',
		      slide: true,
		      interval: 5000,
		      pauseOnHover: true,
		      wrap: true,
		      indicators: true,
		      controls: true,
		      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
		      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
		      previousActiveIndex: null,
		      direction: null
		    };
		  },

		  getDirection: function getDirection(prevIndex, index) {
		    if (prevIndex === index) {
		      return null;
		    }

		    return prevIndex > index ? 'prev' : 'next';
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    var activeIndex = this.getActiveIndex();

		    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
		      clearTimeout(this.timeout);
		      this.setState({
		        previousActiveIndex: activeIndex,
		        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
		      });
		    }
		  },

		  componentDidMount: function componentDidMount() {
		    this.waitForNext();
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    clearTimeout(this.timeout);
		  },

		  next: function next(e) {
		    if (e) {
		      e.preventDefault();
		    }

		    var index = this.getActiveIndex() + 1;
		    var count = _utilsValidComponentChildren2['default'].count(this.props.children);

		    if (index > count - 1) {
		      if (!this.props.wrap) {
		        return;
		      }
		      index = 0;
		    }

		    this.handleSelect(index, e, 'next');
		  },

		  prev: function prev(e) {
		    if (e) {
		      e.preventDefault();
		    }

		    var index = this.getActiveIndex() - 1;

		    if (index < 0) {
		      if (!this.props.wrap) {
		        return;
		      }
		      index = _utilsValidComponentChildren2['default'].count(this.props.children) - 1;
		    }

		    this.handleSelect(index, e, 'prev');
		  },

		  pause: function pause() {
		    this.isPaused = true;
		    clearTimeout(this.timeout);
		  },

		  play: function play() {
		    this.isPaused = false;
		    this.waitForNext();
		  },

		  waitForNext: function waitForNext() {
		    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
		      this.timeout = setTimeout(this.next, this.props.interval);
		    }
		  },

		  handleMouseOver: function handleMouseOver() {
		    if (this.props.pauseOnHover) {
		      this.pause();
		    }
		  },

		  handleMouseOut: function handleMouseOut() {
		    if (this.isPaused) {
		      this.play();
		    }
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props)] = true, _classes.slide = this.props.slide, _classes);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes),
		        onMouseOver: this.handleMouseOver,
		        onMouseOut: this.handleMouseOut
		      }),
		      this.props.indicators ? this.renderIndicators() : null,
		      _react2['default'].createElement(
		        'div',
		        {
		          ref: 'inner',
		          className: _utilsBootstrapUtils.prefix(this.props, 'inner')
		        },
		        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
		      ),
		      this.props.controls ? this.renderControls() : null
		    );
		  },

		  renderPrev: function renderPrev() {
		    var classes = 'left ' + _utilsBootstrapUtils.prefix(this.props, 'control');

		    return _react2['default'].createElement(
		      'a',
		      { className: classes, href: '#prev', key: 0, onClick: this.prev },
		      this.props.prevIcon
		    );
		  },

		  renderNext: function renderNext() {
		    var classes = 'right ' + _utilsBootstrapUtils.prefix(this.props, 'control');

		    return _react2['default'].createElement(
		      'a',
		      { className: classes, href: '#next', key: 1, onClick: this.next },
		      this.props.nextIcon
		    );
		  },

		  renderControls: function renderControls() {
		    if (!this.props.wrap) {
		      var activeIndex = this.getActiveIndex();
		      var count = _utilsValidComponentChildren2['default'].count(this.props.children);

		      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
		    }

		    return [this.renderPrev(), this.renderNext()];
		  },

		  renderIndicator: function renderIndicator(child, index) {
		    var _this = this;

		    var className = index === this.getActiveIndex() ? 'active' : null;

		    return _react2['default'].createElement('li', {
		      key: index,
		      className: className,
		      onClick: function (e) {
		        return _this.handleSelect(index, e, null);
		      } });
		  },

		  renderIndicators: function renderIndicators() {
		    var _this2 = this;

		    var indicators = [];
		    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
		      indicators.push(_this2.renderIndicator(child, index),

		      // Force whitespace between indicator elements, bootstrap
		      // requires this for correct spacing of elements.
		      ' ');
		    }, this);

		    return _react2['default'].createElement(
		      'ol',
		      { className: _utilsBootstrapUtils.prefix(this.props, 'indicators') },
		      indicators
		    );
		  },

		  getActiveIndex: function getActiveIndex() {
		    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
		  },

		  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
		    var _this3 = this;

		    this.setState({
		      previousActiveIndex: null,
		      direction: null
		    }, function () {
		      _this3.waitForNext();

		      if (_this3.props.onSlideEnd) {
		        _this3.props.onSlideEnd();
		      }
		    });
		  },

		  renderItem: function renderItem(child, index) {
		    var activeIndex = this.getActiveIndex();
		    var isActive = index === activeIndex;
		    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

		    return _react.cloneElement(child, {
		      active: isActive,
		      ref: child.ref,
		      key: child.key ? child.key : index,
		      index: index,
		      animateOut: isPreviousActive,
		      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
		      direction: this.state.direction,
		      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
		    });
		  },

		  handleSelect: function handleSelect(index, e, direction) {
		    clearTimeout(this.timeout);

		    if (this.isMounted()) {
		      var previousActiveIndex = this.getActiveIndex();
		      direction = direction || this.getDirection(previousActiveIndex, index);

		      var onSelect = this.props.onSelect;

		      if (onSelect) {
		        if (onSelect.length > 1) {
		          // React SyntheticEvents are pooled, so we need to remove this event
		          // from the pool to add a custom property. To avoid unnecessarily
		          // removing objects from the pool, only do this when the listener
		          // actually wants the event.
		          e.persist();
		          e.direction = direction;

		          onSelect(index, e);
		        } else {
		          onSelect(index);
		        }
		      }

		      if (this.props.activeIndex == null && index !== previousActiveIndex) {
		        if (this.state.previousActiveIndex != null) {
		          // If currently animating don't activate the new index.
		          // TODO: look into queuing this canceled call and
		          // animating after the current animation has ended.
		          return;
		        }

		        this.setState({
		          activeIndex: index,
		          previousActiveIndex: previousActiveIndex,
		          direction: direction
		        });
		      }
		    }
		  }
		});

		Carousel = _Object$assign(Carousel, { Caption: _CarouselCaption2['default'], Item: _CarouselItem2['default'] });

		exports['default'] = Carousel;
		module.exports = exports['default'];

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var CarouselCaption = _react2['default'].createClass({
		  displayName: 'Carousel.Caption',
		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'carousel-caption') }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = CarouselCaption;
		module.exports = exports['default'];

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsTransitionEvents = __webpack_require__(66);

		var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

		var CarouselItem = _react2['default'].createClass({
		  displayName: 'CarouselItem',

		  propTypes: {
		    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
		    onAnimateOutEnd: _react2['default'].PropTypes.func,
		    active: _react2['default'].PropTypes.bool,
		    animateIn: _react2['default'].PropTypes.bool,
		    animateOut: _react2['default'].PropTypes.bool,
		    caption: _react2['default'].PropTypes.node,
		    index: _react2['default'].PropTypes.number
		  },

		  getInitialState: function getInitialState() {
		    return {
		      direction: null
		    };
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsStyle: 'carousel',
		      active: false,
		      animateIn: false,
		      animateOut: false
		    };
		  },

		  handleAnimateOutEnd: function handleAnimateOutEnd() {
		    if (this.props.onAnimateOutEnd && this.isMounted()) {
		      this.props.onAnimateOutEnd(this.props.index);
		    }
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (this.props.active !== nextProps.active) {
		      this.setState({
		        direction: null
		      });
		    }
		  },

		  componentDidUpdate: function componentDidUpdate(prevProps) {
		    if (!this.props.active && prevProps.active) {
		      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.handleAnimateOutEnd);
		    }

		    if (this.props.active !== prevProps.active) {
		      setTimeout(this.startAnimation, 20);
		    }
		  },

		  startAnimation: function startAnimation() {
		    if (!this.isMounted()) {
		      return;
		    }

		    this.setState({
		      direction: this.props.direction === 'prev' ? 'right' : 'left'
		    });
		  },

		  render: function render() {
		    var classes = {
		      item: true,
		      active: this.props.active && !this.props.animateIn || this.props.animateOut,
		      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
		      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
		    };

		    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
		      classes[this.state.direction] = true;
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children,
		      this.props.caption ? this.renderCaption() : null
		    );
		  },

		  renderCaption: function renderCaption() {
		    var classes = _utilsBootstrapUtils.prefix(this.props, 'caption');

		    return _react2['default'].createElement(
		      'div',
		      { className: classes },
		      this.props.caption
		    );
		  }
		});

		exports['default'] = CarouselItem;
		module.exports = exports['default'];

	/***/ },
	/* 65 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_65__;

	/***/ },
	/* 66 */
	/***/ function(module, exports) {

		/**
		 * Copyright 2013-2014, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This file contains a modified version of:
		 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
		 *
		 * This source code is licensed under the BSD-style license found here:
		 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
		 * An additional grant of patent rights can be found here:
		 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
		 */

		'use strict';

		exports.__esModule = true;
		var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

		/**
		 * EVENT_NAME_MAP is used to determine which event fired when a
		 * transition/animation ends, based on the style property used to
		 * define that event.
		 */
		var EVENT_NAME_MAP = {
		  transitionend: {
		    'transition': 'transitionend',
		    'WebkitTransition': 'webkitTransitionEnd',
		    'MozTransition': 'mozTransitionEnd',
		    'OTransition': 'oTransitionEnd',
		    'msTransition': 'MSTransitionEnd'
		  },

		  animationend: {
		    'animation': 'animationend',
		    'WebkitAnimation': 'webkitAnimationEnd',
		    'MozAnimation': 'mozAnimationEnd',
		    'OAnimation': 'oAnimationEnd',
		    'msAnimation': 'MSAnimationEnd'
		  }
		};

		var endEvents = [];

		function detectEvents() {
		  var testEl = document.createElement('div');
		  var style = testEl.style;

		  // On some platforms, in particular some releases of Android 4.x,
		  // the un-prefixed "animation" and "transition" properties are defined on the
		  // style object but the events that fire will still be prefixed, so we need
		  // to check if the un-prefixed events are useable, and if not remove them
		  // from the map
		  if (!('AnimationEvent' in window)) {
		    delete EVENT_NAME_MAP.animationend.animation;
		  }

		  if (!('TransitionEvent' in window)) {
		    delete EVENT_NAME_MAP.transitionend.transition;
		  }

		  for (var baseEventName in EVENT_NAME_MAP) {
		    // eslint-disable-line guard-for-in
		    var baseEvents = EVENT_NAME_MAP[baseEventName];
		    for (var styleName in baseEvents) {
		      if (styleName in style) {
		        endEvents.push(baseEvents[styleName]);
		        break;
		      }
		    }
		  }
		}

		if (canUseDOM) {
		  detectEvents();
		}

		// We use the raw {add|remove}EventListener() call because EventListener
		// does not know how to remove event listeners and we really should
		// clean up. Also, these events are not triggered in older browsers
		// so we should be A-OK here.

		function addEventListener(node, eventName, eventListener) {
		  node.addEventListener(eventName, eventListener, false);
		}

		function removeEventListener(node, eventName, eventListener) {
		  node.removeEventListener(eventName, eventListener, false);
		}

		var ReactTransitionEvents = {
		  addEndEventListener: function addEndEventListener(node, eventListener) {
		    if (endEvents.length === 0) {
		      // If CSS transitions are not supported, trigger an "end animation"
		      // event immediately.
		      window.setTimeout(eventListener, 0);
		      return;
		    }
		    endEvents.forEach(function (endEvent) {
		      addEventListener(node, endEvent, eventListener);
		    });
		  },

		  removeEndEventListener: function removeEndEventListener(node, eventListener) {
		    if (endEvents.length === 0) {
		      return;
		    }
		    endEvents.forEach(function (endEvent) {
		      removeEventListener(node, endEvent, eventListener);
		    });
		  }
		};

		exports['default'] = ReactTransitionEvents;
		module.exports = exports['default'];

	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var propTypes = {
		  inline: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  /**
		   * Only valid if `inline` is not set.
		   */
		  validationState: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error'])
		};

		var defaultProps = {
		  inline: false,
		  disabled: false
		};

		var Checkbox = (function (_React$Component) {
		  _inherits(Checkbox, _React$Component);

		  function Checkbox() {
		    _classCallCheck(this, Checkbox);

		    _React$Component.apply(this, arguments);
		  }

		  Checkbox.prototype.render = function render() {
		    var _props = this.props;
		    var inline = _props.inline;
		    var disabled = _props.disabled;
		    var validationState = _props.validationState;
		    var className = _props.className;
		    var style = _props.style;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['inline', 'disabled', 'validationState', 'className', 'style', 'children']);

		    delete props.bsClass;

		    if (inline) {
		      var _classes;

		      var _classes2 = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props, 'inline')] = true, _classes.disabled = disabled, _classes);

		      // Use a warning here instead of in propTypes to get better-looking
		      // generated documentation.
		       true ? _warning2['default'](!validationState, '`validationState` is ignored on `<Checkbox inline>`. To display ' + 'validation state on an inline checkbox, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : undefined;

		      return _react2['default'].createElement(
		        'label',
		        { className: _classnames2['default'](className, _classes2), style: style },
		        _react2['default'].createElement('input', _extends({}, props, { type: 'checkbox', disabled: disabled })),
		        children
		      );
		    }

		    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(this.props), {
		      disabled: disabled
		    });
		    if (validationState) {
		      classes['has-' + validationState] = true;
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](className, classes), style: style },
		      _react2['default'].createElement(
		        'label',
		        null,
		        _react2['default'].createElement('input', _extends({}, props, { type: 'checkbox', disabled: disabled })),
		        children
		      )
		    );
		  };

		  return Checkbox;
		})(_react2['default'].Component);

		Checkbox.propTypes = propTypes;
		Checkbox.defaultProps = defaultProps;

		exports['default'] = _utilsBootstrapUtils.bsClass('checkbox', Checkbox);
		module.exports = exports['default'];

	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _styleMaps = __webpack_require__(25);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Clearfix = _react2['default'].createClass({
		  displayName: 'Clearfix',

		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],
		    /**
		     * Apply clearfix
		     *
		     * on Extra small devices Phones
		     *
		     * adds class `visible-xs-block`
		     */
		    visibleXsBlock: _react2['default'].PropTypes.bool,
		    /**
		     * Apply clearfix
		     *
		     * on Small devices Tablets
		     *
		     * adds class `visible-sm-block`
		     */
		    visibleSmBlock: _react2['default'].PropTypes.bool,
		    /**
		     * Apply clearfix
		     *
		     * on Medium devices Desktops
		     *
		     * adds class `visible-md-block`
		     */
		    visibleMdBlock: _react2['default'].PropTypes.bool,
		    /**
		     * Apply clearfix
		     *
		     * on Large devices Desktops
		     *
		     * adds class `visible-lg-block`
		     */
		    visibleLgBlock: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var _this = this;

		    var ComponentClass = this.props.componentClass;

		    var classes = {};

		    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
		      var size = _styleMaps2['default'].SIZES[key];

		      classes['visible-' + size + '-block'] = _this.props['visible' + size.charAt(0).toUpperCase() + size.slice(1) + 'Block'];
		    }, this);

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'clearfix', classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Clearfix;
		module.exports = exports['default'];

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var propTypes = {
		  /**
		   * Uses `controlId` from `<FormGroup>` if not explicitly specified.
		   */
		  htmlFor: _react2['default'].PropTypes.string,
		  srOnly: _react2['default'].PropTypes.bool
		};

		var defaultProps = {
		  srOnly: false
		};

		var contextTypes = {
		  $bs_formGroup: _react2['default'].PropTypes.object
		};

		var ControlLabel = (function (_React$Component) {
		  _inherits(ControlLabel, _React$Component);

		  function ControlLabel() {
		    _classCallCheck(this, ControlLabel);

		    _React$Component.apply(this, arguments);
		  }

		  ControlLabel.prototype.render = function render() {
		    var formGroup = this.context.$bs_formGroup;
		    var controlId = formGroup && formGroup.controlId;

		    var _props = this.props;
		    var _props$htmlFor = _props.htmlFor;
		    var htmlFor = _props$htmlFor === undefined ? controlId : _props$htmlFor;
		    var srOnly = _props.srOnly;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['htmlFor', 'srOnly', 'className']);

		     true ? _warning2['default'](controlId == null || htmlFor === controlId, '`controlId` is ignored on `<ControlLabel>` when `htmlFor` is specified.') : undefined;

		    delete props.bsClass;

		    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(this.props), {
		      'sr-only': srOnly
		    });

		    return _react2['default'].createElement('label', _extends({}, props, {
		      htmlFor: htmlFor,
		      className: _classnames2['default'](className, classes)
		    }));
		  };

		  return ControlLabel;
		})(_react2['default'].Component);

		ControlLabel.propTypes = propTypes;
		ControlLabel.defaultProps = defaultProps;
		ControlLabel.contextTypes = contextTypes;

		exports['default'] = _utilsBootstrapUtils.bsClass('control-label', ControlLabel);
		module.exports = exports['default'];

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _styleMaps = __webpack_require__(25);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Col = _react2['default'].createClass({
		  displayName: 'Col',

		  propTypes: {
		    /**
		     * The number of columns you wish to span
		     *
		     * for Extra small devices Phones (<768px)
		     *
		     * class-prefix `col-xs-`
		     */
		    xs: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Small devices Tablets (≥768px)
		     *
		     * class-prefix `col-sm-`
		     */
		    sm: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Medium devices Desktops (≥992px)
		     *
		     * class-prefix `col-md-`
		     */
		    md: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Large devices Desktops (≥1200px)
		     *
		     * class-prefix `col-lg-`
		     */
		    lg: _react2['default'].PropTypes.number,
		    /**
		     * Hide column
		     *
		     * on Extra small devices Phones
		     *
		     * adds class `hidden-xs`
		     */
		    xsHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Small devices Tablets
		     *
		     * adds class `hidden-sm`
		     */
		    smHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Medium devices Desktops
		     *
		     * adds class `hidden-md`
		     */
		    mdHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Large devices Desktops
		     *
		     * adds class `hidden-lg`
		     */
		    lgHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Move columns to the right
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-offset-`
		     */
		    xsOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-offset-`
		     */
		    smOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-offset-`
		     */
		    mdOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-offset-`
		     */
		    lgOffset: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-push-`
		     */
		    xsPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-push-`
		     */
		    smPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-push-`
		     */
		    mdPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-push-`
		     */
		    lgPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-pull-`
		     */
		    xsPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-pull-`
		     */
		    smPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-pull-`
		     */
		    mdPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-pull-`
		     */
		    lgPull: _react2['default'].PropTypes.number,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var _this = this;

		    var ComponentClass = this.props.componentClass;
		    var classes = {};

		    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
		      var size = _styleMaps2['default'].SIZES[key];
		      var prop = size;
		      var classPart = size + '-';

		      if (_this.props[prop]) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      classes['hidden-' + size] = _this.props[size + 'Hidden'];

		      prop = size + 'Offset';
		      classPart = size + '-offset-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      prop = size + 'Push';
		      classPart = size + '-push-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      prop = size + 'Pull';
		      classPart = size + '-pull-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }
		    }, this);

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Col;
		module.exports = exports['default'];

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _domHelpersStyle = __webpack_require__(72);

		var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactOverlaysLibTransition = __webpack_require__(80);

		var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var capitalize = function capitalize(str) {
		  return str[0].toUpperCase() + str.substr(1);
		};

		// reading a dimension prop will cause the browser to recalculate,
		// which will let our animations work
		var triggerBrowserReflow = function triggerBrowserReflow(node) {
		  return node.offsetHeight;
		};

		var MARGINS = {
		  height: ['marginTop', 'marginBottom'],
		  width: ['marginLeft', 'marginRight']
		};

		function getDimensionValue(dimension, elem) {
		  var value = elem['offset' + capitalize(dimension)];
		  var margins = MARGINS[dimension];

		  return value + parseInt(_domHelpersStyle2['default'](elem, margins[0]), 10) + parseInt(_domHelpersStyle2['default'](elem, margins[1]), 10);
		}

		var Collapse = (function (_React$Component) {
		  _inherits(Collapse, _React$Component);

		  function Collapse(props, context) {
		    _classCallCheck(this, Collapse);

		    _React$Component.call(this, props, context);

		    this.onEnterListener = this.handleEnter.bind(this);
		    this.onEnteringListener = this.handleEntering.bind(this);
		    this.onEnteredListener = this.handleEntered.bind(this);
		    this.onExitListener = this.handleExit.bind(this);
		    this.onExitingListener = this.handleExiting.bind(this);
		  }

		  // Explicitly copied from Transition for doc generation.
		  // TODO: Remove duplication once #977 is resolved.

		  Collapse.prototype.render = function render() {
		    var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
		    var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
		    var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
		    var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
		    var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

		    return _react2['default'].createElement(
		      _reactOverlaysLibTransition2['default'],
		      _extends({
		        ref: 'transition'
		      }, this.props, {
		        'aria-expanded': this.props.role ? this.props['in'] : null,
		        className: _classnames2['default'](this.props.className, { width: this._dimension() === 'width' }),
		        exitedClassName: 'collapse',
		        exitingClassName: 'collapsing',
		        enteredClassName: 'collapse in',
		        enteringClassName: 'collapsing',
		        onEnter: enter,
		        onEntering: entering,
		        onEntered: entered,
		        onExit: exit,
		        onExiting: exiting,
		        onExited: this.props.onExited
		      }),
		      this.props.children
		    );
		  };

		  /* -- Expanding -- */

		  Collapse.prototype.handleEnter = function handleEnter(elem) {
		    var dimension = this._dimension();
		    elem.style[dimension] = '0';
		  };

		  Collapse.prototype.handleEntering = function handleEntering(elem) {
		    var dimension = this._dimension();

		    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
		  };

		  Collapse.prototype.handleEntered = function handleEntered(elem) {
		    var dimension = this._dimension();
		    elem.style[dimension] = null;
		  };

		  /* -- Collapsing -- */

		  Collapse.prototype.handleExit = function handleExit(elem) {
		    var dimension = this._dimension();

		    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
		  };

		  Collapse.prototype.handleExiting = function handleExiting(elem) {
		    var dimension = this._dimension();

		    triggerBrowserReflow(elem);
		    elem.style[dimension] = '0';
		  };

		  Collapse.prototype._dimension = function _dimension() {
		    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
		  };

		  // for testing

		  Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
		    return this.refs.transition;
		  };

		  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
		    return elem['scroll' + capitalize(dimension)] + 'px';
		  };

		  return Collapse;
		})(_react2['default'].Component);

		Collapse.propTypes = {
		  /**
		   * Show the component; triggers the expand or collapse animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is collapsed
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the expand animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * Duration of the collapse animation in milliseconds, to ensure that
		   * finishing callbacks are fired even if the original browser transition end
		   * events are canceled
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * Callback fired before the component expands
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to expand
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has expanded
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the component collapses
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to collapse
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has collapsed
		   */
		  onExited: _react2['default'].PropTypes.func,

		  /**
		   * The dimension used when collapsing, or a function that returns the
		   * dimension
		   *
		   * _Note: Bootstrap only partially supports 'width'!
		   * You will need to supply your own CSS animation for the `.width` CSS class._
		   */
		  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

		  /**
		   * Function that returns the height or width of the animating DOM node
		   *
		   * Allows for providing some custom logic for how much the Collapse component
		   * should animate in its specified dimension. Called with the current
		   * dimension prop value and the DOM node.
		   */
		  getDimensionValue: _react2['default'].PropTypes.func,

		  /**
		   * ARIA role of collapsible element
		   */
		  role: _react2['default'].PropTypes.string
		};

		Collapse.defaultProps = {
		  'in': false,
		  timeout: 300,
		  unmountOnExit: false,
		  transitionAppear: false,

		  dimension: 'height',
		  getDimensionValue: getDimensionValue
		};

		exports['default'] = Collapse;
		module.exports = exports['default'];

	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var camelize = __webpack_require__(73),
		    hyphenate = __webpack_require__(75),
		    _getComputedStyle = __webpack_require__(77),
		    removeStyle = __webpack_require__(79);

		var has = Object.prototype.hasOwnProperty;

		module.exports = function style(node, property, value) {
		  var css = '',
		      props = property;

		  if (typeof property === 'string') {

		    if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
		  }

		  for (var key in props) if (has.call(props, key)) {
		    !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
		  }

		  node.style.cssText += ';' + css;
		};

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
		 */

		'use strict';
		var camelize = __webpack_require__(74);
		var msPattern = /^-ms-/;

		module.exports = function camelizeStyleName(string) {
		  return camelize(string.replace(msPattern, 'ms-'));
		};

	/***/ },
	/* 74 */
	/***/ function(module, exports) {

		"use strict";

		var rHyphen = /-(.)/g;

		module.exports = function camelize(string) {
		  return string.replace(rHyphen, function (_, chr) {
		    return chr.toUpperCase();
		  });
		};

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2014, Facebook, Inc.
		 * All rights reserved.
		 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
		 */

		"use strict";

		var hyphenate = __webpack_require__(76);
		var msPattern = /^ms-/;

		module.exports = function hyphenateStyleName(string) {
		  return hyphenate(string).replace(msPattern, "-ms-");
		};

	/***/ },
	/* 76 */
	/***/ function(module, exports) {

		'use strict';

		var rUpper = /([A-Z])/g;

		module.exports = function hyphenate(string) {
		  return string.replace(rUpper, '-$1').toLowerCase();
		};

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(78);

		var _utilCamelizeStyle = __webpack_require__(73);

		var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

		var rposition = /^(top|right|bottom|left)$/;
		var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

		module.exports = function _getComputedStyle(node) {
		  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
		  var doc = node.ownerDocument;

		  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
		    getPropertyValue: function getPropertyValue(prop) {
		      var style = node.style;

		      prop = (0, _utilCamelizeStyle2['default'])(prop);

		      if (prop == 'float') prop = 'styleFloat';

		      var current = node.currentStyle[prop] || null;

		      if (current == null && style && style[prop]) current = style[prop];

		      if (rnumnonpx.test(current) && !rposition.test(prop)) {
		        // Remember the original values
		        var left = style.left;
		        var runStyle = node.runtimeStyle;
		        var rsLeft = runStyle && runStyle.left;

		        // Put in the new values to get a computed value out
		        if (rsLeft) runStyle.left = node.currentStyle.left;

		        style.left = prop === 'fontSize' ? '1em' : current;
		        current = style.pixelLeft + 'px';

		        // Revert the changed values
		        style.left = left;
		        if (rsLeft) runStyle.left = rsLeft;
		      }

		      return current;
		    }
		  };
		};

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === "object") {
		    factory(exports);
		  } else {
		    factory(root.babelHelpers = {});
		  }
		})(this, function (global) {
		  var babelHelpers = global;

		  babelHelpers.interopRequireDefault = function (obj) {
		    return obj && obj.__esModule ? obj : {
		      "default": obj
		    };
		  };

		  babelHelpers._extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  };
		})

	/***/ },
	/* 79 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function removeStyle(node, key) {
		  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
		};

	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _domHelpersTransitionProperties = __webpack_require__(81);

		var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

		var _domHelpersEventsOn = __webpack_require__(83);

		var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

		var UNMOUNTED = 0;
		exports.UNMOUNTED = UNMOUNTED;
		var EXITED = 1;
		exports.EXITED = EXITED;
		var ENTERING = 2;
		exports.ENTERING = ENTERING;
		var ENTERED = 3;
		exports.ENTERED = ENTERED;
		var EXITING = 4;

		exports.EXITING = EXITING;
		/**
		 * The Transition component lets you define and run css transitions with a simple declarative api.
		 * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
		 * but is specifically optimized for transitioning a single child "in" or "out".
		 *
		 * You don't even need to use class based css transitions if you don't want to (but it is easiest).
		 * The extensive set of lifecyle callbacks means you have control over
		 * the transitioning now at each step of the way.
		 */

		var Transition = (function (_React$Component) {
		  _inherits(Transition, _React$Component);

		  function Transition(props, context) {
		    _classCallCheck(this, Transition);

		    _React$Component.call(this, props, context);

		    var initialStatus = undefined;
		    if (props['in']) {
		      // Start enter transition in componentDidMount.
		      initialStatus = props.transitionAppear ? EXITED : ENTERED;
		    } else {
		      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
		    }
		    this.state = { status: initialStatus };

		    this.nextCallback = null;
		  }

		  Transition.prototype.componentDidMount = function componentDidMount() {
		    if (this.props.transitionAppear && this.props['in']) {
		      this.performEnter(this.props);
		    }
		  };

		  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    if (nextProps['in'] && this.props.unmountOnExit) {
		      if (this.state.status === UNMOUNTED) {
		        // Start enter transition in componentDidUpdate.
		        this.setState({ status: EXITED });
		      }
		    } else {
		      this._needsUpdate = true;
		    }
		  };

		  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
		    var status = this.state.status;

		    if (this.props.unmountOnExit && status === EXITED) {
		      // EXITED is always a transitional state to either ENTERING or UNMOUNTED
		      // when using unmountOnExit.
		      if (this.props['in']) {
		        this.performEnter(this.props);
		      } else {
		        this.setState({ status: UNMOUNTED });
		      }

		      return;
		    }

		    // guard ensures we are only responding to prop changes
		    if (this._needsUpdate) {
		      this._needsUpdate = false;

		      if (this.props['in']) {
		        if (status === EXITING) {
		          this.performEnter(this.props);
		        } else if (status === EXITED) {
		          this.performEnter(this.props);
		        }
		        // Otherwise we're already entering or entered.
		      } else {
		          if (status === ENTERING || status === ENTERED) {
		            this.performExit(this.props);
		          }
		          // Otherwise we're already exited or exiting.
		        }
		    }
		  };

		  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
		    this.cancelNextCallback();
		  };

		  Transition.prototype.performEnter = function performEnter(props) {
		    var _this = this;

		    this.cancelNextCallback();
		    var node = _reactDom2['default'].findDOMNode(this);

		    // Not this.props, because we might be about to receive new props.
		    props.onEnter(node);

		    this.safeSetState({ status: ENTERING }, function () {
		      _this.props.onEntering(node);

		      _this.onTransitionEnd(node, function () {
		        _this.safeSetState({ status: ENTERED }, function () {
		          _this.props.onEntered(node);
		        });
		      });
		    });
		  };

		  Transition.prototype.performExit = function performExit(props) {
		    var _this2 = this;

		    this.cancelNextCallback();
		    var node = _reactDom2['default'].findDOMNode(this);

		    // Not this.props, because we might be about to receive new props.
		    props.onExit(node);

		    this.safeSetState({ status: EXITING }, function () {
		      _this2.props.onExiting(node);

		      _this2.onTransitionEnd(node, function () {
		        _this2.safeSetState({ status: EXITED }, function () {
		          _this2.props.onExited(node);
		        });
		      });
		    });
		  };

		  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
		    if (this.nextCallback !== null) {
		      this.nextCallback.cancel();
		      this.nextCallback = null;
		    }
		  };

		  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
		    // This shouldn't be necessary, but there are weird race conditions with
		    // setState callbacks and unmounting in testing, so always make sure that
		    // we can cancel any pending setState callbacks after we unmount.
		    this.setState(nextState, this.setNextCallback(callback));
		  };

		  Transition.prototype.setNextCallback = function setNextCallback(callback) {
		    var _this3 = this;

		    var active = true;

		    this.nextCallback = function (event) {
		      if (active) {
		        active = false;
		        _this3.nextCallback = null;

		        callback(event);
		      }
		    };

		    this.nextCallback.cancel = function () {
		      active = false;
		    };

		    return this.nextCallback;
		  };

		  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
		    this.setNextCallback(handler);

		    if (node) {
		      _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
		      setTimeout(this.nextCallback, this.props.timeout);
		    } else {
		      setTimeout(this.nextCallback, 0);
		    }
		  };

		  Transition.prototype.render = function render() {
		    var status = this.state.status;
		    if (status === UNMOUNTED) {
		      return null;
		    }

		    var _props = this.props;
		    var children = _props.children;
		    var className = _props.className;

		    var childProps = _objectWithoutProperties(_props, ['children', 'className']);

		    Object.keys(Transition.propTypes).forEach(function (key) {
		      return delete childProps[key];
		    });

		    var transitionClassName = undefined;
		    if (status === EXITED) {
		      transitionClassName = this.props.exitedClassName;
		    } else if (status === ENTERING) {
		      transitionClassName = this.props.enteringClassName;
		    } else if (status === ENTERED) {
		      transitionClassName = this.props.enteredClassName;
		    } else if (status === EXITING) {
		      transitionClassName = this.props.exitingClassName;
		    }

		    var child = _react2['default'].Children.only(children);
		    return _react2['default'].cloneElement(child, _extends({}, childProps, {
		      className: _classnames2['default'](child.props.className, className, transitionClassName)
		    }));
		  };

		  return Transition;
		})(_react2['default'].Component);

		Transition.propTypes = {
		  /**
		   * Show the component; triggers the enter or exit animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is not shown
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the enter animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
		   * transition indefinately if the browser transitionEnd events are
		   * canceled or interrupted.
		   *
		   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
		   * setting this to the duration of your animation (or a bit above it).
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * CSS class or classes applied when the component is exited
		   */
		  exitedClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied while the component is exiting
		   */
		  exitingClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied when the component is entered
		   */
		  enteredClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied while the component is entering
		   */
		  enteringClassName: _react2['default'].PropTypes.string,

		  /**
		   * Callback fired before the "entering" classes are applied
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "entering" classes are applied
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "enter" classes are applied
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the "exiting" classes are applied
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "exiting" classes are applied
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "exited" classes are applied
		   */
		  onExited: _react2['default'].PropTypes.func
		};

		// Name the function so it is clearer in the documentation
		function noop() {}

		Transition.displayName = 'Transition';

		Transition.defaultProps = {
		  'in': false,
		  unmountOnExit: false,
		  transitionAppear: false,

		  timeout: 5000,

		  onEnter: noop,
		  onEntering: noop,
		  onEntered: noop,

		  onExit: noop,
		  onExiting: noop,
		  onExited: noop
		};

		exports['default'] = Transition;

	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(82);

		var has = Object.prototype.hasOwnProperty,
		    transform = 'transform',
		    transition = {},
		    transitionTiming,
		    transitionDuration,
		    transitionProperty,
		    transitionDelay;

		if (canUseDOM) {
		  transition = getTransitionProperties();

		  transform = transition.prefix + transform;

		  transitionProperty = transition.prefix + 'transition-property';
		  transitionDuration = transition.prefix + 'transition-duration';
		  transitionDelay = transition.prefix + 'transition-delay';
		  transitionTiming = transition.prefix + 'transition-timing-function';
		}

		module.exports = {
		  transform: transform,
		  end: transition.end,
		  property: transitionProperty,
		  timing: transitionTiming,
		  delay: transitionDelay,
		  duration: transitionDuration
		};

		function getTransitionProperties() {
		  var endEvent,
		      prefix = '',
		      transitions = {
		    O: 'otransitionend',
		    Moz: 'transitionend',
		    Webkit: 'webkitTransitionEnd',
		    ms: 'MSTransitionEnd'
		  };

		  var element = document.createElement('div');

		  for (var vendor in transitions) if (has.call(transitions, vendor)) {
		    if (element.style[vendor + 'TransitionProperty'] !== undefined) {
		      prefix = '-' + vendor.toLowerCase() + '-';
		      endEvent = transitions[vendor];
		      break;
		    }
		  }

		  if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

		  return { end: endEvent, prefix: prefix };
		}

	/***/ },
	/* 82 */
	/***/ function(module, exports) {

		'use strict';
		module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(82);
		var on = function on() {};

		if (canUseDOM) {
		  on = (function () {

		    if (document.addEventListener) return function (node, eventName, handler, capture) {
		      return node.addEventListener(eventName, handler, capture || false);
		    };else if (document.attachEvent) return function (node, eventName, handler) {
		      return node.attachEvent('on' + eventName, handler);
		    };
		  })();
		}

		module.exports = on;

	/***/ },
	/* 84 */
	/***/ function(module, exports) {

		/**
		 * Safe chained function
		 *
		 * Will only create a new function if needed,
		 * otherwise will pass back existing functions or null.
		 *
		 * @param {function} functions to chain
		 * @returns {function|null}
		 */
		'use strict';

		exports.__esModule = true;
		function createChainedFunction() {
		  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
		    funcs[_key] = arguments[_key];
		  }

		  return funcs.filter(function (f) {
		    return f != null;
		  }).reduce(function (acc, f) {
		    if (typeof f !== 'function') {
		      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
		    }

		    if (acc === null) {
		      return f;
		    }

		    return function chainedFunction() {
		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      acc.apply(this, args);
		      f.apply(this, args);
		    };
		  }, null);
		}

		exports['default'] = createChainedFunction;
		module.exports = exports['default'];

	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _domHelpersActiveElement = __webpack_require__(86);

		var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

		var _domHelpersQueryContains = __webpack_require__(88);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _keycode = __webpack_require__(89);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _lodashCompatCollectionFind = __webpack_require__(90);

		var _lodashCompatCollectionFind2 = _interopRequireDefault(_lodashCompatCollectionFind);

		var _lodashCompatObjectOmit = __webpack_require__(143);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactPropTypesLibAll = __webpack_require__(53);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(158);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var _uncontrollable = __webpack_require__(159);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsCustomPropTypes = __webpack_require__(162);

		var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _ButtonGroup = __webpack_require__(52);

		var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

		var _DropdownMenu = __webpack_require__(164);

		var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

		var _DropdownToggle = __webpack_require__(170);

		var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

		var TOGGLE_REF = 'toggle-btn';
		var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
		var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

		var Dropdown = (function (_React$Component) {
		  _inherits(Dropdown, _React$Component);

		  function Dropdown(props) {
		    _classCallCheck(this, Dropdown);

		    _React$Component.call(this, props);

		    this.Toggle = _DropdownToggle2['default'];

		    this.toggleOpen = this.toggleOpen.bind(this);
		    this.handleClick = this.handleClick.bind(this);
		    this.handleKeyDown = this.handleKeyDown.bind(this);
		    this.handleClose = this.handleClose.bind(this);
		    this.extractChildren = this.extractChildren.bind(this);

		    this.refineMenu = this.refineMenu.bind(this);
		    this.refineToggle = this.refineToggle.bind(this);

		    this.childExtractors = [{
		      key: 'toggle',
		      matches: function matches(child) {
		        return child.props.bsRole === TOGGLE_ROLE;
		      },
		      refine: this.refineToggle
		    }, {
		      key: 'menu',
		      exclusive: true,
		      matches: function matches(child) {
		        return child.props.bsRole === MENU_ROLE;
		      },
		      refine: this.refineMenu
		    }];

		    this.state = {};

		    this.lastOpenEventType = null;
		  }

		  Dropdown.prototype.componentDidMount = function componentDidMount() {
		    this.focusNextOnOpen();
		  };

		  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
		    if (!nextProps.open && this.props.open) {
		      this._focusInDropdown = _domHelpersQueryContains2['default'](_reactDom2['default'].findDOMNode(this.refs.menu), _domHelpersActiveElement2['default'](document));
		    }
		  };

		  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		    if (this.props.open && !prevProps.open) {
		      this.focusNextOnOpen();
		    }

		    if (!this.props.open && prevProps.open) {
		      // if focus hasn't already moved from the menu lets return it
		      // to the toggle
		      if (this._focusInDropdown) {
		        this._focusInDropdown = false;
		        this.focus();
		      }
		    }
		  };

		  Dropdown.prototype.render = function render() {
		    var _rootClasses;

		    var children = this.extractChildren();
		    var Component = this.props.componentClass;

		    var props = _lodashCompatObjectOmit2['default'](this.props, ['id', 'bsClass', 'role']);
		    var className = _utilsBootstrapUtils.prefix(this.props);

		    var rootClasses = (_rootClasses = {
		      open: this.props.open,
		      disabled: this.props.disabled
		    }, _rootClasses[className] = !this.props.dropup, _rootClasses.dropup = this.props.dropup, _rootClasses);

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, rootClasses)
		      }),
		      children
		    );
		  };

		  Dropdown.prototype.toggleOpen = function toggleOpen() {
		    var eventType = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

		    var open = !this.props.open;

		    if (open) {
		      this.lastOpenEventType = eventType;
		    }

		    if (this.props.onToggle) {
		      this.props.onToggle(open);
		    }
		  };

		  Dropdown.prototype.handleClick = function handleClick() {
		    if (this.props.disabled) {
		      return;
		    }

		    this.toggleOpen('click');
		  };

		  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
		    if (this.props.disabled) {
		      return;
		    }

		    switch (event.keyCode) {
		      case _keycode2['default'].codes.down:
		        if (!this.props.open) {
		          this.toggleOpen('keydown');
		        } else if (this.refs.menu.focusNext) {
		          this.refs.menu.focusNext();
		        }
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.esc:
		      case _keycode2['default'].codes.tab:
		        this.handleClose(event);
		        break;
		      default:
		    }
		  };

		  Dropdown.prototype.handleClose = function handleClose() {
		    if (!this.props.open) {
		      return;
		    }

		    this.toggleOpen();
		  };

		  Dropdown.prototype.focusNextOnOpen = function focusNextOnOpen() {
		    var menu = this.refs.menu;

		    if (!menu.focusNext) {
		      return;
		    }

		    if (this.lastOpenEventType === 'keydown' || this.props.role === 'menuitem') {
		      menu.focusNext();
		    }
		  };

		  Dropdown.prototype.focus = function focus() {
		    var toggle = _reactDom2['default'].findDOMNode(this.refs[TOGGLE_REF]);

		    if (toggle && toggle.focus) {
		      toggle.focus();
		    }
		  };

		  Dropdown.prototype.extractChildren = function extractChildren() {
		    var _this = this;

		    var open = !!this.props.open;
		    var seen = {};

		    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
		      var extractor = _lodashCompatCollectionFind2['default'](_this.childExtractors, function (x) {
		        return x.matches(child);
		      });

		      if (extractor) {
		        if (seen[extractor.key]) {
		          return false;
		        }

		        seen[extractor.key] = extractor.exclusive;
		        child = extractor.refine(child, open);
		      }

		      return child;
		    });
		  };

		  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
		    var menuProps = {
		      ref: 'menu',
		      open: open,
		      labelledBy: this.props.id,
		      pullRight: this.props.pullRight,
		      bsClass: this.props.bsClass
		    };

		    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

		    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

		    return _react.cloneElement(menu, menuProps, menu.props.children);
		  };

		  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
		    var toggleProps = {
		      open: open,
		      id: this.props.id,
		      ref: TOGGLE_REF,
		      role: this.props.role
		    };

		    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

		    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

		    return _react.cloneElement(toggle, toggleProps, toggle.props.children);
		  };

		  return Dropdown;
		})(_react2['default'].Component);

		Dropdown.Toggle = _DropdownToggle2['default'];

		Dropdown.TOGGLE_REF = TOGGLE_REF;
		Dropdown.TOGGLE_ROLE = TOGGLE_ROLE;
		Dropdown.MENU_ROLE = MENU_ROLE;

		Dropdown.defaultProps = {
		  componentClass: _ButtonGroup2['default'],
		  bsClass: 'dropdown'
		};

		Dropdown.propTypes = {

		  bsClass: _react2['default'].PropTypes.string,

		  /**
		   * The menu will open above the dropdown button, instead of below it.
		   */
		  dropup: _react2['default'].PropTypes.bool,

		  /**
		   * An html id attribute, necessary for assistive technologies, such as screen readers.
		   * @type {string|number}
		   * @required
		   */
		  id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		  componentClass: _reactPropTypesLibElementType2['default'],

		  /**
		   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
		   * @type {node}
		   */
		  children: _reactPropTypesLibAll2['default'](_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)),

		  /**
		   * Whether or not component is disabled.
		   */
		  disabled: _react2['default'].PropTypes.bool,

		  /**
		   * Align the menu to the right side of the Dropdown toggle
		   */
		  pullRight: _react2['default'].PropTypes.bool,

		  /**
		   * Whether or not the Dropdown is visible.
		   *
		   * @controllable onToggle
		   */
		  open: _react2['default'].PropTypes.bool,

		  /**
		   * A callback fired when the Dropdown closes.
		   */
		  onClose: _react2['default'].PropTypes.func,

		  /**
		   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
		   * `open` value.
		   *
		   * ```js
		   * function(Boolean isOpen) {}
		   * ```
		   * @controllable open
		   */
		  onToggle: _react2['default'].PropTypes.func,

		  /**
		   * A callback fired when a menu item is selected.
		   *
		   * ```js
		   * (eventKey: any, event: Object) => any
		   * ```
		   */
		  onSelect: _react2['default'].PropTypes.func,

		  /**
		   * If `'menuitem'`, causes the dropdown to behave like a menu item rather than
		   * a menu button.
		   */
		  role: _react2['default'].PropTypes.string
		};

		Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

		Dropdown.Toggle = _DropdownToggle2['default'];
		Dropdown.Menu = _DropdownMenu2['default'];

		exports['default'] = Dropdown;
		module.exports = exports['default'];

	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(78);

		exports.__esModule = true;

		/**
		 * document.activeElement
		 */
		exports['default'] = activeElement;

		var _ownerDocument = __webpack_require__(87);

		var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

		function activeElement() {
		  var doc = arguments[0] === undefined ? document : arguments[0];

		  try {
		    return doc.activeElement;
		  } catch (e) {}
		}

		module.exports = exports['default'];

	/***/ },
	/* 87 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports["default"] = ownerDocument;

		function ownerDocument(node) {
		  return node && node.ownerDocument || document;
		}

		module.exports = exports["default"];

	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(82);

		var contains = (function () {
		  var root = canUseDOM && document.documentElement;

		  return root && root.contains ? function (context, node) {
		    return context.contains(node);
		  } : root && root.compareDocumentPosition ? function (context, node) {
		    return context === node || !!(context.compareDocumentPosition(node) & 16);
		  } : function (context, node) {
		    if (node) do {
		      if (node === context) return true;
		    } while (node = node.parentNode);

		    return false;
		  };
		})();

		module.exports = contains;

	/***/ },
	/* 89 */
	/***/ function(module, exports) {

		// Source: http://jsfiddle.net/vWx8V/
		// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

		/**
		 * Conenience method returns corresponding value for given keyName or keyCode.
		 *
		 * @param {Mixed} keyCode {Number} or keyName {String}
		 * @return {Mixed}
		 * @api public
		 */

		exports = module.exports = function(searchInput) {
		  // Keyboard Events
		  if (searchInput && 'object' === typeof searchInput) {
		    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
		    if (hasKeyCode) searchInput = hasKeyCode
		  }

		  // Numbers
		  if ('number' === typeof searchInput) return names[searchInput]

		  // Everything else (cast to string)
		  var search = String(searchInput)

		  // check codes
		  var foundNamedKey = codes[search.toLowerCase()]
		  if (foundNamedKey) return foundNamedKey

		  // check aliases
		  var foundNamedKey = aliases[search.toLowerCase()]
		  if (foundNamedKey) return foundNamedKey

		  // weird character?
		  if (search.length === 1) return search.charCodeAt(0)

		  return undefined
		}

		/**
		 * Get by name
		 *
		 *   exports.code['enter'] // => 13
		 */

		var codes = exports.code = exports.codes = {
		  'backspace': 8,
		  'tab': 9,
		  'enter': 13,
		  'shift': 16,
		  'ctrl': 17,
		  'alt': 18,
		  'pause/break': 19,
		  'caps lock': 20,
		  'esc': 27,
		  'space': 32,
		  'page up': 33,
		  'page down': 34,
		  'end': 35,
		  'home': 36,
		  'left': 37,
		  'up': 38,
		  'right': 39,
		  'down': 40,
		  'insert': 45,
		  'delete': 46,
		  'command': 91,
		  'right click': 93,
		  'numpad *': 106,
		  'numpad +': 107,
		  'numpad -': 109,
		  'numpad .': 110,
		  'numpad /': 111,
		  'num lock': 144,
		  'scroll lock': 145,
		  'my computer': 182,
		  'my calculator': 183,
		  ';': 186,
		  '=': 187,
		  ',': 188,
		  '-': 189,
		  '.': 190,
		  '/': 191,
		  '`': 192,
		  '[': 219,
		  '\\': 220,
		  ']': 221,
		  "'": 222
		}

		// Helper aliases

		var aliases = exports.aliases = {
		  'windows': 91,
		  '⇧': 16,
		  '⌥': 18,
		  '⌃': 17,
		  '⌘': 91,
		  'ctl': 17,
		  'control': 17,
		  'option': 18,
		  'pause': 19,
		  'break': 19,
		  'caps': 20,
		  'return': 13,
		  'escape': 27,
		  'spc': 32,
		  'pgup': 33,
		  'pgdn': 33,
		  'ins': 45,
		  'del': 46,
		  'cmd': 91
		}


		/*!
		 * Programatically add the following
		 */

		// lower case chars
		for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

		// numbers
		for (var i = 48; i < 58; i++) codes[i - 48] = i

		// function keys
		for (i = 1; i < 13; i++) codes['f'+i] = i + 111

		// numpad keys
		for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

		/**
		 * Get by code
		 *
		 *   exports.name[13] // => 'Enter'
		 */

		var names = exports.names = exports.title = {} // title for backward compat

		// Create reverse mapping
		for (i in codes) names[codes[i]] = i

		// Add aliases
		for (var alias in aliases) {
		  codes[alias] = aliases[alias]
		}


	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {

		var baseEach = __webpack_require__(91),
		    createFind = __webpack_require__(116);

		/**
		 * Iterates over elements of `collection`, returning the first element
		 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
		 * invoked with three arguments: (value, index|key, collection).
		 *
		 * If a property name is provided for `predicate` the created `_.property`
		 * style callback returns the property value of the given element.
		 *
		 * If a value is also provided for `thisArg` the created `_.matchesProperty`
		 * style callback returns `true` for elements that have a matching property
		 * value, else `false`.
		 *
		 * If an object is provided for `predicate` the created `_.matches` style
		 * callback returns `true` for elements that have the properties of the given
		 * object, else `false`.
		 *
		 * @static
		 * @memberOf _
		 * @alias detect
		 * @category Collection
		 * @param {Array|Object|string} collection The collection to search.
		 * @param {Function|Object|string} [predicate=_.identity] The function invoked
		 *  per iteration.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {*} Returns the matched element, else `undefined`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'age': 36, 'active': true },
		 *   { 'user': 'fred',    'age': 40, 'active': false },
		 *   { 'user': 'pebbles', 'age': 1,  'active': true }
		 * ];
		 *
		 * _.result(_.find(users, function(chr) {
		 *   return chr.age < 40;
		 * }), 'user');
		 * // => 'barney'
		 *
		 * // using the `_.matches` callback shorthand
		 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
		 * // => 'pebbles'
		 *
		 * // using the `_.matchesProperty` callback shorthand
		 * _.result(_.find(users, 'active', false), 'user');
		 * // => 'fred'
		 *
		 * // using the `_.property` callback shorthand
		 * _.result(_.find(users, 'active'), 'user');
		 * // => 'barney'
		 */
		var find = createFind(baseEach);

		module.exports = find;


	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

		var baseForOwn = __webpack_require__(92),
		    createBaseEach = __webpack_require__(115);

		/**
		 * The base implementation of `_.forEach` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array|Object|string} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array|Object|string} Returns `collection`.
		 */
		var baseEach = createBaseEach(baseForOwn);

		module.exports = baseEach;


	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFor = __webpack_require__(93),
		    keys = __webpack_require__(100);

		/**
		 * The base implementation of `_.forOwn` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForOwn(object, iteratee) {
		  return baseFor(object, iteratee, keys);
		}

		module.exports = baseForOwn;


	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {

		var createBaseFor = __webpack_require__(94);

		/**
		 * The base implementation of `baseForIn` and `baseForOwn` which iterates
		 * over `object` properties returned by `keysFunc` invoking `iteratee` for
		 * each property. Iteratee functions may exit iteration early by explicitly
		 * returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		module.exports = baseFor;


	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(95);

		/**
		 * Creates a base function for `_.forIn` or `_.forInRight`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var iterable = toObject(object),
		        props = keysFunc(object),
		        length = props.length,
		        index = fromRight ? length : -1;

		    while ((fromRight ? index-- : ++index < length)) {
		      var key = props[index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		module.exports = createBaseFor;


	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(96),
		    isString = __webpack_require__(97),
		    support = __webpack_require__(99);

		/**
		 * Converts `value` to an object if it's not one.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {Object} Returns the object.
		 */
		function toObject(value) {
		  if (support.unindexedChars && isString(value)) {
		    var index = -1,
		        length = value.length,
		        result = Object(value);

		    while (++index < length) {
		      result[index] = value.charAt(index);
		    }
		    return result;
		  }
		  return isObject(value) ? value : Object(value);
		}

		module.exports = toObject;


	/***/ },
	/* 96 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
		 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(1);
		 * // => false
		 */
		function isObject(value) {
		  // Avoid a V8 JIT bug in Chrome 19-20.
		  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		module.exports = isObject;


	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {

		var isObjectLike = __webpack_require__(98);

		/** `Object#toString` result references. */
		var stringTag = '[object String]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a `String` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isString('abc');
		 * // => true
		 *
		 * _.isString(1);
		 * // => false
		 */
		function isString(value) {
		  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
		}

		module.exports = isString;


	/***/ },
	/* 98 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is object-like.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 */
		function isObjectLike(value) {
		  return !!value && typeof value == 'object';
		}

		module.exports = isObjectLike;


	/***/ },
	/* 99 */
	/***/ function(module, exports) {

		/** Used for native method references. */
		var arrayProto = Array.prototype,
		    errorProto = Error.prototype,
		    objectProto = Object.prototype;

		/** Native method references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable,
		    splice = arrayProto.splice;

		/**
		 * An object environment feature flags.
		 *
		 * @static
		 * @memberOf _
		 * @type Object
		 */
		var support = {};

		(function(x) {
		  var Ctor = function() { this.x = x; },
		      object = { '0': x, 'length': x },
		      props = [];

		  Ctor.prototype = { 'valueOf': x, 'y': x };
		  for (var key in new Ctor) { props.push(key); }

		  /**
		   * Detect if `name` or `message` properties of `Error.prototype` are
		   * enumerable by default (IE < 9, Safari < 5.1).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
		    propertyIsEnumerable.call(errorProto, 'name');

		  /**
		   * Detect if `prototype` properties are enumerable by default.
		   *
		   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
		   * (if the prototype or a property on the prototype has been set)
		   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
		   * property to `true`.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

		  /**
		   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
		   *
		   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
		   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.nonEnumShadows = !/valueOf/.test(props);

		  /**
		   * Detect if own properties are iterated after inherited properties (IE < 9).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.ownLast = props[0] != 'x';

		  /**
		   * Detect if `Array#shift` and `Array#splice` augment array-like objects
		   * correctly.
		   *
		   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
		   * `shift()` and `splice()` functions that fail to remove the last element,
		   * `value[0]`, of array-like objects even though the "length" property is
		   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
		   * while `splice()` is buggy regardless of mode in IE < 9.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

		  /**
		   * Detect lack of support for accessing string characters by index.
		   *
		   * IE < 8 can't access characters by index. IE 8 can only access characters
		   * by index on string literals, not string objects.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
		}(1, 0));

		module.exports = support;


	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {

		var getNative = __webpack_require__(101),
		    isArrayLike = __webpack_require__(105),
		    isObject = __webpack_require__(96),
		    shimKeys = __webpack_require__(109),
		    support = __webpack_require__(99);

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeKeys = getNative(Object, 'keys');

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		var keys = !nativeKeys ? shimKeys : function(object) {
		  var Ctor = object == null ? undefined : object.constructor;
		  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
		      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
		    return shimKeys(object);
		  }
		  return isObject(object) ? nativeKeys(object) : [];
		};

		module.exports = keys;


	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {

		var isNative = __webpack_require__(102);

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = object == null ? undefined : object[key];
		  return isNative(value) ? value : undefined;
		}

		module.exports = getNative;


	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {

		var isFunction = __webpack_require__(103),
		    isHostObject = __webpack_require__(104),
		    isObjectLike = __webpack_require__(98);

		/** Used to detect host constructors (Safari > 5). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to resolve the decompiled source of functions. */
		var fnToString = Function.prototype.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/**
		 * Checks if `value` is a native function.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
		 * @example
		 *
		 * _.isNative(Array.prototype.push);
		 * // => true
		 *
		 * _.isNative(_);
		 * // => false
		 */
		function isNative(value) {
		  if (value == null) {
		    return false;
		  }
		  if (isFunction(value)) {
		    return reIsNative.test(fnToString.call(value));
		  }
		  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
		}

		module.exports = isNative;


	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(96);

		/** `Object#toString` result references. */
		var funcTag = '[object Function]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in older versions of Chrome and Safari which return 'function' for regexes
		  // and Safari 8 which returns 'object' for typed array constructors.
		  return isObject(value) && objToString.call(value) == funcTag;
		}

		module.exports = isFunction;


	/***/ },
	/* 104 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is a host object in IE < 9.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
		 */
		var isHostObject = (function() {
		  try {
		    Object({ 'toString': 0 } + '');
		  } catch(e) {
		    return function() { return false; };
		  }
		  return function(value) {
		    // IE < 9 presents many host objects as `Object` objects that can coerce
		    // to strings despite having improperly defined `toString` methods.
		    return typeof value.toString != 'function' && typeof (value + '') == 'string';
		  };
		}());

		module.exports = isHostObject;


	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {

		var getLength = __webpack_require__(106),
		    isLength = __webpack_require__(108);

		/**
		 * Checks if `value` is array-like.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 */
		function isArrayLike(value) {
		  return value != null && isLength(getLength(value));
		}

		module.exports = isArrayLike;


	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {

		var baseProperty = __webpack_require__(107);

		/**
		 * Gets the "length" property value of `object`.
		 *
		 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
		 * that affects Safari on at least iOS 8.1-8.3 ARM64.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {*} Returns the "length" value.
		 */
		var getLength = baseProperty('length');

		module.exports = getLength;


	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(95);

		/**
		 * The base implementation of `_.property` without support for deep paths.
		 *
		 * @private
		 * @param {string} key The key of the property to get.
		 * @returns {Function} Returns the new function.
		 */
		function baseProperty(key) {
		  return function(object) {
		    return object == null ? undefined : toObject(object)[key];
		  };
		}

		module.exports = baseProperty;


	/***/ },
	/* 108 */
	/***/ function(module, exports) {

		/**
		 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
		 * of an array-like value.
		 */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 */
		function isLength(value) {
		  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		module.exports = isLength;


	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {

		var isArguments = __webpack_require__(110),
		    isArray = __webpack_require__(111),
		    isIndex = __webpack_require__(112),
		    isLength = __webpack_require__(108),
		    isString = __webpack_require__(97),
		    keysIn = __webpack_require__(113);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * A fallback implementation of `Object.keys` which creates an array of the
		 * own enumerable property names of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function shimKeys(object) {
		  var props = keysIn(object),
		      propsLength = props.length,
		      length = propsLength && object.length;

		  var allowIndexes = !!length && isLength(length) &&
		    (isArray(object) || isArguments(object) || isString(object));

		  var index = -1,
		      result = [];

		  while (++index < propsLength) {
		    var key = props[index];
		    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		module.exports = shimKeys;


	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {

		var isArrayLike = __webpack_require__(105),
		    isObjectLike = __webpack_require__(98);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Native method references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable;

		/**
		 * Checks if `value` is classified as an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		function isArguments(value) {
		  return isObjectLike(value) && isArrayLike(value) &&
		    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
		}

		module.exports = isArguments;


	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {

		var getNative = __webpack_require__(101),
		    isLength = __webpack_require__(108),
		    isObjectLike = __webpack_require__(98);

		/** `Object#toString` result references. */
		var arrayTag = '[object Array]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeIsArray = getNative(Array, 'isArray');

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(function() { return arguments; }());
		 * // => false
		 */
		var isArray = nativeIsArray || function(value) {
		  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
		};

		module.exports = isArray;


	/***/ },
	/* 112 */
	/***/ function(module, exports) {

		/** Used to detect unsigned integer values. */
		var reIsUint = /^\d+$/;

		/**
		 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
		 * of an array-like value.
		 */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
		  length = length == null ? MAX_SAFE_INTEGER : length;
		  return value > -1 && value % 1 == 0 && value < length;
		}

		module.exports = isIndex;


	/***/ },
	/* 113 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayEach = __webpack_require__(114),
		    isArguments = __webpack_require__(110),
		    isArray = __webpack_require__(111),
		    isFunction = __webpack_require__(103),
		    isIndex = __webpack_require__(112),
		    isLength = __webpack_require__(108),
		    isObject = __webpack_require__(96),
		    isString = __webpack_require__(97),
		    support = __webpack_require__(99);

		/** `Object#toString` result references. */
		var arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    stringTag = '[object String]';

		/** Used to fix the JScript `[[DontEnum]]` bug. */
		var shadowProps = [
		  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
		  'toLocaleString', 'toString', 'valueOf'
		];

		/** Used for native method references. */
		var errorProto = Error.prototype,
		    objectProto = Object.prototype,
		    stringProto = String.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/** Used to avoid iterating over non-enumerable properties in IE < 9. */
		var nonEnumProps = {};
		nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
		nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
		nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
		nonEnumProps[objectTag] = { 'constructor': true };

		arrayEach(shadowProps, function(key) {
		  for (var tag in nonEnumProps) {
		    if (hasOwnProperty.call(nonEnumProps, tag)) {
		      var props = nonEnumProps[tag];
		      props[key] = hasOwnProperty.call(props, key);
		    }
		  }
		});

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
		  if (object == null) {
		    return [];
		  }
		  if (!isObject(object)) {
		    object = Object(object);
		  }
		  var length = object.length;

		  length = (length && isLength(length) &&
		    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

		  var Ctor = object.constructor,
		      index = -1,
		      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
		      isProto = proto === object,
		      result = Array(length),
		      skipIndexes = length > 0,
		      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
		      skipProto = support.enumPrototypes && isFunction(object);

		  while (++index < length) {
		    result[index] = (index + '');
		  }
		  // lodash skips the `constructor` property when it infers it's iterating
		  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
		  // attribute of an existing property and the `constructor` property of a
		  // prototype defaults to non-enumerable.
		  for (var key in object) {
		    if (!(skipProto && key == 'prototype') &&
		        !(skipErrorProps && (key == 'message' || key == 'name')) &&
		        !(skipIndexes && isIndex(key, length)) &&
		        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		      result.push(key);
		    }
		  }
		  if (support.nonEnumShadows && object !== objectProto) {
		    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
		        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

		    if (tag == objectTag) {
		      proto = objectProto;
		    }
		    length = shadowProps.length;
		    while (length--) {
		      key = shadowProps[length];
		      var nonEnum = nonEnums[key];
		      if (!(isProto && nonEnum) &&
		          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
		        result.push(key);
		      }
		    }
		  }
		  return result;
		}

		module.exports = keysIn;


	/***/ },
	/* 114 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.forEach` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns `array`.
		 */
		function arrayEach(array, iteratee) {
		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    if (iteratee(array[index], index, array) === false) {
		      break;
		    }
		  }
		  return array;
		}

		module.exports = arrayEach;


	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {

		var getLength = __webpack_require__(106),
		    isLength = __webpack_require__(108),
		    toObject = __webpack_require__(95);

		/**
		 * Creates a `baseEach` or `baseEachRight` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseEach(eachFunc, fromRight) {
		  return function(collection, iteratee) {
		    var length = collection ? getLength(collection) : 0;
		    if (!isLength(length)) {
		      return eachFunc(collection, iteratee);
		    }
		    var index = fromRight ? length : -1,
		        iterable = toObject(collection);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (iteratee(iterable[index], index, iterable) === false) {
		        break;
		      }
		    }
		    return collection;
		  };
		}

		module.exports = createBaseEach;


	/***/ },
	/* 116 */
	/***/ function(module, exports, __webpack_require__) {

		var baseCallback = __webpack_require__(117),
		    baseFind = __webpack_require__(141),
		    baseFindIndex = __webpack_require__(142),
		    isArray = __webpack_require__(111);

		/**
		 * Creates a `_.find` or `_.findLast` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new find function.
		 */
		function createFind(eachFunc, fromRight) {
		  return function(collection, predicate, thisArg) {
		    predicate = baseCallback(predicate, thisArg, 3);
		    if (isArray(collection)) {
		      var index = baseFindIndex(collection, predicate, fromRight);
		      return index > -1 ? collection[index] : undefined;
		    }
		    return baseFind(collection, predicate, eachFunc);
		  };
		}

		module.exports = createFind;


	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {

		var baseMatches = __webpack_require__(118),
		    baseMatchesProperty = __webpack_require__(130),
		    bindCallback = __webpack_require__(137),
		    identity = __webpack_require__(138),
		    property = __webpack_require__(139);

		/**
		 * The base implementation of `_.callback` which supports specifying the
		 * number of arguments to provide to `func`.
		 *
		 * @private
		 * @param {*} [func=_.identity] The value to convert to a callback.
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @param {number} [argCount] The number of arguments to provide to `func`.
		 * @returns {Function} Returns the callback.
		 */
		function baseCallback(func, thisArg, argCount) {
		  var type = typeof func;
		  if (type == 'function') {
		    return thisArg === undefined
		      ? func
		      : bindCallback(func, thisArg, argCount);
		  }
		  if (func == null) {
		    return identity;
		  }
		  if (type == 'object') {
		    return baseMatches(func);
		  }
		  return thisArg === undefined
		    ? property(func)
		    : baseMatchesProperty(func, thisArg);
		}

		module.exports = baseCallback;


	/***/ },
	/* 118 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsMatch = __webpack_require__(119),
		    getMatchData = __webpack_require__(127),
		    toObject = __webpack_require__(95);

		/**
		 * The base implementation of `_.matches` which does not clone `source`.
		 *
		 * @private
		 * @param {Object} source The object of property values to match.
		 * @returns {Function} Returns the new function.
		 */
		function baseMatches(source) {
		  var matchData = getMatchData(source);
		  if (matchData.length == 1 && matchData[0][2]) {
		    var key = matchData[0][0],
		        value = matchData[0][1];

		    return function(object) {
		      if (object == null) {
		        return false;
		      }
		      object = toObject(object);
		      return object[key] === value && (value !== undefined || (key in object));
		    };
		  }
		  return function(object) {
		    return baseIsMatch(object, matchData);
		  };
		}

		module.exports = baseMatches;


	/***/ },
	/* 119 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsEqual = __webpack_require__(120),
		    toObject = __webpack_require__(95);

		/**
		 * The base implementation of `_.isMatch` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Array} matchData The propery names, values, and compare flags to match.
		 * @param {Function} [customizer] The function to customize comparing objects.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 */
		function baseIsMatch(object, matchData, customizer) {
		  var index = matchData.length,
		      length = index,
		      noCustomizer = !customizer;

		  if (object == null) {
		    return !length;
		  }
		  object = toObject(object);
		  while (index--) {
		    var data = matchData[index];
		    if ((noCustomizer && data[2])
		          ? data[1] !== object[data[0]]
		          : !(data[0] in object)
		        ) {
		      return false;
		    }
		  }
		  while (++index < length) {
		    data = matchData[index];
		    var key = data[0],
		        objValue = object[key],
		        srcValue = data[1];

		    if (noCustomizer && data[2]) {
		      if (objValue === undefined && !(key in object)) {
		        return false;
		      }
		    } else {
		      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
		      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
		        return false;
		      }
		    }
		  }
		  return true;
		}

		module.exports = baseIsMatch;


	/***/ },
	/* 120 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsEqualDeep = __webpack_require__(121),
		    isObject = __webpack_require__(96),
		    isObjectLike = __webpack_require__(98);

		/**
		 * The base implementation of `_.isEqual` without support for `this` binding
		 * `customizer` functions.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {Function} [customizer] The function to customize comparing values.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
		  if (value === other) {
		    return true;
		  }
		  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
		    return value !== value && other !== other;
		  }
		  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
		}

		module.exports = baseIsEqual;


	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {

		var equalArrays = __webpack_require__(122),
		    equalByTag = __webpack_require__(124),
		    equalObjects = __webpack_require__(125),
		    isArray = __webpack_require__(111),
		    isHostObject = __webpack_require__(104),
		    isTypedArray = __webpack_require__(126);

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    objectTag = '[object Object]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing objects.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
		 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var objIsArr = isArray(object),
		      othIsArr = isArray(other),
		      objTag = arrayTag,
		      othTag = arrayTag;

		  if (!objIsArr) {
		    objTag = objToString.call(object);
		    if (objTag == argsTag) {
		      objTag = objectTag;
		    } else if (objTag != objectTag) {
		      objIsArr = isTypedArray(object);
		    }
		  }
		  if (!othIsArr) {
		    othTag = objToString.call(other);
		    if (othTag == argsTag) {
		      othTag = objectTag;
		    } else if (othTag != objectTag) {
		      othIsArr = isTypedArray(other);
		    }
		  }
		  var objIsObj = objTag == objectTag && !isHostObject(object),
		      othIsObj = othTag == objectTag && !isHostObject(other),
		      isSameTag = objTag == othTag;

		  if (isSameTag && !(objIsArr || objIsObj)) {
		    return equalByTag(object, other, objTag);
		  }
		  if (!isLoose) {
		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		    if (objIsWrapped || othIsWrapped) {
		      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
		    }
		  }
		  if (!isSameTag) {
		    return false;
		  }
		  // Assume cyclic values are equal.
		  // For more information on detecting circular references see https://es5.github.io/#JO.
		  stackA || (stackA = []);
		  stackB || (stackB = []);

		  var length = stackA.length;
		  while (length--) {
		    if (stackA[length] == object) {
		      return stackB[length] == other;
		    }
		  }
		  // Add `object` and `other` to the stack of traversed objects.
		  stackA.push(object);
		  stackB.push(other);

		  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

		  stackA.pop();
		  stackB.pop();

		  return result;
		}

		module.exports = baseIsEqualDeep;


	/***/ },
	/* 122 */
	/***/ function(module, exports, __webpack_require__) {

		var arraySome = __webpack_require__(123);

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing arrays.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var index = -1,
		      arrLength = array.length,
		      othLength = other.length;

		  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
		    return false;
		  }
		  // Ignore non-index properties.
		  while (++index < arrLength) {
		    var arrValue = array[index],
		        othValue = other[index],
		        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

		    if (result !== undefined) {
		      if (result) {
		        continue;
		      }
		      return false;
		    }
		    // Recursively compare arrays (susceptible to call stack limits).
		    if (isLoose) {
		      if (!arraySome(other, function(othValue) {
		            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
		          })) {
		        return false;
		      }
		    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
		      return false;
		    }
		  }
		  return true;
		}

		module.exports = equalArrays;


	/***/ },
	/* 123 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.some` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function arraySome(array, predicate) {
		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    if (predicate(array[index], index, array)) {
		      return true;
		    }
		  }
		  return false;
		}

		module.exports = arraySome;


	/***/ },
	/* 124 */
	/***/ function(module, exports) {

		/** `Object#toString` result references. */
		var boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    numberTag = '[object Number]',
		    regexpTag = '[object RegExp]',
		    stringTag = '[object String]';

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag) {
		  switch (tag) {
		    case boolTag:
		    case dateTag:
		      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
		      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
		      return +object == +other;

		    case errorTag:
		      return object.name == other.name && object.message == other.message;

		    case numberTag:
		      // Treat `NaN` vs. `NaN` as equal.
		      return (object != +object)
		        ? other != +other
		        : object == +other;

		    case regexpTag:
		    case stringTag:
		      // Coerce regexes to strings and treat strings primitives and string
		      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
		      return object == (other + '');
		  }
		  return false;
		}

		module.exports = equalByTag;


	/***/ },
	/* 125 */
	/***/ function(module, exports, __webpack_require__) {

		var keys = __webpack_require__(100);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing values.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var objProps = keys(object),
		      objLength = objProps.length,
		      othProps = keys(other),
		      othLength = othProps.length;

		  if (objLength != othLength && !isLoose) {
		    return false;
		  }
		  var index = objLength;
		  while (index--) {
		    var key = objProps[index];
		    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
		      return false;
		    }
		  }
		  var skipCtor = isLoose;
		  while (++index < objLength) {
		    key = objProps[index];
		    var objValue = object[key],
		        othValue = other[key],
		        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

		    // Recursively compare objects (susceptible to call stack limits).
		    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
		      return false;
		    }
		    skipCtor || (skipCtor = key == 'constructor');
		  }
		  if (!skipCtor) {
		    var objCtor = object.constructor,
		        othCtor = other.constructor;

		    // Non `Object` object instances with different constructors are not equal.
		    if (objCtor != othCtor &&
		        ('constructor' in object && 'constructor' in other) &&
		        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		      return false;
		    }
		  }
		  return true;
		}

		module.exports = equalObjects;


	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {

		var isLength = __webpack_require__(108),
		    isObjectLike = __webpack_require__(98);

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dateTag] = typedArrayTags[errorTag] =
		typedArrayTags[funcTag] = typedArrayTags[mapTag] =
		typedArrayTags[numberTag] = typedArrayTags[objectTag] =
		typedArrayTags[regexpTag] = typedArrayTags[setTag] =
		typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		function isTypedArray(value) {
		  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
		}

		module.exports = isTypedArray;


	/***/ },
	/* 127 */
	/***/ function(module, exports, __webpack_require__) {

		var isStrictComparable = __webpack_require__(128),
		    pairs = __webpack_require__(129);

		/**
		 * Gets the propery names, values, and compare flags of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the match data of `object`.
		 */
		function getMatchData(object) {
		  var result = pairs(object),
		      length = result.length;

		  while (length--) {
		    result[length][2] = isStrictComparable(result[length][1]);
		  }
		  return result;
		}

		module.exports = getMatchData;


	/***/ },
	/* 128 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(96);

		/**
		 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` if suitable for strict
		 *  equality comparisons, else `false`.
		 */
		function isStrictComparable(value) {
		  return value === value && !isObject(value);
		}

		module.exports = isStrictComparable;


	/***/ },
	/* 129 */
	/***/ function(module, exports, __webpack_require__) {

		var keys = __webpack_require__(100),
		    toObject = __webpack_require__(95);

		/**
		 * Creates a two dimensional array of the key-value pairs for `object`,
		 * e.g. `[[key1, value1], [key2, value2]]`.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the new array of key-value pairs.
		 * @example
		 *
		 * _.pairs({ 'barney': 36, 'fred': 40 });
		 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
		 */
		function pairs(object) {
		  object = toObject(object);

		  var index = -1,
		      props = keys(object),
		      length = props.length,
		      result = Array(length);

		  while (++index < length) {
		    var key = props[index];
		    result[index] = [key, object[key]];
		  }
		  return result;
		}

		module.exports = pairs;


	/***/ },
	/* 130 */
	/***/ function(module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(131),
		    baseIsEqual = __webpack_require__(120),
		    baseSlice = __webpack_require__(132),
		    isArray = __webpack_require__(111),
		    isKey = __webpack_require__(133),
		    isStrictComparable = __webpack_require__(128),
		    last = __webpack_require__(134),
		    toObject = __webpack_require__(95),
		    toPath = __webpack_require__(135);

		/**
		 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
		 *
		 * @private
		 * @param {string} path The path of the property to get.
		 * @param {*} srcValue The value to compare.
		 * @returns {Function} Returns the new function.
		 */
		function baseMatchesProperty(path, srcValue) {
		  var isArr = isArray(path),
		      isCommon = isKey(path) && isStrictComparable(srcValue),
		      pathKey = (path + '');

		  path = toPath(path);
		  return function(object) {
		    if (object == null) {
		      return false;
		    }
		    var key = pathKey;
		    object = toObject(object);
		    if ((isArr || !isCommon) && !(key in object)) {
		      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
		      if (object == null) {
		        return false;
		      }
		      key = last(path);
		      object = toObject(object);
		    }
		    return object[key] === srcValue
		      ? (srcValue !== undefined || (key in object))
		      : baseIsEqual(srcValue, object[key], undefined, true);
		  };
		}

		module.exports = baseMatchesProperty;


	/***/ },
	/* 131 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(95);

		/**
		 * The base implementation of `get` without support for string paths
		 * and default values.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array} path The path of the property to get.
		 * @param {string} [pathKey] The key representation of path.
		 * @returns {*} Returns the resolved value.
		 */
		function baseGet(object, path, pathKey) {
		  if (object == null) {
		    return;
		  }
		  object = toObject(object);
		  if (pathKey !== undefined && pathKey in object) {
		    path = [pathKey];
		  }
		  var index = 0,
		      length = path.length;

		  while (object != null && index < length) {
		    object = toObject(object)[path[index++]];
		  }
		  return (index && index == length) ? object : undefined;
		}

		module.exports = baseGet;


	/***/ },
	/* 132 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.slice` without an iteratee call guard.
		 *
		 * @private
		 * @param {Array} array The array to slice.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns the slice of `array`.
		 */
		function baseSlice(array, start, end) {
		  var index = -1,
		      length = array.length;

		  start = start == null ? 0 : (+start || 0);
		  if (start < 0) {
		    start = -start > length ? 0 : (length + start);
		  }
		  end = (end === undefined || end > length) ? length : (+end || 0);
		  if (end < 0) {
		    end += length;
		  }
		  length = start > end ? 0 : ((end - start) >>> 0);
		  start >>>= 0;

		  var result = Array(length);
		  while (++index < length) {
		    result[index] = array[index + start];
		  }
		  return result;
		}

		module.exports = baseSlice;


	/***/ },
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {

		var isArray = __webpack_require__(111),
		    toObject = __webpack_require__(95);

		/** Used to match property names within property paths. */
		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
		    reIsPlainProp = /^\w*$/;

		/**
		 * Checks if `value` is a property name and not a property path.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		 */
		function isKey(value, object) {
		  var type = typeof value;
		  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
		    return true;
		  }
		  if (isArray(value)) {
		    return false;
		  }
		  var result = !reIsDeepProp.test(value);
		  return result || (object != null && value in toObject(object));
		}

		module.exports = isKey;


	/***/ },
	/* 134 */
	/***/ function(module, exports) {

		/**
		 * Gets the last element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {*} Returns the last element of `array`.
		 * @example
		 *
		 * _.last([1, 2, 3]);
		 * // => 3
		 */
		function last(array) {
		  var length = array ? array.length : 0;
		  return length ? array[length - 1] : undefined;
		}

		module.exports = last;


	/***/ },
	/* 135 */
	/***/ function(module, exports, __webpack_require__) {

		var baseToString = __webpack_require__(136),
		    isArray = __webpack_require__(111);

		/** Used to match property names within property paths. */
		var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

		/** Used to match backslashes in property paths. */
		var reEscapeChar = /\\(\\)?/g;

		/**
		 * Converts `value` to property path array if it's not one.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {Array} Returns the property path array.
		 */
		function toPath(value) {
		  if (isArray(value)) {
		    return value;
		  }
		  var result = [];
		  baseToString(value).replace(rePropName, function(match, number, quote, string) {
		    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
		  });
		  return result;
		}

		module.exports = toPath;


	/***/ },
	/* 136 */
	/***/ function(module, exports) {

		/**
		 * Converts `value` to a string if it's not one. An empty string is returned
		 * for `null` or `undefined` values.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {string} Returns the string.
		 */
		function baseToString(value) {
		  return value == null ? '' : (value + '');
		}

		module.exports = baseToString;


	/***/ },
	/* 137 */
	/***/ function(module, exports, __webpack_require__) {

		var identity = __webpack_require__(138);

		/**
		 * A specialized version of `baseCallback` which only supports `this` binding
		 * and specifying the number of arguments to provide to `func`.
		 *
		 * @private
		 * @param {Function} func The function to bind.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {number} [argCount] The number of arguments to provide to `func`.
		 * @returns {Function} Returns the callback.
		 */
		function bindCallback(func, thisArg, argCount) {
		  if (typeof func != 'function') {
		    return identity;
		  }
		  if (thisArg === undefined) {
		    return func;
		  }
		  switch (argCount) {
		    case 1: return function(value) {
		      return func.call(thisArg, value);
		    };
		    case 3: return function(value, index, collection) {
		      return func.call(thisArg, value, index, collection);
		    };
		    case 4: return function(accumulator, value, index, collection) {
		      return func.call(thisArg, accumulator, value, index, collection);
		    };
		    case 5: return function(value, other, key, object, source) {
		      return func.call(thisArg, value, other, key, object, source);
		    };
		  }
		  return function() {
		    return func.apply(thisArg, arguments);
		  };
		}

		module.exports = bindCallback;


	/***/ },
	/* 138 */
	/***/ function(module, exports) {

		/**
		 * This method returns the first argument provided to it.
		 *
		 * @static
		 * @memberOf _
		 * @category Utility
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'user': 'fred' };
		 *
		 * _.identity(object) === object;
		 * // => true
		 */
		function identity(value) {
		  return value;
		}

		module.exports = identity;


	/***/ },
	/* 139 */
	/***/ function(module, exports, __webpack_require__) {

		var baseProperty = __webpack_require__(107),
		    basePropertyDeep = __webpack_require__(140),
		    isKey = __webpack_require__(133);

		/**
		 * Creates a function that returns the property value at `path` on a
		 * given object.
		 *
		 * @static
		 * @memberOf _
		 * @category Utility
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': { 'b': { 'c': 2 } } },
		 *   { 'a': { 'b': { 'c': 1 } } }
		 * ];
		 *
		 * _.map(objects, _.property('a.b.c'));
		 * // => [2, 1]
		 *
		 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
		 * // => [1, 2]
		 */
		function property(path) {
		  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
		}

		module.exports = property;


	/***/ },
	/* 140 */
	/***/ function(module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(131),
		    toPath = __webpack_require__(135);

		/**
		 * A specialized version of `baseProperty` which supports deep paths.
		 *
		 * @private
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new function.
		 */
		function basePropertyDeep(path) {
		  var pathKey = (path + '');
		  path = toPath(path);
		  return function(object) {
		    return baseGet(object, path, pathKey);
		  };
		}

		module.exports = basePropertyDeep;


	/***/ },
	/* 141 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
		 * without support for callback shorthands and `this` binding, which iterates
		 * over `collection` using the provided `eachFunc`.
		 *
		 * @private
		 * @param {Array|Object|string} collection The collection to search.
		 * @param {Function} predicate The function invoked per iteration.
		 * @param {Function} eachFunc The function to iterate over `collection`.
		 * @param {boolean} [retKey] Specify returning the key of the found element
		 *  instead of the element itself.
		 * @returns {*} Returns the found element or its key, else `undefined`.
		 */
		function baseFind(collection, predicate, eachFunc, retKey) {
		  var result;
		  eachFunc(collection, function(value, key, collection) {
		    if (predicate(value, key, collection)) {
		      result = retKey ? key : value;
		      return false;
		    }
		  });
		  return result;
		}

		module.exports = baseFind;


	/***/ },
	/* 142 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.findIndex` and `_.findLastIndex` without
		 * support for callback shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {Function} predicate The function invoked per iteration.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function baseFindIndex(array, predicate, fromRight) {
		  var length = array.length,
		      index = fromRight ? length : -1;

		  while ((fromRight ? index-- : ++index < length)) {
		    if (predicate(array[index], index, array)) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = baseFindIndex;


	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(144),
		    baseDifference = __webpack_require__(145),
		    baseFlatten = __webpack_require__(152),
		    bindCallback = __webpack_require__(137),
		    keysIn = __webpack_require__(113),
		    pickByArray = __webpack_require__(154),
		    pickByCallback = __webpack_require__(155),
		    restParam = __webpack_require__(157);

		/**
		 * The opposite of `_.pick`; this method creates an object composed of the
		 * own and inherited enumerable properties of `object` that are not omitted.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function|...(string|string[])} [predicate] The function invoked per
		 *  iteration or property names to omit, specified as individual property
		 *  names or arrays of property names.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'user': 'fred', 'age': 40 };
		 *
		 * _.omit(object, 'age');
		 * // => { 'user': 'fred' }
		 *
		 * _.omit(object, _.isNumber);
		 * // => { 'user': 'fred' }
		 */
		var omit = restParam(function(object, props) {
		  if (object == null) {
		    return {};
		  }
		  if (typeof props[0] != 'function') {
		    var props = arrayMap(baseFlatten(props), String);
		    return pickByArray(object, baseDifference(keysIn(object), props));
		  }
		  var predicate = bindCallback(props[0], props[1], 3);
		  return pickByCallback(object, function(value, key, object) {
		    return !predicate(value, key, object);
		  });
		});

		module.exports = omit;


	/***/ },
	/* 144 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.map` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the new mapped array.
		 */
		function arrayMap(array, iteratee) {
		  var index = -1,
		      length = array.length,
		      result = Array(length);

		  while (++index < length) {
		    result[index] = iteratee(array[index], index, array);
		  }
		  return result;
		}

		module.exports = arrayMap;


	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIndexOf = __webpack_require__(146),
		    cacheIndexOf = __webpack_require__(148),
		    createCache = __webpack_require__(149);

		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/**
		 * The base implementation of `_.difference` which accepts a single array
		 * of values to exclude.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {Array} values The values to exclude.
		 * @returns {Array} Returns the new array of filtered values.
		 */
		function baseDifference(array, values) {
		  var length = array ? array.length : 0,
		      result = [];

		  if (!length) {
		    return result;
		  }
		  var index = -1,
		      indexOf = baseIndexOf,
		      isCommon = true,
		      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
		      valuesLength = values.length;

		  if (cache) {
		    indexOf = cacheIndexOf;
		    isCommon = false;
		    values = cache;
		  }
		  outer:
		  while (++index < length) {
		    var value = array[index];

		    if (isCommon && value === value) {
		      var valuesIndex = valuesLength;
		      while (valuesIndex--) {
		        if (values[valuesIndex] === value) {
		          continue outer;
		        }
		      }
		      result.push(value);
		    }
		    else if (indexOf(values, value, 0) < 0) {
		      result.push(value);
		    }
		  }
		  return result;
		}

		module.exports = baseDifference;


	/***/ },
	/* 146 */
	/***/ function(module, exports, __webpack_require__) {

		var indexOfNaN = __webpack_require__(147);

		/**
		 * The base implementation of `_.indexOf` without support for binary searches.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {*} value The value to search for.
		 * @param {number} fromIndex The index to search from.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function baseIndexOf(array, value, fromIndex) {
		  if (value !== value) {
		    return indexOfNaN(array, fromIndex);
		  }
		  var index = fromIndex - 1,
		      length = array.length;

		  while (++index < length) {
		    if (array[index] === value) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = baseIndexOf;


	/***/ },
	/* 147 */
	/***/ function(module, exports) {

		/**
		 * Gets the index at which the first occurrence of `NaN` is found in `array`.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {number} fromIndex The index to search from.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
		 */
		function indexOfNaN(array, fromIndex, fromRight) {
		  var length = array.length,
		      index = fromIndex + (fromRight ? 0 : -1);

		  while ((fromRight ? index-- : ++index < length)) {
		    var other = array[index];
		    if (other !== other) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = indexOfNaN;


	/***/ },
	/* 148 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(96);

		/**
		 * Checks if `value` is in `cache` mimicking the return signature of
		 * `_.indexOf` by returning `0` if the value is found, else `-1`.
		 *
		 * @private
		 * @param {Object} cache The cache to search.
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `0` if `value` is found, else `-1`.
		 */
		function cacheIndexOf(cache, value) {
		  var data = cache.data,
		      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

		  return result ? 0 : -1;
		}

		module.exports = cacheIndexOf;


	/***/ },
	/* 149 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(150),
		    getNative = __webpack_require__(101);

		/** Native method references. */
		var Set = getNative(global, 'Set');

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeCreate = getNative(Object, 'create');

		/**
		 * Creates a `Set` cache object to optimize linear searches of large arrays.
		 *
		 * @private
		 * @param {Array} [values] The values to cache.
		 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
		 */
		function createCache(values) {
		  return (nativeCreate && Set) ? new SetCache(values) : null;
		}

		module.exports = createCache;

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 150 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(151),
		    getNative = __webpack_require__(101);

		/** Native method references. */
		var Set = getNative(global, 'Set');

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeCreate = getNative(Object, 'create');

		/**
		 *
		 * Creates a cache object to store unique values.
		 *
		 * @private
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
		  var length = values ? values.length : 0;

		  this.data = { 'hash': nativeCreate(null), 'set': new Set };
		  while (length--) {
		    this.push(values[length]);
		  }
		}

		// Add functions to the `Set` cache.
		SetCache.prototype.push = cachePush;

		module.exports = SetCache;

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 151 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(96);

		/**
		 * Adds `value` to the cache.
		 *
		 * @private
		 * @name push
		 * @memberOf SetCache
		 * @param {*} value The value to cache.
		 */
		function cachePush(value) {
		  var data = this.data;
		  if (typeof value == 'string' || isObject(value)) {
		    data.set.add(value);
		  } else {
		    data.hash[value] = true;
		  }
		}

		module.exports = cachePush;


	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayPush = __webpack_require__(153),
		    isArguments = __webpack_require__(110),
		    isArray = __webpack_require__(111),
		    isArrayLike = __webpack_require__(105),
		    isObjectLike = __webpack_require__(98);

		/**
		 * The base implementation of `_.flatten` with added support for restricting
		 * flattening and specifying the start index.
		 *
		 * @private
		 * @param {Array} array The array to flatten.
		 * @param {boolean} [isDeep] Specify a deep flatten.
		 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
		 * @param {Array} [result=[]] The initial result value.
		 * @returns {Array} Returns the new flattened array.
		 */
		function baseFlatten(array, isDeep, isStrict, result) {
		  result || (result = []);

		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    var value = array[index];
		    if (isObjectLike(value) && isArrayLike(value) &&
		        (isStrict || isArray(value) || isArguments(value))) {
		      if (isDeep) {
		        // Recursively flatten arrays (susceptible to call stack limits).
		        baseFlatten(value, isDeep, isStrict, result);
		      } else {
		        arrayPush(result, value);
		      }
		    } else if (!isStrict) {
		      result[result.length] = value;
		    }
		  }
		  return result;
		}

		module.exports = baseFlatten;


	/***/ },
	/* 153 */
	/***/ function(module, exports) {

		/**
		 * Appends the elements of `values` to `array`.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to append.
		 * @returns {Array} Returns `array`.
		 */
		function arrayPush(array, values) {
		  var index = -1,
		      length = values.length,
		      offset = array.length;

		  while (++index < length) {
		    array[offset + index] = values[index];
		  }
		  return array;
		}

		module.exports = arrayPush;


	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(95);

		/**
		 * A specialized version of `_.pick` which picks `object` properties specified
		 * by `props`.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {string[]} props The property names to pick.
		 * @returns {Object} Returns the new object.
		 */
		function pickByArray(object, props) {
		  object = toObject(object);

		  var index = -1,
		      length = props.length,
		      result = {};

		  while (++index < length) {
		    var key = props[index];
		    if (key in object) {
		      result[key] = object[key];
		    }
		  }
		  return result;
		}

		module.exports = pickByArray;


	/***/ },
	/* 155 */
	/***/ function(module, exports, __webpack_require__) {

		var baseForIn = __webpack_require__(156);

		/**
		 * A specialized version of `_.pick` which picks `object` properties `predicate`
		 * returns truthy for.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {Object} Returns the new object.
		 */
		function pickByCallback(object, predicate) {
		  var result = {};
		  baseForIn(object, function(value, key, object) {
		    if (predicate(value, key, object)) {
		      result[key] = value;
		    }
		  });
		  return result;
		}

		module.exports = pickByCallback;


	/***/ },
	/* 156 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFor = __webpack_require__(93),
		    keysIn = __webpack_require__(113);

		/**
		 * The base implementation of `_.forIn` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForIn(object, iteratee) {
		  return baseFor(object, iteratee, keysIn);
		}

		module.exports = baseForIn;


	/***/ },
	/* 157 */
	/***/ function(module, exports) {

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeMax = Math.max;

		/**
		 * Creates a function that invokes `func` with the `this` binding of the
		 * created function and arguments from `start` and beyond provided as an array.
		 *
		 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
		 *
		 * @static
		 * @memberOf _
		 * @category Function
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var say = _.restParam(function(what, names) {
		 *   return what + ' ' + _.initial(names).join(', ') +
		 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		 * });
		 *
		 * say('hello', 'fred', 'barney', 'pebbles');
		 * // => 'hello fred, barney, & pebbles'
		 */
		function restParam(func, start) {
		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }
		  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
		  return function() {
		    var args = arguments,
		        index = -1,
		        length = nativeMax(args.length - start, 0),
		        rest = Array(length);

		    while (++index < length) {
		      rest[index] = args[start + index];
		    }
		    switch (start) {
		      case 0: return func.call(this, rest);
		      case 1: return func.call(this, args[0], rest);
		      case 2: return func.call(this, args[0], args[1], rest);
		    }
		    var otherArgs = Array(start + 1);
		    index = -1;
		    while (++index < start) {
		      otherArgs[index] = args[index];
		    }
		    otherArgs[start] = rest;
		    return func.apply(this, otherArgs);
		  };
		}

		module.exports = restParam;


	/***/ },
	/* 158 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports["default"] = isRequiredForA11y;

		function isRequiredForA11y(propType) {
		  return function validate(props, propName, componentName) {
		    if (props[propName] == null) {
		      return new Error("The prop '" + propName + "' is required to make '" + componentName + "' accessible" + " for users using assistive technologies such as screen readers");
		    }

		    return propType(props, propName, componentName);
		  };
		}

		module.exports = exports["default"];

	/***/ },
	/* 159 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _createUncontrollable = __webpack_require__(160);

		var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

		var mixin = {
		  shouldComponentUpdate: function shouldComponentUpdate() {
		    //let the forceUpdate trigger the update
		    return !this._notifying;
		  }
		};

		function set(component, propName, handler, value, args) {
		  if (handler) {
		    component._notifying = true;
		    handler.call.apply(handler, [component, value].concat(args));
		    component._notifying = false;
		  }

		  component._values[propName] = value;

		  if (component.isMounted()) component.forceUpdate();
		}

		exports['default'] = _createUncontrollable2['default']([mixin], set);
		module.exports = exports['default'];

	/***/ },
	/* 160 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports['default'] = createUncontrollable;

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(161);

		var utils = _interopRequireWildcard(_utils);

		function createUncontrollable(mixins, set) {

		  return uncontrollable;

		  function uncontrollable(Component, controlledValues) {
		    var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

		    var displayName = Component.displayName || Component.name || 'Component',
		        basePropTypes = utils.getType(Component).propTypes,
		        propTypes;

		    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

		    methods = utils.transform(methods, function (obj, method) {
		      obj[method] = function () {
		        var _refs$inner;

		        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
		      };
		    }, {});

		    var component = _react2['default'].createClass(_extends({

		      displayName: 'Uncontrolled(' + displayName + ')',

		      mixins: mixins,

		      propTypes: propTypes

		    }, methods, {

		      componentWillMount: function componentWillMount() {
		        var props = this.props,
		            keys = Object.keys(controlledValues);

		        this._values = utils.transform(keys, function (values, key) {
		          values[key] = props[utils.defaultKey(key)];
		        }, {});
		      },

		      /**
		       * If a prop switches from controlled to Uncontrolled
		       * reset its value to the defaultValue
		       */
		      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		        var _this = this;

		        var props = this.props,
		            keys = Object.keys(controlledValues);

		        keys.forEach(function (key) {
		          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
		            _this._values[key] = nextProps[utils.defaultKey(key)];
		          }
		        });
		      },

		      render: function render() {
		        var _this2 = this;

		        var newProps = {};
		        var _props = this.props;
		        var valueLink = _props.valueLink;
		        var checkedLink = _props.checkedLink;

		        var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

		        utils.each(controlledValues, function (handle, propName) {
		          var linkPropName = utils.getLinkName(propName),
		              prop = _this2.props[propName];

		          if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
		            prop = _this2.props[linkPropName].value;
		          }

		          newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

		          newProps[handle] = setAndNotify.bind(_this2, propName);
		        });

		        newProps = _extends({}, props, newProps, { ref: 'inner' });

		        return _react2['default'].createElement(Component, newProps);
		      }

		    }));

		    component.ControlledComponent = Component;

		    /**
		     * useful when wrapping a Component and you want to control
		     * everything
		     */
		    component.deferControlTo = function (newComponent, additions, nextMethods) {
		      if (additions === undefined) additions = {};

		      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
		    };

		    return component;

		    function setAndNotify(propName, value) {
		      var linkName = utils.getLinkName(propName),
		          handler = this.props[controlledValues[propName]];

		      if (linkName && isProp(this.props, linkName) && !handler) {
		        handler = this.props[linkName].requestChange;
		      }

		      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		        args[_key - 2] = arguments[_key];
		      }

		      set(this, propName, handler, value, args);
		    }

		    function isProp(props, prop) {
		      return props[prop] !== undefined;
		    }
		  }
		}

		module.exports = exports['default'];

	/***/ },
	/* 161 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.customPropType = customPropType;
		exports.uncontrolledPropTypes = uncontrolledPropTypes;
		exports.getType = getType;
		exports.getValue = getValue;
		exports.getLinkName = getLinkName;
		exports.defaultKey = defaultKey;
		exports.chain = chain;
		exports.transform = transform;
		exports.each = each;
		exports.has = has;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _invariant = __webpack_require__(32);

		var _invariant2 = _interopRequireDefault(_invariant);

		function customPropType(handler, propType, name) {

		  return function (props, propName) {

		    if (props[propName] !== undefined) {
		      if (!props[handler]) {
		        return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
		      }

		      return propType && propType(props, propName, name);
		    }
		  };
		}

		function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
		  var propTypes = {};

		  if (("development") !== 'production' && basePropTypes) {
		    transform(controlledValues, function (obj, handler, prop) {
		      var type = basePropTypes[prop];

		      _invariant2['default'](typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

		      obj[prop] = customPropType(handler, type, displayName);

		      if (type !== undefined) obj[defaultKey(prop)] = type;
		    }, propTypes);
		  }

		  return propTypes;
		}

		var version = _react2['default'].version.split('.').map(parseFloat);

		exports.version = version;

		function getType(component) {
		  if (version[0] >= 15 || version[0] === 0 && version[1] >= 13) return component;

		  return component.type;
		}

		function getValue(props, name) {
		  var linkPropName = getLinkName(name);

		  if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

		  return props[name];
		}

		function isProp(props, prop) {
		  return props[prop] !== undefined;
		}

		function getLinkName(name) {
		  return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
		}

		function defaultKey(key) {
		  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
		}

		function chain(thisArg, a, b) {
		  return function chainedFunction() {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    a && a.call.apply(a, [thisArg].concat(args));
		    b && b.call.apply(b, [thisArg].concat(args));
		  };
		}

		function transform(obj, cb, seed) {
		  each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
		  return seed;
		}

		function each(obj, cb, thisArg) {
		  if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

		  for (var key in obj) if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
		}

		function has(o, k) {
		  return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
		}

	/***/ },
	/* 162 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _reactPropTypesLibCommon = __webpack_require__(50);

		var _childrenToArray = __webpack_require__(163);

		var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

		exports['default'] = {

		  requiredRoles: function requiredRoles() {
		    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
		      roles[_key] = arguments[_key];
		    }

		    return _reactPropTypesLibCommon.createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
		      var missing = undefined;
		      var children = _childrenToArray2['default'](props.children);

		      var inRole = function inRole(role, child) {
		        return role === child.props.bsRole;
		      };

		      roles.every(function (role) {
		        if (!children.some(function (child) {
		          return inRole(role, child);
		        })) {
		          missing = role;
		          return false;
		        }
		        return true;
		      });

		      if (missing) {
		        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
		      }
		    });
		  },

		  exclusiveRoles: function exclusiveRoles() {
		    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      roles[_key2] = arguments[_key2];
		    }

		    return _reactPropTypesLibCommon.createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
		      var children = _childrenToArray2['default'](props.children);
		      var duplicate = undefined;

		      roles.every(function (role) {
		        var childrenWithRole = children.filter(function (child) {
		          return child.props.bsRole === role;
		        });

		        if (childrenWithRole.length > 1) {
		          duplicate = role;
		          return false;
		        }
		        return true;
		      });

		      if (duplicate) {
		        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
		      }
		    });
		  }
		};
		module.exports = exports['default'];

	/***/ },
	/* 163 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports['default'] = childrenAsArray;

		var _ValidComponentChildren = __webpack_require__(33);

		var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

		function childrenAsArray(children) {
		  var result = [];

		  if (children === undefined) {
		    return result;
		  }

		  _ValidComponentChildren2['default'].forEach(children, function (child) {
		    result.push(child);
		  });

		  return result;
		}

		module.exports = exports['default'];

	/***/ },
	/* 164 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _keycode = __webpack_require__(89);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _reactOverlaysLibRootCloseWrapper = __webpack_require__(165);

		var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

		var DropdownMenu = (function (_React$Component) {
		  _inherits(DropdownMenu, _React$Component);

		  function DropdownMenu(props) {
		    _classCallCheck(this, DropdownMenu);

		    _React$Component.call(this, props);

		    this.focusNext = this.focusNext.bind(this);
		    this.focusPrevious = this.focusPrevious.bind(this);
		    this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
		    this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

		    this.handleKeyDown = this.handleKeyDown.bind(this);
		  }

		  DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {
		    switch (event.keyCode) {
		      case _keycode2['default'].codes.down:
		        this.focusNext();
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.up:
		        this.focusPrevious();
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.esc:
		      case _keycode2['default'].codes.tab:
		        this.props.onClose(event);
		        break;
		      default:
		    }
		  };

		  DropdownMenu.prototype.focusNext = function focusNext() {
		    var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

		    var items = _getItemsAndActiveIndex.items;
		    var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

		    if (items.length === 0) {
		      return;
		    }

		    if (activeItemIndex === items.length - 1) {
		      items[0].focus();
		      return;
		    }

		    items[activeItemIndex + 1].focus();
		  };

		  DropdownMenu.prototype.focusPrevious = function focusPrevious() {
		    var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

		    var items = _getItemsAndActiveIndex2.items;
		    var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

		    if (activeItemIndex === 0) {
		      items[items.length - 1].focus();
		      return;
		    }

		    items[activeItemIndex - 1].focus();
		  };

		  DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
		    var items = this.getFocusableMenuItems();
		    var activeElement = document.activeElement;
		    var activeItemIndex = items.indexOf(activeElement);

		    return { items: items, activeItemIndex: activeItemIndex };
		  };

		  DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
		    var menuNode = _reactDom2['default'].findDOMNode(this);

		    if (menuNode === undefined) {
		      return [];
		    }

		    return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
		  };

		  DropdownMenu.prototype.render = function render() {
		    var _classes,
		        _this = this;

		    var _props = this.props;
		    var children = _props.children;
		    var onSelect = _props.onSelect;
		    var pullRight = _props.pullRight;
		    var className = _props.className;
		    var labelledBy = _props.labelledBy;
		    var open = _props.open;
		    var onClose = _props.onClose;

		    var props = _objectWithoutProperties(_props, ['children', 'onSelect', 'pullRight', 'className', 'labelledBy', 'open', 'onClose']);

		    var items = _utilsValidComponentChildren2['default'].map(children, function (child) {
		      var childProps = child.props || {};

		      return _react2['default'].cloneElement(child, {
		        onKeyDown: _utilsCreateChainedFunction2['default'](childProps.onKeyDown, _this.handleKeyDown),
		        onSelect: _utilsCreateChainedFunction2['default'](childProps.onSelect, onSelect)
		      }, childProps.children);
		    });

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props, 'menu')] = true, _classes[_utilsBootstrapUtils.prefix(this.props, 'menu-right')] = pullRight, _classes);

		    var list = _react2['default'].createElement(
		      'ul',
		      _extends({
		        className: _classnames2['default'](className, classes),
		        role: 'menu',
		        'aria-labelledby': labelledBy
		      }, props),
		      items
		    );

		    if (open) {
		      list = _react2['default'].createElement(
		        _reactOverlaysLibRootCloseWrapper2['default'],
		        { noWrap: true, onRootClose: onClose },
		        list
		      );
		    }

		    return list;
		  };

		  return DropdownMenu;
		})(_react2['default'].Component);

		DropdownMenu.defaultProps = {
		  bsRole: 'menu',
		  bsClass: 'dropdown',
		  pullRight: false
		};

		DropdownMenu.propTypes = {
		  open: _react2['default'].PropTypes.bool,
		  pullRight: _react2['default'].PropTypes.bool,
		  onClose: _react2['default'].PropTypes.func,
		  labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		  onSelect: _react2['default'].PropTypes.func
		};

		exports['default'] = DropdownMenu;
		module.exports = exports['default'];

	/***/ },
	/* 165 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsAddEventListener = __webpack_require__(166);

		var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

		var _utilsCreateChainedFunction = __webpack_require__(168);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsOwnerDocument = __webpack_require__(169);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		// TODO: Consider using an ES6 symbol here, once we use babel-runtime.
		var CLICK_WAS_INSIDE = '__click_was_inside';

		var counter = 0;

		function isLeftClickEvent(event) {
		  return event.button === 0;
		}

		function isModifiedEvent(event) {
		  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
		}

		function getSuppressRootClose() {
		  var id = CLICK_WAS_INSIDE + '_' + counter++;
		  return {
		    id: id,
		    suppressRootClose: function suppressRootClose(event) {
		      // Tag the native event to prevent the root close logic on document click.
		      // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
		      // which is only supported in IE >= 9.
		      event.nativeEvent[id] = true;
		    }
		  };
		}

		var RootCloseWrapper = (function (_React$Component) {
		  _inherits(RootCloseWrapper, _React$Component);

		  function RootCloseWrapper(props) {
		    _classCallCheck(this, RootCloseWrapper);

		    _React$Component.call(this, props);

		    this.handleDocumentClick = this.handleDocumentClick.bind(this);
		    this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);

		    var _getSuppressRootClose = getSuppressRootClose();

		    var id = _getSuppressRootClose.id;
		    var suppressRootClose = _getSuppressRootClose.suppressRootClose;

		    this._suppressRootId = id;

		    this._suppressRootCloseHandler = suppressRootClose;
		  }

		  RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
		    var doc = _utilsOwnerDocument2['default'](this);

		    this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

		    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
		  };

		  RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
		    // This is now the native event.
		    if (e[this._suppressRootId]) {
		      return;
		    }

		    if (isModifiedEvent(e) || !isLeftClickEvent(e)) {
		      return;
		    }

		    this.props.onRootClose();
		  };

		  RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
		    if (e.keyCode === 27) {
		      this.props.onRootClose();
		    }
		  };

		  RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
		    if (this._onDocumentClickListener) {
		      this._onDocumentClickListener.remove();
		    }

		    if (this._onDocumentKeyupListener) {
		      this._onDocumentKeyupListener.remove();
		    }
		  };

		  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
		    this.bindRootCloseHandlers();
		  };

		  RootCloseWrapper.prototype.render = function render() {
		    var _props = this.props;
		    var noWrap = _props.noWrap;
		    var children = _props.children;

		    var child = _react2['default'].Children.only(children);

		    if (noWrap) {
		      return _react2['default'].cloneElement(child, {
		        onClick: _utilsCreateChainedFunction2['default'](this._suppressRootCloseHandler, child.props.onClick)
		      });
		    }

		    // Wrap the child in a new element, so the child won't have to handle
		    // potentially combining multiple onClick listeners.
		    return _react2['default'].createElement(
		      'div',
		      { onClick: this._suppressRootCloseHandler },
		      child
		    );
		  };

		  RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
		    // We can't use a ref to identify the wrapped child, since we might be
		    // stealing the ref from the owner, but we know exactly the DOM structure
		    // that will be rendered, so we can just do this to get the child's DOM
		    // node for doing size calculations in OverlayMixin.
		    var node = _reactDom2['default'].findDOMNode(this);
		    return this.props.noWrap ? node : node.firstChild;
		  };

		  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
		    this.unbindRootCloseHandlers();
		  };

		  return RootCloseWrapper;
		})(_react2['default'].Component);

		exports['default'] = RootCloseWrapper;

		RootCloseWrapper.displayName = 'RootCloseWrapper';

		RootCloseWrapper.propTypes = {
		  onRootClose: _react2['default'].PropTypes.func.isRequired,

		  /**
		   * Passes the suppress click handler directly to the child component instead
		   * of placing it on a wrapping div. Only use when you can be sure the child
		   * properly handle the click event.
		   */
		  noWrap: _react2['default'].PropTypes.bool
		};
		module.exports = exports['default'];

	/***/ },
	/* 166 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _domHelpersEventsOn = __webpack_require__(83);

		var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

		var _domHelpersEventsOff = __webpack_require__(167);

		var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

		exports['default'] = function (node, event, handler) {
		  _domHelpersEventsOn2['default'](node, event, handler);
		  return {
		    remove: function remove() {
		      _domHelpersEventsOff2['default'](node, event, handler);
		    }
		  };
		};

		module.exports = exports['default'];

	/***/ },
	/* 167 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(82);
		var off = function off() {};

		if (canUseDOM) {

		  off = (function () {

		    if (document.addEventListener) return function (node, eventName, handler, capture) {
		      return node.removeEventListener(eventName, handler, capture || false);
		    };else if (document.attachEvent) return function (node, eventName, handler) {
		      return node.detachEvent('on' + eventName, handler);
		    };
		  })();
		}

		module.exports = off;

	/***/ },
	/* 168 */
	/***/ function(module, exports) {

		/**
		 * Safe chained function
		 *
		 * Will only create a new function if needed,
		 * otherwise will pass back existing functions or null.
		 *
		 * @param {function} functions to chain
		 * @returns {function|null}
		 */
		'use strict';

		exports.__esModule = true;
		function createChainedFunction() {
		  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
		    funcs[_key] = arguments[_key];
		  }

		  return funcs.filter(function (f) {
		    return f != null;
		  }).reduce(function (acc, f) {
		    if (typeof f !== 'function') {
		      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
		    }

		    if (acc === null) {
		      return f;
		    }

		    return function chainedFunction() {
		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      acc.apply(this, args);
		      f.apply(this, args);
		    };
		  }, null);
		}

		exports['default'] = createChainedFunction;
		module.exports = exports['default'];

	/***/ },
	/* 169 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _domHelpersOwnerDocument = __webpack_require__(87);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		exports['default'] = function (componentOrElement) {
		  return _domHelpersOwnerDocument2['default'](_reactDom2['default'].findDOMNode(componentOrElement));
		};

		module.exports = exports['default'];

	/***/ },
	/* 170 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var CARET = _react2['default'].createElement(
		  'span',
		  null,
		  ' ',
		  _react2['default'].createElement('span', { className: 'caret' })
		);

		var DropdownToggle = (function (_React$Component) {
		  _inherits(DropdownToggle, _React$Component);

		  function DropdownToggle() {
		    _classCallCheck(this, DropdownToggle);

		    _React$Component.apply(this, arguments);
		  }

		  DropdownToggle.prototype.render = function render() {
		    var caret = this.props.noCaret ? null : CARET;

		    var classes = {
		      'dropdown-toggle': true
		    };

		    var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, this.props, {
		        className: _classnames2['default'](classes, this.props.className),
		        type: 'button',
		        'aria-haspopup': true,
		        'aria-expanded': this.props.open }),
		      this.props.children || this.props.title,
		      caret
		    );
		  };

		  return DropdownToggle;
		})(_react2['default'].Component);

		exports['default'] = DropdownToggle;

		DropdownToggle.defaultProps = {
		  open: false,
		  useAnchor: false,
		  bsRole: 'toggle'
		};

		DropdownToggle.propTypes = {
		  bsRole: _react2['default'].PropTypes.string,
		  noCaret: _react2['default'].PropTypes.bool,
		  open: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.string,
		  useAnchor: _react2['default'].PropTypes.bool
		};

		DropdownToggle.isToggle = true;
		DropdownToggle.titleProp = 'title';
		DropdownToggle.onClickProp = 'onClick';
		module.exports = exports['default'];

	/***/ },
	/* 171 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Dropdown = __webpack_require__(85);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var _lodashCompatObjectOmit = __webpack_require__(143);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _lodashCompatObjectPick = __webpack_require__(172);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var DropdownButton = (function (_React$Component) {
		  _inherits(DropdownButton, _React$Component);

		  function DropdownButton() {
		    _classCallCheck(this, DropdownButton);

		    _React$Component.apply(this, arguments);
		  }

		  DropdownButton.prototype.render = function render() {
		    var _props = this.props;
		    var bsStyle = _props.bsStyle;
		    var bsSize = _props.bsSize;
		    var disabled = _props.disabled;
		    var _props2 = this.props;
		    var title = _props2.title;
		    var children = _props2.children;

		    var props = _objectWithoutProperties(_props2, ['title', 'children']);

		    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
		    var toggleProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      _extends({}, dropdownProps, {
		        bsSize: bsSize,
		        bsStyle: bsStyle
		      }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Toggle,
		        _extends({}, toggleProps, {
		          disabled: disabled
		        }),
		        title
		      ),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return DropdownButton;
		})(_react2['default'].Component);

		DropdownButton.propTypes = _extends({
		  disabled: _react2['default'].PropTypes.bool,
		  bsStyle: _Button2['default'].propTypes.bsStyle,
		  bsSize: _Button2['default'].propTypes.bsSize,

		  /**
		   * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
		   */
		  noCaret: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.node.isRequired

		}, _Dropdown2['default'].propTypes);

		DropdownButton.defaultProps = {
		  disabled: false,
		  pullRight: false,
		  dropup: false,
		  navItem: false,
		  noCaret: false
		};

		exports['default'] = DropdownButton;
		module.exports = exports['default'];

	/***/ },
	/* 172 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFlatten = __webpack_require__(152),
		    bindCallback = __webpack_require__(137),
		    pickByArray = __webpack_require__(154),
		    pickByCallback = __webpack_require__(155),
		    restParam = __webpack_require__(157);

		/**
		 * Creates an object composed of the picked `object` properties. Property
		 * names may be specified as individual arguments or as arrays of property
		 * names. If `predicate` is provided it's invoked for each property of `object`
		 * picking the properties `predicate` returns truthy for. The predicate is
		 * bound to `thisArg` and invoked with three arguments: (value, key, object).
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function|...(string|string[])} [predicate] The function invoked per
		 *  iteration or property names to pick, specified as individual property
		 *  names or arrays of property names.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'user': 'fred', 'age': 40 };
		 *
		 * _.pick(object, 'user');
		 * // => { 'user': 'fred' }
		 *
		 * _.pick(object, _.isString);
		 * // => { 'user': 'fred' }
		 */
		var pick = restParam(function(object, props) {
		  if (object == null) {
		    return {};
		  }
		  return typeof props[0] == 'function'
		    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
		    : pickByArray(object, baseFlatten(props));
		});

		module.exports = pick;


	/***/ },
	/* 173 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactOverlaysLibTransition = __webpack_require__(80);

		var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

		var Fade = (function (_React$Component) {
		  _inherits(Fade, _React$Component);

		  function Fade() {
		    _classCallCheck(this, Fade);

		    _React$Component.apply(this, arguments);
		  }

		  // Explicitly copied from Transition for doc generation.
		  // TODO: Remove duplication once #977 is resolved.

		  Fade.prototype.render = function render() {
		    var timeout = this.props.timeout;

		    return _react2['default'].createElement(
		      _reactOverlaysLibTransition2['default'],
		      _extends({}, this.props, {
		        timeout: timeout,
		        className: _classnames2['default'](this.props.className, 'fade'),
		        enteredClassName: 'in',
		        enteringClassName: 'in'
		      }),
		      this.props.children
		    );
		  };

		  return Fade;
		})(_react2['default'].Component);

		Fade.propTypes = {
		  /**
		   * Show the component; triggers the fade in or fade out animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is faded out
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the fade in animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * Duration of the fade animation in milliseconds, to ensure that finishing
		   * callbacks are fired even if the original browser transition end events are
		   * canceled
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * Callback fired before the component fades in
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to fade in
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the has component faded in
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the component fades out
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to fade out
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has faded out
		   */
		  onExited: _react2['default'].PropTypes.func
		};

		Fade.defaultProps = {
		  'in': false,
		  timeout: 300,
		  unmountOnExit: false,
		  transitionAppear: false
		};

		exports['default'] = Fade;
		module.exports = exports['default'];

	/***/ },
	/* 174 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var propTypes = {
		  horizontal: _react2['default'].PropTypes.bool,
		  inline: _react2['default'].PropTypes.bool,
		  componentClass: _reactPropTypesLibElementType2['default']
		};

		var defaultProps = {
		  horizontal: false,
		  inline: false,
		  componentClass: 'form'
		};

		var Form = (function (_React$Component) {
		  _inherits(Form, _React$Component);

		  function Form() {
		    _classCallCheck(this, Form);

		    _React$Component.apply(this, arguments);
		  }

		  Form.prototype.render = function render() {
		    var _props = this.props;
		    var horizontal = _props.horizontal;
		    var inline = _props.inline;
		    var Component = _props.componentClass;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['horizontal', 'inline', 'componentClass', 'className']);

		    delete props.bsClass;

		    var classes = [];
		    if (horizontal) {
		      classes.push(_utilsBootstrapUtils.prefix(this.props, 'horizontal'));
		    }
		    if (inline) {
		      classes.push(_utilsBootstrapUtils.prefix(this.props, 'inline'));
		    }

		    return _react2['default'].createElement(Component, _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return Form;
		})(_react2['default'].Component);

		Form.propTypes = propTypes;
		Form.defaultProps = defaultProps;

		exports['default'] = _utilsBootstrapUtils.bsClass('form', Form);
		module.exports = exports['default'];

	/***/ },
	/* 175 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _FormControlFeedback = __webpack_require__(176);

		var _FormControlFeedback2 = _interopRequireDefault(_FormControlFeedback);

		var _FormControlStatic = __webpack_require__(177);

		var _FormControlStatic2 = _interopRequireDefault(_FormControlStatic);

		var propTypes = {
		  componentClass: _reactPropTypesLibElementType2['default'],
		  /**
		   * Only relevant if `componentClass` is `'input'`.
		   */
		  type: _react2['default'].PropTypes.string,
		  /**
		   * Uses `controlId` from `<FormGroup>` if not explicitly specified.
		   */
		  id: _react2['default'].PropTypes.string
		};

		var defaultProps = {
		  componentClass: 'input'
		};

		var contextTypes = {
		  $bs_formGroup: _react2['default'].PropTypes.object
		};

		var FormControl = (function (_React$Component) {
		  _inherits(FormControl, _React$Component);

		  function FormControl() {
		    _classCallCheck(this, FormControl);

		    _React$Component.apply(this, arguments);
		  }

		  FormControl.prototype.render = function render() {
		    var formGroup = this.context.$bs_formGroup;
		    var controlId = formGroup && formGroup.controlId;

		    var _props = this.props;
		    var Component = _props.componentClass;
		    var type = _props.type;
		    var _props$id = _props.id;
		    var id = _props$id === undefined ? controlId : _props$id;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'className']);

		     true ? _warning2['default'](controlId == null || id === controlId, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : undefined;

		    delete props.bsClass;

		    // input[type="file"] should not have .form-control.
		    var classes = undefined;
		    if (type !== 'file') {
		      classes = _utilsBootstrapUtils.getClassSet(this.props);
		    }

		    return _react2['default'].createElement(Component, _extends({}, props, {
		      type: type,
		      id: id,
		      className: _classnames2['default'](className, classes)
		    }));
		  };

		  return FormControl;
		})(_react2['default'].Component);

		FormControl.propTypes = propTypes;
		FormControl.defaultProps = defaultProps;
		FormControl.contextTypes = contextTypes;

		FormControl.Feedback = _FormControlFeedback2['default'];
		FormControl.Static = _FormControlStatic2['default'];

		exports['default'] = _utilsBootstrapUtils.bsClass('form-control', FormControl);
		module.exports = exports['default'];

	/***/ },
	/* 176 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Glyphicon = __webpack_require__(57);

		var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

		var defaultProps = {
		  bsRole: 'feedback'
		};

		var contextTypes = {
		  $bs_formGroup: _react2['default'].PropTypes.object
		};

		var FormControlFeedback = (function (_React$Component) {
		  _inherits(FormControlFeedback, _React$Component);

		  function FormControlFeedback() {
		    _classCallCheck(this, FormControlFeedback);

		    _React$Component.apply(this, arguments);
		  }

		  FormControlFeedback.prototype.getGlyph = function getGlyph(validationState) {
		    switch (validationState) {
		      case 'success':
		        return 'ok';
		      case 'warning':
		        return 'warning-sign';
		      case 'error':
		        return 'remove';
		      default:
		        return null;
		    }
		  };

		  FormControlFeedback.prototype.renderDefaultFeedback = function renderDefaultFeedback(formGroup, className, classes, props) {
		    var glyph = this.getGlyph(formGroup && formGroup.validationState);
		    if (!glyph) {
		      return null;
		    }

		    return _react2['default'].createElement(_Glyphicon2['default'], _extends({}, props, {
		      glyph: glyph,
		      className: _classnames2['default'](className, classes)
		    }));
		  };

		  FormControlFeedback.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['className', 'children']);

		    delete props.bsClass;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    if (!children) {
		      return this.renderDefaultFeedback(this.context.$bs_formGroup, className, classes, props);
		    }

		    var child = _react2['default'].Children.only(children);
		    return _react2['default'].cloneElement(child, _extends({}, props, {
		      className: _classnames2['default'](child.props.className, className, classes)
		    }));
		  };

		  return FormControlFeedback;
		})(_react2['default'].Component);

		FormControlFeedback.defaultProps = defaultProps;
		FormControlFeedback.contextTypes = contextTypes;

		exports['default'] = _utilsBootstrapUtils.bsClass('form-control-feedback', FormControlFeedback);
		module.exports = exports['default'];

	/***/ },
	/* 177 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var propTypes = {
		  componentClass: _reactPropTypesLibElementType2['default']
		};

		var defaultProps = {
		  componentClass: 'p'
		};

		var FormControlStatic = (function (_React$Component) {
		  _inherits(FormControlStatic, _React$Component);

		  function FormControlStatic() {
		    _classCallCheck(this, FormControlStatic);

		    _React$Component.apply(this, arguments);
		  }

		  FormControlStatic.prototype.render = function render() {
		    var _props = this.props;
		    var Component = _props.componentClass;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['componentClass', 'className']);

		    delete props.bsClass;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement(Component, _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return FormControlStatic;
		})(_react2['default'].Component);

		FormControlStatic.propTypes = propTypes;
		FormControlStatic.defaultProps = defaultProps;

		exports['default'] = _utilsBootstrapUtils.bsClass('form-control-static', FormControlStatic);
		module.exports = exports['default'];

	/***/ },
	/* 178 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Grid = _react2['default'].createClass({
		  displayName: 'Grid',

		  propTypes: {
		    /**
		     * Turn any fixed-width grid layout into a full-width layout by this property.
		     *
		     * Adds `container-fluid` class.
		     */
		    fluid: _react2['default'].PropTypes.bool,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div',
		      fluid: false
		    };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;
		    var className = this.props.fluid ? 'container-fluid' : 'container';

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, className) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Grid;
		module.exports = exports['default'];

	/***/ },
	/* 179 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var HelpBlock = (function (_React$Component) {
		  _inherits(HelpBlock, _React$Component);

		  function HelpBlock() {
		    _classCallCheck(this, HelpBlock);

		    _React$Component.apply(this, arguments);
		  }

		  HelpBlock.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    delete props.bsClass;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement('span', _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return HelpBlock;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('help-block', HelpBlock);
		module.exports = exports['default'];

	/***/ },
	/* 180 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Image = _react2['default'].createClass({
		  displayName: 'Image',

		  propTypes: {

		    /**
		     * Sets image as responsive image
		     */
		    responsive: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as rounded
		     */
		    rounded: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as circle
		     */
		    circle: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as thumbnail
		     */
		    thumbnail: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      responsive: false,
		      rounded: false,
		      circle: false,
		      thumbnail: false
		    };
		  },

		  render: function render() {
		    var classes = {
		      'img-responsive': this.props.responsive,
		      'img-rounded': this.props.rounded,
		      'img-circle': this.props.circle,
		      'img-thumbnail': this.props.thumbnail
		    };

		    return _react2['default'].createElement('img', _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }));
		  }
		});

		exports['default'] = Image;
		module.exports = exports['default'];

	/***/ },
	/* 181 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		var _interopRequireWildcard = __webpack_require__(2)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _FormControls = __webpack_require__(182);

		var FormControls = _interopRequireWildcard(_FormControls);

		var _InputBase2 = __webpack_require__(56);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _utilsDeprecationWarning = __webpack_require__(60);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var Input = (function (_InputBase) {
		  _inherits(Input, _InputBase);

		  function Input() {
		    _classCallCheck(this, Input);

		    _InputBase.apply(this, arguments);
		  }

		  Input.prototype.render = function render() {
		    if (this.props.type === 'static') {
		      _utilsDeprecationWarning2['default']('Input type=static', 'FormControls.Static');
		      return _react2['default'].createElement(FormControls.Static, this.props);
		    }

		    return _InputBase.prototype.render.call(this);
		  };

		  return Input;
		})(_InputBase3['default']);

		Input.propTypes = {
		  type: _react2['default'].PropTypes.string
		};

		exports['default'] = _utilsDeprecationWarning2['default'].wrapper(Input, '`<Input>`', '`<FormControl>`, `<Checkbox>`, or `<Radio>`, with `<FormGroup>` and/or ' + '`<InputGroup>` as needed');
		module.exports = exports['default'];

	/***/ },
	/* 182 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _Static2 = __webpack_require__(183);

		var _Static3 = _interopRequireDefault(_Static2);

		exports.Static = _Static3['default'];

	/***/ },
	/* 183 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _InputBase2 = __webpack_require__(56);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _utilsChildrenValueInputValidation = __webpack_require__(58);

		var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

		var _utilsDeprecationWarning = __webpack_require__(60);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var Static = (function (_InputBase) {
		  _inherits(Static, _InputBase);

		  function Static() {
		    _classCallCheck(this, Static);

		    _InputBase.apply(this, arguments);
		  }

		  Static.prototype.getValue = function getValue() {
		    var _props = this.props;
		    var children = _props.children;
		    var value = _props.value;

		    return children ? children : value;
		  };

		  Static.prototype.renderInput = function renderInput() {
		    var _props2 = this.props;
		    var ComponentClass = _props2.componentClass;

		    var props = _objectWithoutProperties(_props2, ['componentClass']);

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, props, { className: _classnames2['default'](props.className, 'form-control-static'), ref: 'input', key: 'input' }),
		      this.getValue()
		    );
		  };

		  return Static;
		})(_InputBase3['default']);

		Static.propTypes = {
		  value: _utilsChildrenValueInputValidation2['default'],
		  /**
		   * You can override the default 'p' with a custom element
		   */
		  componentClass: _reactPropTypesLibElementType2['default'],
		  children: _utilsChildrenValueInputValidation2['default']
		};

		Static.defaultProps = {
		  componentClass: 'p'
		};

		exports['default'] = _utilsDeprecationWarning2['default'].wrapper(Static, '`<FormControls.Static>`', '`<FormControl.Static>`');
		module.exports = exports['default'];

	/***/ },
	/* 184 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _InputGroupAddon = __webpack_require__(185);

		var _InputGroupAddon2 = _interopRequireDefault(_InputGroupAddon);

		var _InputGroupButton = __webpack_require__(186);

		var _InputGroupButton2 = _interopRequireDefault(_InputGroupButton);

		var InputGroup = (function (_React$Component) {
		  _inherits(InputGroup, _React$Component);

		  function InputGroup() {
		    _classCallCheck(this, InputGroup);

		    _React$Component.apply(this, arguments);
		  }

		  InputGroup.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    delete props.bsClass;
		    delete props.bsSize;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement('span', _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return InputGroup;
		})(_react2['default'].Component);

		InputGroup.Addon = _InputGroupAddon2['default'];
		InputGroup.Button = _InputGroupButton2['default'];

		exports['default'] = _utilsBootstrapUtils.bsClass('input-group', _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], InputGroup));
		module.exports = exports['default'];

	/***/ },
	/* 185 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var InputGroupAddon = (function (_React$Component) {
		  _inherits(InputGroupAddon, _React$Component);

		  function InputGroupAddon() {
		    _classCallCheck(this, InputGroupAddon);

		    _React$Component.apply(this, arguments);
		  }

		  InputGroupAddon.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    delete props.bsClass;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement('span', _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return InputGroupAddon;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('input-group-addon', InputGroupAddon);
		module.exports = exports['default'];

	/***/ },
	/* 186 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var InputGroupButton = (function (_React$Component) {
		  _inherits(InputGroupButton, _React$Component);

		  function InputGroupButton() {
		    _classCallCheck(this, InputGroupButton);

		    _React$Component.apply(this, arguments);
		  }

		  InputGroupButton.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    delete props.bsClass;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement('span', _extends({}, props, { className: _classnames2['default'](className, classes) }));
		  };

		  return InputGroupButton;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('input-group-btn', InputGroupButton);
		module.exports = exports['default'];

	/***/ },
	/* 187 */
	/***/ function(module, exports, __webpack_require__) {

		// https://www.npmjs.org/package/react-interpolate-component
		// TODO: Drop this in favor of es6 string interpolation

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _Object$assign = __webpack_require__(5)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var REGEXP = /\%\((.+?)\)s/;

		var Interpolate = _react2['default'].createClass({
		  displayName: 'Interpolate',

		  propTypes: {
		    component: _react2['default'].PropTypes.node,
		    format: _react2['default'].PropTypes.string,
		    unsafe: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      component: 'span',
		      unsafe: false
		    };
		  },

		  render: function render() {
		    var format = _utilsValidComponentChildren2['default'].count(this.props.children) > 0 || typeof this.props.children === 'string' ? this.props.children : this.props.format;
		    var parent = this.props.component;
		    var unsafe = this.props.unsafe === true;
		    var props = _extends({}, this.props);

		    delete props.children;
		    delete props.format;
		    delete props.component;
		    delete props.unsafe;

		    if (unsafe) {
		      var content = format.split(REGEXP).reduce(function (memo, match, index) {
		        var html = undefined;

		        if (index % 2 === 0) {
		          html = match;
		        } else {
		          html = props[match];
		          delete props[match];
		        }

		        if (_react2['default'].isValidElement(html)) {
		          throw new Error('cannot interpolate a React component into unsafe text');
		        }

		        memo += html;

		        return memo;
		      }, '');

		      props.dangerouslySetInnerHTML = { __html: content };

		      return _react2['default'].createElement(parent, props);
		    }
		    var kids = format.split(REGEXP).reduce(function (memo, match, index) {
		      var child = undefined;

		      if (index % 2 === 0) {
		        if (match.length === 0) {
		          return memo;
		        }

		        child = match;
		      } else {
		        child = props[match];
		        delete props[match];
		      }

		      memo.push(child);

		      return memo;
		    }, []);

		    return _react2['default'].createElement(parent, props, kids);
		  }
		});

		_Object$assign(Interpolate, { REGEXP: REGEXP });

		exports['default'] = Interpolate;
		module.exports = exports['default'];

	/***/ },
	/* 188 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Jumbotron = _react2['default'].createClass({
		  displayName: 'Jumbotron',

		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return { componentClass: 'div' };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Jumbotron;
		module.exports = exports['default'];

	/***/ },
	/* 189 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var Label = (function (_React$Component) {
		  _inherits(Label, _React$Component);

		  function Label() {
		    _classCallCheck(this, _Label);

		    _React$Component.apply(this, arguments);
		  }

		  Label.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  };

		  var _Label = Label;
		  Label = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY), _styleMaps.DEFAULT)(Label) || Label;
		  Label = _utilsBootstrapUtils.bsClass('label')(Label) || Label;
		  return Label;
		})(_react2['default'].Component);

		exports['default'] = Label;
		module.exports = exports['default'];

	/***/ },
	/* 190 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _ListGroupItem = __webpack_require__(191);

		var _ListGroupItem2 = _interopRequireDefault(_ListGroupItem);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var ListGroup = (function (_React$Component) {
		  _inherits(ListGroup, _React$Component);

		  function ListGroup() {
		    _classCallCheck(this, ListGroup);

		    _React$Component.apply(this, arguments);
		  }

		  ListGroup.prototype.render = function render() {
		    var _this = this;

		    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
		      return _react.cloneElement(item, { key: item.key ? item.key : index });
		    });

		    if (this.areCustomChildren(items)) {
		      var Component = this.props.componentClass;
		      return _react2['default'].createElement(
		        Component,
		        _extends({}, this.props, {
		          className: _classnames2['default'](this.props.className, 'list-group') }),
		        items
		      );
		    }

		    var shouldRenderDiv = false;

		    if (!this.props.children) {
		      shouldRenderDiv = true;
		    } else {
		      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child) {
		        if (_this.isAnchorOrButton(child.props)) {
		          shouldRenderDiv = true;
		        }
		      });
		    }

		    return shouldRenderDiv ? this.renderDiv(items) : this.renderUL(items);
		  };

		  ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
		    return props.href || props.onClick;
		  };

		  ListGroup.prototype.areCustomChildren = function areCustomChildren(children) {
		    var customChildren = false;

		    _utilsValidComponentChildren2['default'].forEach(children, function (child) {
		      if (child.type !== _ListGroupItem2['default']) {
		        customChildren = true;
		      }
		    }, this);

		    return customChildren;
		  };

		  ListGroup.prototype.renderUL = function renderUL(items) {
		    var listItems = _utilsValidComponentChildren2['default'].map(items, function (item) {
		      return _react.cloneElement(item, { listItem: true });
		    });

		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'list-group') }),
		      listItems
		    );
		  };

		  ListGroup.prototype.renderDiv = function renderDiv(items) {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'list-group') }),
		      items
		    );
		  };

		  return ListGroup;
		})(_react2['default'].Component);

		ListGroup.defaultProps = {
		  componentClass: 'div'
		};

		ListGroup.propTypes = {
		  className: _react2['default'].PropTypes.string,
		  /**
		   * The element for ListGroup if children are
		   * user-defined custom components.
		   * @type {("ul"|"div")}
		   */
		  componentClass: _react2['default'].PropTypes.oneOf(['ul', 'div']),
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
		};

		exports['default'] = ListGroup;
		module.exports = exports['default'];

	/***/ },
	/* 191 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var ListGroupItem = (function (_React$Component) {
		  _inherits(ListGroupItem, _React$Component);

		  function ListGroupItem() {
		    _classCallCheck(this, ListGroupItem);

		    _React$Component.apply(this, arguments);
		  }

		  ListGroupItem.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    classes.active = this.props.active;
		    classes.disabled = this.props.disabled;

		    if (this.props.href) {
		      return this.renderAnchor(classes);
		    } else if (this.props.onClick) {
		      return this.renderButton(classes);
		    } else if (this.props.listItem) {
		      return this.renderLi(classes);
		    }

		    return this.renderSpan(classes);
		  };

		  ListGroupItem.prototype.renderLi = function renderLi(classes) {
		    return _react2['default'].createElement(
		      'li',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderAnchor = function renderAnchor(classes) {
		    return _react2['default'].createElement(
		      'a',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderButton = function renderButton(classes) {
		    return _react2['default'].createElement(
		      'button',
		      _extends({
		        type: 'button'
		      }, this.props, {
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderSpan = function renderSpan(classes) {
		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderStructuredContent = function renderStructuredContent() {
		    var header = undefined;
		    var headingClass = _utilsBootstrapUtils.prefix(this.props, 'heading');

		    if (_react2['default'].isValidElement(this.props.header)) {
		      header = _react.cloneElement(this.props.header, {
		        key: 'header',
		        className: _classnames2['default'](this.props.header.props.className, headingClass)
		      });
		    } else {
		      header = _react2['default'].createElement(
		        'h4',
		        { key: 'header', className: headingClass },
		        this.props.header
		      );
		    }

		    var content = _react2['default'].createElement(
		      'p',
		      { key: 'content', className: _utilsBootstrapUtils.prefix(this.props, 'text') },
		      this.props.children
		    );

		    return [header, content];
		  };

		  return ListGroupItem;
		})(_react2['default'].Component);

		ListGroupItem.propTypes = {
		  className: _react2['default'].PropTypes.string,
		  active: _react2['default'].PropTypes.any,
		  disabled: _react2['default'].PropTypes.any,
		  header: _react2['default'].PropTypes.node,
		  listItem: _react2['default'].PropTypes.bool,
		  onClick: _react2['default'].PropTypes.func,
		  eventKey: _react2['default'].PropTypes.any,
		  href: _react2['default'].PropTypes.string,
		  target: _react2['default'].PropTypes.string
		};

		ListGroupItem.defaultTypes = {
		  listItem: false
		};

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('list-group-item', ListGroupItem));
		module.exports = exports['default'];

	/***/ },
	/* 192 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _Object$assign = __webpack_require__(5)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _MediaHeading = __webpack_require__(193);

		var _MediaHeading2 = _interopRequireDefault(_MediaHeading);

		var _MediaBody = __webpack_require__(194);

		var _MediaBody2 = _interopRequireDefault(_MediaBody);

		var _MediaLeft = __webpack_require__(195);

		var _MediaLeft2 = _interopRequireDefault(_MediaLeft);

		var _MediaRight = __webpack_require__(196);

		var _MediaRight2 = _interopRequireDefault(_MediaRight);

		var _MediaList = __webpack_require__(197);

		var _MediaList2 = _interopRequireDefault(_MediaList);

		var _MediaListItem = __webpack_require__(198);

		var _MediaListItem2 = _interopRequireDefault(_MediaListItem);

		var Media = _react2['default'].createClass({
		  displayName: 'Media',
		  propTypes: {
		    /**
		     * You can use a custom element for the media container
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var ComponentClass = _props.componentClass;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['componentClass', 'className']);

		    return _react2['default'].createElement(ComponentClass, _extends({}, props, { className: _classnames2['default'](className, 'media') }));
		  }
		});

		Media = _Object$assign(Media, { Heading: _MediaHeading2['default'], Body: _MediaBody2['default'], Left: _MediaLeft2['default'], Right: _MediaRight2['default'], List: _MediaList2['default'], ListItem: _MediaListItem2['default'] });

		exports['default'] = Media;
		module.exports = exports['default'];

	/***/ },
	/* 193 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaHeading = _react2['default'].createClass({
		  displayName: 'Media.Heading',
		  propTypes: {
		    /**
		     * You can use a custom element for the media heading
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'h4'
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var ComponentClass = _props.componentClass;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['componentClass', 'className']);

		    return _react2['default'].createElement(ComponentClass, _extends({}, props, { className: _classnames2['default'](className, 'media-heading') }));
		  }
		});

		exports['default'] = MediaHeading;
		module.exports = exports['default'];

	/***/ },
	/* 194 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaBody = _react2['default'].createClass({
		  displayName: 'Media.Body',
		  propTypes: {
		    /**
		     * You can use a custom element for the media body
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var ComponentClass = _props.componentClass;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['componentClass', 'className']);

		    return _react2['default'].createElement(ComponentClass, _extends({}, props, { className: _classnames2['default'](className, 'media-body') }));
		  }
		});

		exports['default'] = MediaBody;
		module.exports = exports['default'];

	/***/ },
	/* 195 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaLeft = _react2['default'].createClass({
		  displayName: 'Media.Left',
		  propTypes: {
		    /**
		     * Align the media to the top, middle or bottom
		     * of the media object
		     */
		    align: _react2['default'].PropTypes.oneOf(['top', 'middle', 'bottom'])
		  },

		  render: function render() {
		    var _classNames;

		    var _props = this.props;
		    var align = _props.align;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['align', 'className']);

		    var classes = _classnames2['default'](className, 'media-left', (_classNames = {}, _classNames['media-' + align] = Boolean(align), _classNames));

		    // Only add the media-alignment class if align is passed in props
		    return _react2['default'].createElement('div', _extends({}, props, { className: classes }));
		  }
		});

		exports['default'] = MediaLeft;
		module.exports = exports['default'];

	/***/ },
	/* 196 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaRight = _react2['default'].createClass({
		  displayName: 'Media.Right',
		  propTypes: {
		    /**
		     * Align the media to the top, middle or bottom
		     * of the media object
		     */
		    align: _react2['default'].PropTypes.oneOf(['top', 'middle', 'bottom'])
		  },

		  render: function render() {
		    var _classNames;

		    var _props = this.props;
		    var align = _props.align;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['align', 'className']);

		    var classes = _classnames2['default'](className, 'media-right', (_classNames = {}, _classNames['media-' + align] = Boolean(align), _classNames));

		    // Only add the media-alignment class if align is passed in props
		    return _react2['default'].createElement('div', _extends({}, props, { className: classes }));
		  }
		});

		exports['default'] = MediaRight;
		module.exports = exports['default'];

	/***/ },
	/* 197 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaList = _react2['default'].createClass({
		  displayName: 'Media.List',
		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    return _react2['default'].createElement('ul', _extends({}, props, { className: _classnames2['default'](className, 'media-list') }));
		  }
		});

		exports['default'] = MediaList;
		module.exports = exports['default'];

	/***/ },
	/* 198 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var MediaListItem = _react2['default'].createClass({
		  displayName: 'Media.ListItem',
		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    return _react2['default'].createElement('li', _extends({}, props, { className: _classnames2['default'](className, 'media') }));
		  }
		});

		exports['default'] = MediaListItem;
		module.exports = exports['default'];

	/***/ },
	/* 199 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibAll = __webpack_require__(53);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var MenuItem = (function (_React$Component) {
		  _inherits(MenuItem, _React$Component);

		  function MenuItem(props) {
		    _classCallCheck(this, MenuItem);

		    _React$Component.call(this, props);

		    this.handleClick = this.handleClick.bind(this);
		  }

		  MenuItem.prototype.handleClick = function handleClick(event) {
		    if (!this.props.href || this.props.disabled) {
		      event.preventDefault();
		    }

		    if (this.props.disabled) {
		      return;
		    }

		    if (this.props.onSelect) {
		      this.props.onSelect(this.props.eventKey, event);
		    }
		  };

		  MenuItem.prototype.render = function render() {
		    if (this.props.divider) {
		      return _react2['default'].createElement('li', {
		        role: 'separator',
		        className: _classnames2['default']('divider', this.props.className),
		        style: this.props.style
		      });
		    }

		    if (this.props.header) {
		      var headerClass = _utilsBootstrapUtils.prefix(this.props, 'header');

		      return _react2['default'].createElement(
		        'li',
		        {
		          role: 'heading',
		          className: _classnames2['default'](headerClass, this.props.className),
		          style: this.props.style
		        },
		        this.props.children
		      );
		    }

		    var _props = this.props;
		    var className = _props.className;
		    var style = _props.style;
		    var onClick = _props.onClick;

		    var props = _objectWithoutProperties(_props, ['className', 'style', 'onClick']);

		    var classes = {
		      disabled: this.props.disabled,
		      active: this.props.active
		    };

		    return _react2['default'].createElement(
		      'li',
		      { role: 'presentation',
		        className: _classnames2['default'](className, classes),
		        style: style
		      },
		      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
		        role: 'menuitem',
		        tabIndex: '-1',
		        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
		      }))
		    );
		  };

		  return MenuItem;
		})(_react2['default'].Component);

		MenuItem.propTypes = {

		  /**
		   * Highlight the menu item as active.
		   */
		  active: _react2['default'].PropTypes.bool,

		  /**
		   * Disable the menu item, making it unselectable.
		   */
		  disabled: _react2['default'].PropTypes.bool,

		  /**
		   * Styles the menu item as a horizontal rule, providing visual separation between
		   * groups of menu items.
		   */
		  divider: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
		    if (props.divider && props.children) {
		      return new Error('Children will not be rendered for dividers');
		    }
		  }),

		  /**
		   * Value passed to the `onSelect` handler, useful for identifying the selected menu item.
		   */
		  eventKey: _react2['default'].PropTypes.any,

		  /**
		   * Styles the menu item as a header label, useful for describing a group of menu items.
		   */
		  header: _react2['default'].PropTypes.bool,

		  /**
		   * HTML `href` attribute corresponding to `a.href`.
		   */
		  href: _react2['default'].PropTypes.string,

		  /**
		   * HTML `target` attribute corresponding to `a.target`.
		   */
		  target: _react2['default'].PropTypes.string,

		  /**
		   * HTML `title` attribute corresponding to `a.title`.
		   */
		  title: _react2['default'].PropTypes.string,

		  /**
		   * Callback fired when the menu item is clicked.
		   */
		  onClick: _react2['default'].PropTypes.func,

		  onKeyDown: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired when the menu item is selected.
		   *
		   * ```js
		   * (eventKey: any, event: Object) => any
		   * ```
		   */
		  onSelect: _react2['default'].PropTypes.func,

		  /**
		   * HTML `id` attribute.
		   */
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
		};

		MenuItem.defaultProps = {
		  divider: false,
		  disabled: false,
		  header: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('dropdown', MenuItem);
		module.exports = exports['default'];

	/***/ },
	/* 200 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _domHelpersEvents = __webpack_require__(201);

		var _domHelpersEvents2 = _interopRequireDefault(_domHelpersEvents);

		var _domHelpersOwnerDocument = __webpack_require__(87);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		var _domHelpersUtilInDOM = __webpack_require__(82);

		var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

		var _domHelpersUtilScrollbarSize = __webpack_require__(204);

		var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

		var _lodashCompatObjectPick = __webpack_require__(172);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactOverlaysLibModal = __webpack_require__(205);

		var _reactOverlaysLibModal2 = _interopRequireDefault(_reactOverlaysLibModal);

		var _reactOverlaysLibUtilsIsOverflowing = __webpack_require__(216);

		var _reactOverlaysLibUtilsIsOverflowing2 = _interopRequireDefault(_reactOverlaysLibUtilsIsOverflowing);

		var _reactPropTypesLibDeprecated = __webpack_require__(35);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Fade = __webpack_require__(173);

		var _Fade2 = _interopRequireDefault(_Fade);

		var _ModalDialog = __webpack_require__(220);

		var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

		var _ModalBody = __webpack_require__(221);

		var _ModalBody2 = _interopRequireDefault(_ModalBody);

		var _ModalHeader = __webpack_require__(222);

		var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

		var _ModalTitle = __webpack_require__(223);

		var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

		var _ModalFooter = __webpack_require__(224);

		var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

		/* eslint-disable react/prop-types */
		var Modal = _react2['default'].createClass({
		  displayName: 'Modal',

		  propTypes: _extends({}, _reactOverlaysLibModal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

		    /**
		     * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
		     */
		    backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

		    /**
		     * Close the modal when escape key is pressed
		     */
		    keyboard: _react2['default'].PropTypes.bool,

		    /**
		     * Open and close the Modal with a slide and fade animation.
		     */
		    animation: _react2['default'].PropTypes.bool,

		    /**
		     * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
		     * styles and markup to create a custom modal component.
		     */
		    dialogComponentClass: _reactPropTypesLibElementType2['default'],

		    /**
		     * @private
		     */
		    dialogComponent: _reactPropTypesLibDeprecated2['default'](_reactPropTypesLibElementType2['default'], 'Use `dialogComponentClass`.'),

		    /**
		     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
		     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
		     */
		    autoFocus: _react2['default'].PropTypes.bool,

		    /**
		     * When `true` The modal will prevent focus from leaving the Modal while open.
		     * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
		     * such as screen readers.
		     */
		    enforceFocus: _react2['default'].PropTypes.bool,

		    /**
		     * Hide this from automatic props documentation generation.
		     * @private
		     */
		    bsStyle: _react2['default'].PropTypes.string,

		    /**
		     * When `true` The modal will show itself.
		     */
		    show: _react2['default'].PropTypes.bool,

		    /**
		     * A callback fired when the header closeButton or non-static backdrop is
		     * clicked. Required if either are specified.
		     */
		    onHide: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired before the Modal transitions in
		     */
		    onEnter: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition in
		     */
		    onEntering: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning in
		     */
		    onEntered: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired right before the Modal transitions out
		     */
		    onExit: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition out
		     */
		    onExiting: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning out
		     */
		    onExited: _react2['default'].PropTypes.func
		  }),

		  childContextTypes: {
		    '$bs_onModalHide': _react2['default'].PropTypes.func
		  },

		  getDefaultProps: function getDefaultProps() {
		    return _extends({}, _reactOverlaysLibModal2['default'].defaultProps, {
		      bsClass: 'modal',
		      animation: true,
		      dialogComponentClass: _ModalDialog2['default']
		    });
		  },

		  getInitialState: function getInitialState() {
		    return {
		      modalStyles: {}
		    };
		  },

		  getChildContext: function getChildContext() {
		    return {
		      $bs_onModalHide: this.props.onHide
		    };
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);
		  },

		  render: function render() {
		    var _this = this;

		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;
		    var dialogClassName = _props.dialogClassName;
		    var animation = _props.animation;

		    var props = _objectWithoutProperties(_props, ['className', 'children', 'dialogClassName', 'animation']);

		    var modalStyles = this.state.modalStyles;

		    var inClass = { 'in': props.show && !animation };
		    var Dialog = props.dialogComponent || props.dialogComponentClass;

		    var parentProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_reactOverlaysLibModal2['default'].propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']) // the rest are fired in _onHide() and _onShow()
		    );

		    var modal = _react2['default'].createElement(
		      Dialog,
		      _extends({
		        key: 'modal',
		        ref: function (ref) {
		          return _this._modal = ref;
		        }
		      }, props, {
		        style: modalStyles,
		        className: _classnames2['default'](className, inClass),
		        dialogClassName: dialogClassName,
		        onClick: props.backdrop === true ? this.handleDialogClick : null
		      }),
		      this.props.children
		    );

		    return _react2['default'].createElement(
		      _reactOverlaysLibModal2['default'],
		      _extends({}, parentProps, {
		        show: props.show,
		        ref: function (ref) {
		          _this._wrapper = ref && ref.refs.modal;
		          _this._backdrop = ref && ref.refs.backdrop;
		        },
		        onEntering: this._onShow,
		        onExited: this._onHide,
		        backdropClassName: _classnames2['default'](_utilsBootstrapUtils.prefix(props, 'backdrop'), inClass),
		        containerClassName: _utilsBootstrapUtils.prefix(props, 'open'),
		        transition: animation ? _Fade2['default'] : undefined,
		        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
		        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
		      }),
		      modal
		    );
		  },

		  _onShow: function _onShow() {
		    _domHelpersEvents2['default'].on(window, 'resize', this.handleWindowResize);

		    this.setState(this._getStyles());

		    if (this.props.onEntering) {
		      var _props2;

		      (_props2 = this.props).onEntering.apply(_props2, arguments);
		    }
		  },

		  _onHide: function _onHide() {
		    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);

		    if (this.props.onExited) {
		      var _props3;

		      (_props3 = this.props).onExited.apply(_props3, arguments);
		    }
		  },

		  handleDialogClick: function handleDialogClick(e) {
		    if (e.target !== e.currentTarget) {
		      return;
		    }

		    this.props.onHide();
		  },

		  handleWindowResize: function handleWindowResize() {
		    this.setState(this._getStyles());
		  },

		  _getStyles: function _getStyles() {
		    if (!_domHelpersUtilInDOM2['default']) {
		      return {};
		    }

		    var node = _reactDom2['default'].findDOMNode(this._modal);
		    var doc = _domHelpersOwnerDocument2['default'](node);

		    var scrollHt = node.scrollHeight;
		    var bodyIsOverflowing = _reactOverlaysLibUtilsIsOverflowing2['default'](_reactDom2['default'].findDOMNode(this.props.container || doc.body));
		    var modalIsOverflowing = scrollHt > doc.documentElement.clientHeight;

		    return {
		      modalStyles: {
		        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
		        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
		      }
		    };
		  }
		});

		Modal.Body = _ModalBody2['default'];
		Modal.Header = _ModalHeader2['default'];
		Modal.Title = _ModalTitle2['default'];
		Modal.Footer = _ModalFooter2['default'];

		Modal.Dialog = _ModalDialog2['default'];

		Modal.TRANSITION_DURATION = 300;
		Modal.BACKDROP_TRANSITION_DURATION = 150;

		exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', Modal));
		module.exports = exports['default'];

	/***/ },
	/* 201 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var on = __webpack_require__(83),
		    off = __webpack_require__(167),
		    filter = __webpack_require__(202);

		module.exports = { on: on, off: off, filter: filter };

	/***/ },
	/* 202 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var contains = __webpack_require__(88),
		    qsa = __webpack_require__(203);

		module.exports = function (selector, handler) {
		  return function (e) {
		    var top = e.currentTarget,
		        target = e.target,
		        matches = qsa(top, selector);

		    if (matches.some(function (match) {
		      return contains(match, target);
		    })) handler.call(this, e);
		  };
		};

	/***/ },
	/* 203 */
	/***/ function(module, exports) {

		'use strict';
		//     Zepto.js
		//     (c) 2010-2015 Thomas Fuchs
		//     Zepto.js may be freely distributed under the MIT license.
		var simpleSelectorRE = /^[\w-]*$/,
		    toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);

		module.exports = function qsa(element, selector) {
		  var maybeID = selector[0] === '#',
		      maybeClass = selector[0] === '.',
		      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
		      isSimple = simpleSelectorRE.test(nameOnly),
		      found;

		  if (isSimple) {
		    if (maybeID) {
		      element = element.getElementById ? element : document;
		      return (found = element.getElementById(nameOnly)) ? [found] : [];
		    }

		    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));

		    return toArray(element.getElementsByTagName(selector));
		  }

		  return toArray(element.querySelectorAll(selector));
		};

	/***/ },
	/* 204 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var canUseDOM = __webpack_require__(82);

		var size;

		module.exports = function (recalc) {
		  if (!size || recalc) {
		    if (canUseDOM) {
		      var scrollDiv = document.createElement('div');

		      scrollDiv.style.position = 'absolute';
		      scrollDiv.style.top = '-9999px';
		      scrollDiv.style.width = '50px';
		      scrollDiv.style.height = '50px';
		      scrollDiv.style.overflow = 'scroll';

		      document.body.appendChild(scrollDiv);
		      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
		      document.body.removeChild(scrollDiv);
		    }
		  }

		  return size;
		};

	/***/ },
	/* 205 */
	/***/ function(module, exports, __webpack_require__) {

		/*eslint-disable react/prop-types */
		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _reactPropTypesLibMountable = __webpack_require__(206);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		var _reactPropTypesLibElementType = __webpack_require__(208);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Portal = __webpack_require__(209);

		var _Portal2 = _interopRequireDefault(_Portal);

		var _ModalManager = __webpack_require__(211);

		var _ModalManager2 = _interopRequireDefault(_ModalManager);

		var _utilsOwnerDocument = __webpack_require__(169);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsAddEventListener = __webpack_require__(166);

		var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

		var _utilsAddFocusListener = __webpack_require__(219);

		var _utilsAddFocusListener2 = _interopRequireDefault(_utilsAddFocusListener);

		var _domHelpersUtilInDOM = __webpack_require__(82);

		var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

		var _domHelpersActiveElement = __webpack_require__(86);

		var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

		var _domHelpersQueryContains = __webpack_require__(88);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _utilsGetContainer = __webpack_require__(210);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		var modalManager = new _ModalManager2['default']();

		/**
		 * Love them or hate them, `<Modal/>` provides a solid foundation for creating dialogs, lightboxes, or whatever else.
		 * The Modal component renders its `children` node in front of a backdrop component.
		 *
		 * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:
		 *
		 * - Manages dialog stacking when one-at-a-time just isn't enough.
		 * - Creates a backdrop, for disabling interaction below the modal.
		 * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
		 * - It disables scrolling of the page content while open.
		 * - Adds the appropriate ARIA roles are automatically.
		 * - Easily pluggable animations via a `<Transition/>` component.
		 *
		 * Note that, in the same way the backdrop element prevents users from clicking or interacting
		 * with the page content underneath the Modal, Screen readers also need to be signaled to not to
		 * interact with page content while the Modal is open. To do this, we use a common technique of applying
		 * the `aria-hidden='true'` attribute to the non-Modal elements in the Modal `container`. This means that for
		 * a Modal to be truly modal, it should have a `container` that is _outside_ your app's
		 * React hierarchy (such as the default: document.body).
		 */
		var Modal = _react2['default'].createClass({
		  displayName: 'Modal',

		  propTypes: _extends({}, _Portal2['default'].propTypes, {

		    /**
		     * Set the visibility of the Modal
		     */
		    show: _react2['default'].PropTypes.bool,

		    /**
		     * A Node, Component instance, or function that returns either. The Modal is appended to it's container element.
		     *
		     * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
		     * page content can be placed behind a virtual backdrop as well as a visual one.
		     */
		    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),

		    /**
		     * A callback fired when the Modal is opening.
		     */
		    onShow: _react2['default'].PropTypes.func,

		    /**
		     * A callback fired when either the backdrop is clicked, or the escape key is pressed.
		     *
		     * The `onHide` callback only signals intent from the Modal,
		     * you must actually set the `show` prop to `false` for the Modal to close.
		     */
		    onHide: _react2['default'].PropTypes.func,

		    /**
		     * Include a backdrop component.
		     */
		    backdrop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.oneOf(['static'])]),

		    /**
		     * A callback fired when the escape key, if specified in `keyboard`, is pressed.
		     */
		    onEscapeKeyUp: _react2['default'].PropTypes.func,

		    /**
		     * A callback fired when the backdrop, if specified, is clicked.
		     */
		    onBackdropClick: _react2['default'].PropTypes.func,

		    /**
		     * A style object for the backdrop component.
		     */
		    backdropStyle: _react2['default'].PropTypes.object,

		    /**
		     * A css class or classes for the backdrop component.
		     */
		    backdropClassName: _react2['default'].PropTypes.string,

		    /**
		     * A css class or set of classes applied to the modal container when the modal is open,
		     * and removed when it is closed.
		     */
		    containerClassName: _react2['default'].PropTypes.string,

		    /**
		     * Close the modal when escape key is pressed
		     */
		    keyboard: _react2['default'].PropTypes.bool,

		    /**
		     * A `<Transition/>` component to use for the dialog and backdrop components.
		     */
		    transition: _reactPropTypesLibElementType2['default'],

		    /**
		     * The `timeout` of the dialog transition if specified. This number is used to ensure that
		     * transition callbacks are always fired, even if browser transition events are canceled.
		     *
		     * See the Transition `timeout` prop for more infomation.
		     */
		    dialogTransitionTimeout: _react2['default'].PropTypes.number,

		    /**
		     * The `timeout` of the backdrop transition if specified. This number is used to
		     * ensure that transition callbacks are always fired, even if browser transition events are canceled.
		     *
		     * See the Transition `timeout` prop for more infomation.
		     */
		    backdropTransitionTimeout: _react2['default'].PropTypes.number,

		    /**
		     * When `true` The modal will automatically shift focus to itself when it opens, and
		     * replace it to the last focused element when it closes. This also
		     * works correctly with any Modal children that have the `autoFocus` prop.
		     *
		     * Generally this should never be set to `false` as it makes the Modal less
		     * accessible to assistive technologies, like screen readers.
		     */
		    autoFocus: _react2['default'].PropTypes.bool,

		    /**
		     * When `true` The modal will prevent focus from leaving the Modal while open.
		     *
		     * Generally this should never be set to `false` as it makes the Modal less
		     * accessible to assistive technologies, like screen readers.
		     */
		    enforceFocus: _react2['default'].PropTypes.bool,

		    /**
		     * Callback fired before the Modal transitions in
		     */
		    onEnter: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition in
		     */
		    onEntering: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning in
		     */
		    onEntered: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired right before the Modal transitions out
		     */
		    onExit: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition out
		     */
		    onExiting: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning out
		     */
		    onExited: _react2['default'].PropTypes.func

		  }),

		  getDefaultProps: function getDefaultProps() {
		    var noop = function noop() {};

		    return {
		      show: false,
		      backdrop: true,
		      keyboard: true,
		      autoFocus: true,
		      enforceFocus: true,
		      onHide: noop
		    };
		  },

		  getInitialState: function getInitialState() {
		    return { exited: !this.props.show };
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var Transition = _props.transition;
		    var backdrop = _props.backdrop;
		    var dialogTransitionTimeout = _props.dialogTransitionTimeout;

		    var props = _objectWithoutProperties(_props, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout']);

		    var onExit = props.onExit;
		    var onExiting = props.onExiting;
		    var onEnter = props.onEnter;
		    var onEntering = props.onEntering;
		    var onEntered = props.onEntered;

		    var show = !!props.show;
		    var dialog = _react2['default'].Children.only(this.props.children);

		    var mountModal = show || Transition && !this.state.exited;

		    if (!mountModal) {
		      return null;
		    }

		    var _dialog$props = dialog.props;
		    var role = _dialog$props.role;
		    var tabIndex = _dialog$props.tabIndex;

		    if (role === undefined || tabIndex === undefined) {
		      dialog = _react.cloneElement(dialog, {
		        role: role === undefined ? 'document' : role,
		        tabIndex: tabIndex == null ? '-1' : tabIndex
		      });
		    }

		    if (Transition) {
		      dialog = _react2['default'].createElement(
		        Transition,
		        {
		          transitionAppear: true,
		          unmountOnExit: true,
		          'in': show,
		          timeout: dialogTransitionTimeout,
		          onExit: onExit,
		          onExiting: onExiting,
		          onExited: this.handleHidden,
		          onEnter: onEnter,
		          onEntering: onEntering,
		          onEntered: onEntered
		        },
		        dialog
		      );
		    }

		    return _react2['default'].createElement(
		      _Portal2['default'],
		      {
		        ref: this.setMountNode,
		        container: props.container
		      },
		      _react2['default'].createElement(
		        'div',
		        {
		          ref: 'modal',
		          role: props.role || 'dialog',
		          style: props.style,
		          className: props.className
		        },
		        backdrop && this.renderBackdrop(),
		        dialog
		      )
		    );
		  },

		  renderBackdrop: function renderBackdrop() {
		    var _props2 = this.props;
		    var Transition = _props2.transition;
		    var backdropTransitionTimeout = _props2.backdropTransitionTimeout;

		    var backdrop = _react2['default'].createElement('div', { ref: 'backdrop',
		      style: this.props.backdropStyle,
		      className: this.props.backdropClassName,
		      onClick: this.handleBackdropClick
		    });

		    if (Transition) {
		      backdrop = _react2['default'].createElement(
		        Transition,
		        { transitionAppear: true,
		          'in': this.props.show,
		          timeout: backdropTransitionTimeout
		        },
		        backdrop
		      );
		    }

		    return backdrop;
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (nextProps.show) {
		      this.setState({ exited: false });
		    } else if (!nextProps.transition) {
		      // Otherwise let handleHidden take care of marking exited.
		      this.setState({ exited: true });
		    }
		  },

		  componentWillUpdate: function componentWillUpdate(nextProps) {
		    if (nextProps.show) {
		      this.checkForFocus();
		    }
		  },

		  componentDidMount: function componentDidMount() {
		    if (this.props.show) {
		      this.onShow();
		    }
		  },

		  componentDidUpdate: function componentDidUpdate(prevProps) {
		    var transition = this.props.transition;

		    if (prevProps.show && !this.props.show && !transition) {
		      // Otherwise handleHidden will call this.
		      this.onHide();
		    } else if (!prevProps.show && this.props.show) {
		      this.onShow();
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    var _props3 = this.props;
		    var show = _props3.show;
		    var transition = _props3.transition;

		    if (show || transition && !this.state.exited) {
		      this.onHide();
		    }
		  },

		  onShow: function onShow() {
		    var doc = _utilsOwnerDocument2['default'](this);
		    var container = _utilsGetContainer2['default'](this.props.container, doc.body);

		    modalManager.add(this, container, this.props.containerClassName);

		    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);

		    this._onFocusinListener = _utilsAddFocusListener2['default'](this.enforceFocus);

		    this.focus();

		    if (this.props.onShow) {
		      this.props.onShow();
		    }
		  },

		  onHide: function onHide() {
		    modalManager.remove(this);

		    this._onDocumentKeyupListener.remove();

		    this._onFocusinListener.remove();

		    this.restoreLastFocus();
		  },

		  setMountNode: function setMountNode(ref) {
		    this.mountNode = ref ? ref.getMountNode() : ref;
		  },

		  handleHidden: function handleHidden() {
		    this.setState({ exited: true });
		    this.onHide();

		    if (this.props.onExited) {
		      var _props4;

		      (_props4 = this.props).onExited.apply(_props4, arguments);
		    }
		  },

		  handleBackdropClick: function handleBackdropClick(e) {
		    if (e.target !== e.currentTarget) {
		      return;
		    }

		    if (this.props.onBackdropClick) {
		      this.props.onBackdropClick(e);
		    }

		    if (this.props.backdrop === true) {
		      this.props.onHide();
		    }
		  },

		  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
		    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
		      if (this.props.onEscapeKeyUp) {
		        this.props.onEscapeKeyUp(e);
		      }
		      this.props.onHide();
		    }
		  },

		  checkForFocus: function checkForFocus() {
		    if (_domHelpersUtilInDOM2['default']) {
		      this.lastFocus = _domHelpersActiveElement2['default']();
		    }
		  },

		  focus: function focus() {
		    var autoFocus = this.props.autoFocus;
		    var modalContent = this.getDialogElement();
		    var current = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
		    var focusInModal = current && _domHelpersQueryContains2['default'](modalContent, current);

		    if (modalContent && autoFocus && !focusInModal) {
		      this.lastFocus = current;

		      if (!modalContent.hasAttribute('tabIndex')) {
		        modalContent.setAttribute('tabIndex', -1);
		        _warning2['default'](false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
		      }

		      modalContent.focus();
		    }
		  },

		  restoreLastFocus: function restoreLastFocus() {
		    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
		    if (this.lastFocus && this.lastFocus.focus) {
		      this.lastFocus.focus();
		      this.lastFocus = null;
		    }
		  },

		  enforceFocus: function enforceFocus() {
		    var enforceFocus = this.props.enforceFocus;

		    if (!enforceFocus || !this.isMounted() || !this.isTopModal()) {
		      return;
		    }

		    var active = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
		    var modal = this.getDialogElement();

		    if (modal && modal !== active && !_domHelpersQueryContains2['default'](modal, active)) {
		      modal.focus();
		    }
		  },

		  //instead of a ref, which might conflict with one the parent applied.
		  getDialogElement: function getDialogElement() {
		    var node = this.refs.modal;
		    return node && node.lastChild;
		  },

		  isTopModal: function isTopModal() {
		    return modalManager.isTopModal(this);
		  }

		});

		Modal.manager = modalManager;

		exports['default'] = Modal;
		module.exports = exports['default'];

	/***/ },
	/* 206 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _common = __webpack_require__(207);

		/**
		 * Checks whether a prop provides a DOM element
		 *
		 * The element can be provided in two forms:
		 * - Directly passed
		 * - Or passed an object that has a `render` method
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
		    return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 207 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.errMsg = errMsg;
		exports.createChainableTypeChecker = createChainableTypeChecker;

		function errMsg(props, propName, componentName, msgContinuation) {
		  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
		}

		/**
		 * Create chain-able isRequired validator
		 *
		 * Largely copied directly from:
		 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
		 */

		function createChainableTypeChecker(validate) {
		  function checkType(isRequired, props, propName, componentName) {
		    componentName = componentName || '<<anonymous>>';
		    if (props[propName] == null) {
		      if (isRequired) {
		        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
		      }
		    } else {
		      return validate(props, propName, componentName);
		    }
		  }

		  var chainedCheckType = checkType.bind(null, false);
		  chainedCheckType.isRequired = checkType.bind(null, true);

		  return chainedCheckType;
		}

	/***/ },
	/* 208 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _common = __webpack_require__(207);

		/**
		 * Checks whether a prop provides a type of element.
		 *
		 * The type of element can be provided in two forms:
		 * - tag name (string)
		 * - a return value of React.createClass(...)
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

		  if (typeof props[propName] !== 'function') {
		    if (_react2['default'].isValidElement(props[propName])) {
		      return new Error(errBeginning + ', not an actual Element');
		    }

		    if (typeof props[propName] !== 'string') {
		      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
		    }
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 209 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactPropTypesLibMountable = __webpack_require__(206);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		var _utilsOwnerDocument = __webpack_require__(169);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsGetContainer = __webpack_require__(210);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		/**
		 * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
		 * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
		 * The children of `<Portal/>` component will be appended to the `container` specified.
		 */
		var Portal = _react2['default'].createClass({

		  displayName: 'Portal',

		  propTypes: {
		    /**
		     * A Node, Component instance, or function that returns either. The `container` will have the Portal children
		     * appended to it.
		     */
		    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
		  },

		  componentDidMount: function componentDidMount() {
		    this._renderOverlay();
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    this._renderOverlay();
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (this._overlayTarget && nextProps.container !== this.props.container) {
		      this._portalContainerNode.removeChild(this._overlayTarget);
		      this._portalContainerNode = _utilsGetContainer2['default'](nextProps.container, _utilsOwnerDocument2['default'](this).body);
		      this._portalContainerNode.appendChild(this._overlayTarget);
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    this._unrenderOverlay();
		    this._unmountOverlayTarget();
		  },

		  _mountOverlayTarget: function _mountOverlayTarget() {
		    if (!this._overlayTarget) {
		      this._overlayTarget = document.createElement('div');
		      this._portalContainerNode = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
		      this._portalContainerNode.appendChild(this._overlayTarget);
		    }
		  },

		  _unmountOverlayTarget: function _unmountOverlayTarget() {
		    if (this._overlayTarget) {
		      this._portalContainerNode.removeChild(this._overlayTarget);
		      this._overlayTarget = null;
		    }
		    this._portalContainerNode = null;
		  },

		  _renderOverlay: function _renderOverlay() {

		    var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

		    // Save reference for future access.
		    if (overlay !== null) {
		      this._mountOverlayTarget();
		      this._overlayInstance = _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, overlay, this._overlayTarget);
		    } else {
		      // Unrender if the component is null for transitions to null
		      this._unrenderOverlay();
		      this._unmountOverlayTarget();
		    }
		  },

		  _unrenderOverlay: function _unrenderOverlay() {
		    if (this._overlayTarget) {
		      _reactDom2['default'].unmountComponentAtNode(this._overlayTarget);
		      this._overlayInstance = null;
		    }
		  },

		  render: function render() {
		    return null;
		  },

		  getMountNode: function getMountNode() {
		    return this._overlayTarget;
		  },

		  getOverlayDOMNode: function getOverlayDOMNode() {
		    if (!this.isMounted()) {
		      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
		    }

		    if (this._overlayInstance) {
		      if (this._overlayInstance.getWrappedDOMNode) {
		        return this._overlayInstance.getWrappedDOMNode();
		      } else {
		        return _reactDom2['default'].findDOMNode(this._overlayInstance);
		      }
		    }

		    return null;
		  }

		});

		exports['default'] = Portal;
		module.exports = exports['default'];

	/***/ },
	/* 210 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = getContainer;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		function getContainer(container, defaultContainer) {
		  container = typeof container === 'function' ? container() : container;
		  return _reactDom2['default'].findDOMNode(container) || defaultContainer;
		}

		module.exports = exports['default'];

	/***/ },
	/* 211 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		var _domHelpersStyle = __webpack_require__(72);

		var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

		var _domHelpersClass = __webpack_require__(212);

		var _domHelpersClass2 = _interopRequireDefault(_domHelpersClass);

		var _domHelpersUtilScrollbarSize = __webpack_require__(204);

		var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

		var _utilsIsOverflowing = __webpack_require__(216);

		var _utilsIsOverflowing2 = _interopRequireDefault(_utilsIsOverflowing);

		var _utilsManageAriaHidden = __webpack_require__(218);

		function findIndexOf(arr, cb) {
		  var idx = -1;
		  arr.some(function (d, i) {
		    if (cb(d, i)) {
		      idx = i;
		      return true;
		    }
		  });
		  return idx;
		}

		function findContainer(data, modal) {
		  return findIndexOf(data, function (d) {
		    return d.modals.indexOf(modal) !== -1;
		  });
		}

		/**
		 * Proper state managment for containers and the modals in those containers.
		 *
		 * @internal Used by the Modal to ensure proper styling of containers.
		 */

		var ModalManager = (function () {
		  function ModalManager() {
		    var hideSiblingNodes = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

		    _classCallCheck(this, ModalManager);

		    this.hideSiblingNodes = hideSiblingNodes;
		    this.modals = [];
		    this.containers = [];
		    this.data = [];
		  }

		  ModalManager.prototype.add = function add(modal, container, className) {
		    var modalIdx = this.modals.indexOf(modal);
		    var containerIdx = this.containers.indexOf(container);

		    if (modalIdx !== -1) {
		      return modalIdx;
		    }

		    modalIdx = this.modals.length;
		    this.modals.push(modal);

		    if (this.hideSiblingNodes) {
		      _utilsManageAriaHidden.hideSiblings(container, modal.mountNode);
		    }

		    if (containerIdx !== -1) {
		      this.data[containerIdx].modals.push(modal);
		      return modalIdx;
		    }

		    var data = {
		      modals: [modal],
		      //right now only the first modal of a container will have its classes applied
		      classes: className ? className.split(/\s+/) : [],
		      //we are only interested in the actual `style` here becasue we will override it
		      style: {
		        overflow: container.style.overflow,
		        paddingRight: container.style.paddingRight
		      }
		    };

		    var style = { overflow: 'hidden' };

		    data.overflowing = _utilsIsOverflowing2['default'](container);

		    if (data.overflowing) {
		      // use computed style, here to get the real padding
		      // to add our scrollbar width
		      style.paddingRight = parseInt(_domHelpersStyle2['default'](container, 'paddingRight') || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
		    }

		    _domHelpersStyle2['default'](container, style);

		    data.classes.forEach(_domHelpersClass2['default'].addClass.bind(null, container));

		    this.containers.push(container);
		    this.data.push(data);

		    return modalIdx;
		  };

		  ModalManager.prototype.remove = function remove(modal) {
		    var modalIdx = this.modals.indexOf(modal);

		    if (modalIdx === -1) {
		      return;
		    }

		    var containerIdx = findContainer(this.data, modal);
		    var data = this.data[containerIdx];
		    var container = this.containers[containerIdx];

		    data.modals.splice(data.modals.indexOf(modal), 1);

		    this.modals.splice(modalIdx, 1);

		    // if that was the last modal in a container,
		    // clean up the container stylinhg.
		    if (data.modals.length === 0) {
		      Object.keys(data.style).forEach(function (key) {
		        return container.style[key] = data.style[key];
		      });

		      data.classes.forEach(_domHelpersClass2['default'].removeClass.bind(null, container));

		      if (this.hideSiblingNodes) {
		        _utilsManageAriaHidden.showSiblings(container, modal.mountNode);
		      }
		      this.containers.splice(containerIdx, 1);
		      this.data.splice(containerIdx, 1);
		    } else if (this.hideSiblingNodes) {
		      //otherwise make sure the next top modal is visible to a SR
		      _utilsManageAriaHidden.ariaHidden(false, data.modals[data.modals.length - 1].mountNode);
		    }
		  };

		  ModalManager.prototype.isTopModal = function isTopModal(modal) {
		    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
		  };

		  return ModalManager;
		})();

		exports['default'] = ModalManager;
		module.exports = exports['default'];

	/***/ },
	/* 212 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		module.exports = {
		  addClass: __webpack_require__(213),
		  removeClass: __webpack_require__(215),
		  hasClass: __webpack_require__(214)
		};

	/***/ },
	/* 213 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var hasClass = __webpack_require__(214);

		module.exports = function addClass(element, className) {
		  if (element.classList) element.classList.add(className);else if (!hasClass(element)) element.className = element.className + ' ' + className;
		};

	/***/ },
	/* 214 */
	/***/ function(module, exports) {

		'use strict';
		module.exports = function hasClass(element, className) {
		  if (element.classList) return !!className && element.classList.contains(className);else return (' ' + element.className + ' ').indexOf(' ' + className + ' ') !== -1;
		};

	/***/ },
	/* 215 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function removeClass(element, className) {
		  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
		};

	/***/ },
	/* 216 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = isOverflowing;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _domHelpersQueryIsWindow = __webpack_require__(217);

		var _domHelpersQueryIsWindow2 = _interopRequireDefault(_domHelpersQueryIsWindow);

		var _domHelpersOwnerDocument = __webpack_require__(87);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		function isBody(node) {
		  return node && node.tagName.toLowerCase() === 'body';
		}

		function bodyIsOverflowing(node) {
		  var doc = _domHelpersOwnerDocument2['default'](node);
		  var win = _domHelpersQueryIsWindow2['default'](doc);
		  var fullWidth = win.innerWidth;

		  // Support: ie8, no innerWidth
		  if (!fullWidth) {
		    var documentElementRect = doc.documentElement.getBoundingClientRect();
		    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
		  }

		  return doc.body.clientWidth < fullWidth;
		}

		function isOverflowing(container) {
		  var win = _domHelpersQueryIsWindow2['default'](container);

		  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
		}

		module.exports = exports['default'];

	/***/ },
	/* 217 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function getWindow(node) {
		  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
		};

	/***/ },
	/* 218 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.ariaHidden = ariaHidden;
		exports.hideSiblings = hideSiblings;
		exports.showSiblings = showSiblings;

		var BLACKLIST = ['template', 'script', 'style'];

		var isHidable = function isHidable(_ref) {
		  var nodeType = _ref.nodeType;
		  var tagName = _ref.tagName;
		  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
		};

		var siblings = function siblings(container, mount, cb) {
		  mount = [].concat(mount);

		  [].forEach.call(container.children, function (node) {
		    if (mount.indexOf(node) === -1 && isHidable(node)) {
		      cb(node);
		    }
		  });
		};

		function ariaHidden(show, node) {
		  if (!node) {
		    return;
		  }
		  if (show) {
		    node.setAttribute('aria-hidden', 'true');
		  } else {
		    node.removeAttribute('aria-hidden');
		  }
		}

		function hideSiblings(container, mountNode) {
		  siblings(container, mountNode, function (node) {
		    return ariaHidden(true, node);
		  });
		}

		function showSiblings(container, mountNode) {
		  siblings(container, mountNode, function (node) {
		    return ariaHidden(false, node);
		  });
		}

	/***/ },
	/* 219 */
	/***/ function(module, exports) {

		/**
		 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
		 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
		 *
		 * We only allow one Listener at a time to avoid stack overflows
		 */
		'use strict';

		exports.__esModule = true;
		exports['default'] = addFocusListener;

		function addFocusListener(handler) {
		  var useFocusin = !document.addEventListener;
		  var remove = undefined;

		  if (useFocusin) {
		    document.attachEvent('onfocusin', handler);
		    remove = function () {
		      return document.detachEvent('onfocusin', handler);
		    };
		  } else {
		    document.addEventListener('focus', handler, true);
		    remove = function () {
		      return document.removeEventListener('focus', handler, true);
		    };
		  }

		  return { remove: remove };
		}

		module.exports = exports['default'];

	/***/ },
	/* 220 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		/* eslint-disable react/prop-types */
		var ModalDialog = _react2['default'].createClass({
		  displayName: 'ModalDialog',

		  propTypes: {
		    /**
		     * A css class to apply to the Modal dialog DOM node.
		     */
		    dialogClassName: _react2['default'].PropTypes.string
		  },

		  render: function render() {
		    var modalStyle = _extends({
		      display: 'block'
		    }, this.props.style);
		    var bsClassPrefix = _utilsBootstrapUtils.prefix(this.props);
		    var dialogClasses = _utilsBootstrapUtils.getClassSet(this.props);

		    delete dialogClasses[bsClassPrefix];
		    dialogClasses[_utilsBootstrapUtils.prefix(this.props, 'dialog')] = true;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        title: null,
		        tabIndex: '-1',
		        role: 'dialog',
		        style: modalStyle,
		        className: _classnames2['default'](this.props.className, bsClassPrefix)
		      }),
		      _react2['default'].createElement(
		        'div',
		        { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
		        _react2['default'].createElement(
		          'div',
		          { className: _utilsBootstrapUtils.prefix(this.props, 'content'), role: 'document' },
		          this.props.children
		        )
		      )
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', ModalDialog));
		module.exports = exports['default'];

	/***/ },
	/* 221 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var ModalBody = (function (_React$Component) {
		  _inherits(ModalBody, _React$Component);

		  function ModalBody() {
		    _classCallCheck(this, ModalBody);

		    _React$Component.apply(this, arguments);
		  }

		  ModalBody.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.prefix(this.props, 'body'))
		      }),
		      this.props.children
		    );
		  };

		  return ModalBody;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalBody);
		module.exports = exports['default'];

	/***/ },
	/* 222 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var ModalHeader = (function (_React$Component) {
		  _inherits(ModalHeader, _React$Component);

		  function ModalHeader() {
		    _classCallCheck(this, ModalHeader);

		    _React$Component.apply(this, arguments);
		  }

		  ModalHeader.prototype.render = function render() {
		    var _props = this.props;
		    var label = _props['aria-label'];

		    var props = _objectWithoutProperties(_props, ['aria-label']);

		    var onHide = _utilsCreateChainedFunction2['default'](this.context.$bs_onModalHide, this.props.onHide);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.prefix(this.props, 'header'))
		      }),
		      this.props.closeButton && _react2['default'].createElement(
		        'button',
		        {
		          type: 'button',
		          className: 'close',
		          'aria-label': label,
		          onClick: onHide },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-hidden': 'true' },
		          '×'
		        )
		      ),
		      this.props.children
		    );
		  };

		  return ModalHeader;
		})(_react2['default'].Component);

		ModalHeader.propTypes = {
		  /**
		   * The 'aria-label' attribute provides an accessible label for the close button.
		   * It is used for Assistive Technology when the label text is not readable.
		   */
		  'aria-label': _react2['default'].PropTypes.string,

		  bsClass: _react2['default'].PropTypes.string,

		  /**
		   * Specify whether the Component should contain a close button
		   */
		  closeButton: _react2['default'].PropTypes.bool,

		  /**
		   * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
		   * be propagated up to the parent Modal `onHide`.
		   */
		  onHide: _react2['default'].PropTypes.func
		};

		ModalHeader.contextTypes = {
		  '$bs_onModalHide': _react2['default'].PropTypes.func
		};

		ModalHeader.defaultProps = {
		  'aria-label': 'Close',
		  closeButton: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalHeader);
		module.exports = exports['default'];

	/***/ },
	/* 223 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var ModalTitle = (function (_React$Component) {
		  _inherits(ModalTitle, _React$Component);

		  function ModalTitle() {
		    _classCallCheck(this, ModalTitle);

		    _React$Component.apply(this, arguments);
		  }

		  ModalTitle.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'h4',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.prefix(this.props, 'title'))
		      }),
		      this.props.children
		    );
		  };

		  return ModalTitle;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalTitle);
		module.exports = exports['default'];

	/***/ },
	/* 224 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var ModalFooter = (function (_React$Component) {
		  _inherits(ModalFooter, _React$Component);

		  function ModalFooter() {
		    _classCallCheck(this, ModalFooter);

		    _React$Component.apply(this, arguments);
		  }

		  ModalFooter.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.prefix(this.props, 'footer'))
		      }),
		      this.props.children
		    );
		  };

		  return ModalFooter;
		})(_react2['default'].Component);

		ModalFooter.propTypes = {
		  /**
		   * A css class applied to the Component
		   */
		  bsClass: _react2['default'].PropTypes.string
		};

		ModalFooter.defaultProps = {
		  bsClass: 'modal'
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalFooter);
		module.exports = exports['default'];

	/***/ },
	/* 225 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _keycode = __webpack_require__(89);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactPropTypesLibAll = __webpack_require__(53);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsTabUtils = __webpack_require__(226);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var Nav = (function (_React$Component) {
		  _inherits(Nav, _React$Component);

		  function Nav() {
		    _classCallCheck(this, Nav);

		    _React$Component.apply(this, arguments);
		  }

		  Nav.prototype.componentDidUpdate = function componentDidUpdate() {
		    if (this._needsRefocus) {
		      var ul = this.refs.ul && _reactDom2['default'].findDOMNode(this.refs.ul);
		      var tabs = ul ? ul.children || [] : [];
		      var tabIdx = this.eventKeys().indexOf(this.getActiveKey());

		      this._needsRefocus = false;

		      if (tabIdx !== -1) {
		        var tabNode = tabs[tabIdx];

		        if (tabNode && tabNode.firstChild) {
		          tabNode.firstChild.focus();
		        }
		      }
		    }
		  };

		  Nav.prototype.render = function render() {
		    var className = this.props.className;

		    var isNavbar = this.props.navbar != null ? this.props.navbar : this.context.$bs_navbar;

		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    classes[_utilsBootstrapUtils.prefix(this.props, 'stacked')] = this.props.stacked;
		    classes[_utilsBootstrapUtils.prefix(this.props, 'justified')] = this.props.justified;

		    if (isNavbar) {
		      var bsClass = this.context.$bs_navbar_bsClass || 'navbar';

		      classes[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'nav')] = true;
		      classes[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'right')] = this.props.pullRight;
		      classes[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'left')] = this.props.pullLeft;
		    } else {
		      classes['pull-right'] = this.props.pullRight;
		      classes['pull-left'] = this.props.pullLeft;
		    }

		    var list = _react2['default'].createElement(
		      'ul',
		      _extends({ ref: 'ul'
		      }, this.props, {
		        role: this.getNavRole(),
		        className: _classnames2['default'](className, classes)
		      }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem, this)
		    );

		    return list;
		  };

		  Nav.prototype.renderNavItem = function renderNavItem(child, index) {
		    var onSelect = _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect);
		    var active = this.isChildActive(child);
		    var tabProps = this.getTabProps(child, active, onSelect);

		    return _react.cloneElement(child, _extends({
		      active: active,
		      activeKey: this.props.activeKey,
		      activeHref: this.props.activeHref,
		      onSelect: onSelect,
		      key: child.key || index,
		      navItem: true
		    }, tabProps));
		  };

		  Nav.prototype.getActiveKey = function getActiveKey() {
		    var context = this.context.$bs_tabcontainer;
		    if (!context) {
		      return this.props.activeKey;
		    }

		     true ? _warning2['default'](!(this.props.activeKey != null || this.props.activeHref), 'Specifing a Nav `activeKey` or `activeHref` prop in the context of a `TabContainer` is not supported. ' + 'Instead use `<TabContainer activeKey={' + this.props.activeKey + '} />`') : undefined;

		    return context.activeKey;
		  };

		  Nav.prototype.isChildActive = function isChildActive(child) {
		    var activeKey = this.getActiveKey();

		    if (this.context.$bs_tabcontainer) {
		       true ? _warning2['default'](!child.props.active, 'Specifying a NavItem `active` prop in the context of a `TabContainer` is not supported. Instead ' + 'use `<TabContainer activeKey={' + child.props.eventKey + '} />`') : undefined;

		      return child.props.eventKey === activeKey;
		    }

		    if (child.props.active) {
		      return true;
		    }
		    if (this.props.activeKey != null) {
		      if (child.props.eventKey === this.props.activeKey) {
		        return true;
		      }
		    }
		    if (this.props.activeHref != null) {
		      if (child.props.href === this.props.activeHref) {
		        return true;
		      }
		    }

		    return child.props.active;
		  };

		  Nav.prototype.getTabProps = function getTabProps(child, isActive, onSelect) {
		    var navRole = this.getNavRole();
		    var context = this.context.$bs_tabcontainer;

		    if (!context && navRole !== 'tablist') {
		      // No tab props here.
		      return null;
		    }

		    var _child$props = child.props;
		    var linkId = _child$props.linkId;
		    var controls = _child$props['aria-controls'];
		    var eventKey = _child$props.eventKey;
		    var role = _child$props.role;
		    var onKeyDown = _child$props.onKeyDown;
		    var _child$props$tabIndex = _child$props.tabIndex;
		    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;

		    if (context && context.getId) {
		       true ? _warning2['default'](!(linkId || controls), 'In the context of a TabContainer, NavItems are given generated `linkId` and `aria-controls` ' + 'attributes for the sake of proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` prop to the parent TabContainer.') : undefined;

		      linkId = context.getId(eventKey, _utilsTabUtils.TAB) || null;
		      controls = context.getId(eventKey, _utilsTabUtils.PANE) || null;
		      onSelect = _utilsCreateChainedFunction2['default'](onSelect, context.onSelect);
		    }

		    if (navRole === 'tablist') {
		      role = role || 'tab';
		      onKeyDown = _utilsCreateChainedFunction2['default'](this.handleTabKeyDown.bind(this, onSelect || function () {}), onKeyDown);
		      tabIndex = isActive ? tabIndex : -1;
		    }

		    return {
		      onSelect: onSelect,
		      linkId: linkId,
		      role: role,
		      onKeyDown: onKeyDown,
		      'aria-controls': controls,
		      tabIndex: tabIndex
		    };
		  };

		  Nav.prototype.handleTabKeyDown = function handleTabKeyDown(onSelect, event) {
		    var keys = this.eventKeys();
		    var currentKey = this.getActiveKey() || keys[0];
		    var next = undefined;

		    switch (event.keyCode) {

		      case _keycode2['default'].codes.left:
		      case _keycode2['default'].codes.up:
		        next = _utilsTabUtils.nextEnabled(this.props.children, currentKey, keys, false);

		        if (next && next !== currentKey) {
		          event.preventDefault();
		          onSelect(next);
		          this._needsRefocus = true;
		        }
		        break;
		      case _keycode2['default'].codes.right:
		      case _keycode2['default'].codes.down:
		        next = _utilsTabUtils.nextEnabled(this.props.children, currentKey, keys, true);

		        if (next && next !== currentKey) {
		          event.preventDefault();
		          onSelect(next);
		          this._needsRefocus = true;
		        }
		        break;
		      default:
		    }
		  };

		  Nav.prototype.eventKeys = function eventKeys() {
		    var keys = [];
		    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref) {
		      var eventKey = _ref.props.eventKey;
		      return keys.push(eventKey);
		    });
		    return keys;
		  };

		  Nav.prototype.getNavRole = function getNavRole() {
		    return this.props.role || (this.context.$bs_tabcontainer ? 'tablist' : null);
		  };

		  return Nav;
		})(_react2['default'].Component);

		Nav.propTypes = {

		  /**
		   * Marks the child NavItem with a matching `href` prop as active.
		   */
		  activeHref: _react2['default'].PropTypes.string,

		  /**
		   * Marks the NavItem with a matching `eventKey` as active. Has a
		   * higher precedence over `activeHref`.
		   */
		  activeKey: _react2['default'].PropTypes.any,

		  /**
		   * NavItems are be positioned vertically.
		   */
		  stacked: _react2['default'].PropTypes.bool,

		  justified: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (_ref2) {
		    var justified = _ref2.justified;
		    var navbar = _ref2.navbar;
		    return justified && navbar ? Error('justified navbar `Nav`s are not supported') : null;
		  }),

		  /**
		   * A callback fired when a NavItem is selected.
		   *
		   * ```js
		   * function (
		   * 	Any eventKey,
		   * 	SyntheticEvent event?
		   * )
		   * ```
		   */
		  onSelect: _react2['default'].PropTypes.func,

		  /**
		   * CSS classes for the wrapper `nav` element
		   */
		  className: _react2['default'].PropTypes.string,
		  /**
		   * HTML id for the wrapper `nav` element
		   */
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),

		  /**
		   * ARIA role for the Nav, in the context of a TabContainer, the default will be set
		   * to "tablist", but can be overridden by the Nav when set explicitly.
		   *
		   * When the role is set to "tablist" NavItem focus is managed according to the
		   * ARIA authoring practices for tabs: https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel
		   */
		  role: _react2['default'].PropTypes.string,

		  /**
		   * Apply styling an alignment for use in a Navbar. This prop will be set
		   * automatically when the Nav is used inside a Navbar.
		   */
		  navbar: _react2['default'].PropTypes.bool,

		  /**
		   * Float the Nav to the right. When `navbar` is `true` the appropriate
		   * contextual classes are added as well.
		   */
		  pullRight: _react2['default'].PropTypes.bool,

		  /**
		   * Float the Nav to the left. When `navbar` is `true` the appropriate
		   * contextual classes are added as well.
		   */
		  pullLeft: _react2['default'].PropTypes.bool
		};

		Nav.contextTypes = {
		  $bs_navbar: _react2['default'].PropTypes.bool,
		  $bs_navbar_bsClass: _react2['default'].PropTypes.string,

		  $bs_tabcontainer: _react2['default'].PropTypes.shape({
		    activeKey: _react2['default'].PropTypes.any,
		    onSelect: _react2['default'].PropTypes.func,
		    getId: _react2['default'].PropTypes.func
		  })
		};

		Nav.defaultProps = {
		  justified: false,
		  pullRight: false,
		  pullLeft: false,
		  stacked: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('nav', _utilsBootstrapUtils.bsStyles(['tabs', 'pills'], Nav));
		module.exports = exports['default'];

	/***/ },
	/* 226 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.nextEnabled = nextEnabled;

		var _ValidComponentChildren = __webpack_require__(33);

		var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

		var findChild = _ValidComponentChildren2['default'].find;

		var TAB = 'tab';
		exports.TAB = TAB;
		var PANE = 'pane';

		exports.PANE = PANE;

		function nextEnabled(children, currentKey, keys, moveNext) {
		  var lastIdx = keys.length - 1;
		  var stopAt = keys[moveNext ? Math.max(lastIdx, 0) : 0];
		  var nextKey = currentKey;

		  function getNext() {
		    var idx = keys.indexOf(nextKey);
		    nextKey = moveNext ? keys[Math.min(lastIdx, idx + 1)] : keys[Math.max(0, idx - 1)];

		    return findChild(children, function (_child) {
		      return _child.props.eventKey === nextKey;
		    });
		  }

		  var next = getNext();

		  while (next.props.eventKey !== stopAt && next.props.disabled) {
		    next = getNext();
		  }

		  return next.props.disabled ? currentKey : next.props.eventKey;
		}

	/***/ },
	/* 227 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint react/no-multi-comp: 0 */
		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _uncontrollable = __webpack_require__(159);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Grid = __webpack_require__(178);

		var _Grid2 = _interopRequireDefault(_Grid);

		var _NavbarBrand = __webpack_require__(228);

		var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

		var _NavbarCollapse = __webpack_require__(229);

		var _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);

		var _NavbarHeader = __webpack_require__(230);

		var _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);

		var _NavbarToggle = __webpack_require__(231);

		var _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);

		var Navbar = _react2['default'].createClass({
		  displayName: 'Navbar',

		  propTypes: {
		    /**
		     * Create a fixed navbar along the top of the screen, that scrolls with the page
		     */
		    fixedTop: _react2['default'].PropTypes.bool,
		    /**
		     * Create a fixed navbar along the bottom of the screen, that scrolls with the page
		     */
		    fixedBottom: _react2['default'].PropTypes.bool,
		    /**
		     * Create a full-width navbar that scrolls away with the page
		     */
		    staticTop: _react2['default'].PropTypes.bool,
		    /**
		     * An alternative dark visual style for the Navbar
		     */
		    inverse: _react2['default'].PropTypes.bool,
		    /**
		     * Allow the Navbar to fluidly adjust to the page or container width, instead of at the
		     * predefined screen breakpoints
		     */
		    fluid: _react2['default'].PropTypes.bool,

		    /**
		     * Set a custom element for this component.
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],
		    /**
		     * A callback fired when the `<Navbar>` body collapses or expands.
		     * Fired when a `<Navbar.Toggle>` is clicked and called with the new `navExpanded` boolean value.
		     *
		     * @controllable navExpanded
		     */
		    onToggle: _react2['default'].PropTypes.func,

		    /**
		     * Explicitly set the visiblity of the navbar body
		     *
		     * @controllable onToggle
		     */
		    expanded: _react2['default'].PropTypes.bool

		  },

		  childContextTypes: {
		    $bs_navbar: _react.PropTypes.bool,
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_onToggle: _react.PropTypes.func,
		    $bs_navbar_expanded: _react.PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'nav',
		      fixedTop: false,
		      fixedBottom: false,
		      staticTop: false,
		      inverse: false,
		      fluid: false
		    };
		  },

		  getChildContext: function getChildContext() {
		    return {
		      $bs_navbar: true,
		      $bs_navbar_bsClass: this.props.bsClass,
		      $bs_navbar_onToggle: this.handleToggle,
		      $bs_navbar_expanded: this.props.expanded
		    };
		  },

		  handleToggle: function handleToggle() {
		    this.props.onToggle(!this.props.expanded);
		  },

		  isNavExpanded: function isNavExpanded() {
		    return !!this.props.expanded;
		  },

		  render: function render() {
		    var _props = this.props;
		    var fixedTop = _props.fixedTop;
		    var fixedBottom = _props.fixedBottom;
		    var staticTop = _props.staticTop;
		    var inverse = _props.inverse;
		    var ComponentClass = _props.componentClass;
		    var fluid = _props.fluid;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

		    // will result in some false positives but that seems better
		    // than false negatives. strict `undefined` check allows explicit
		    // "nulling" of the role if the user really doesn't want one
		    if (props.role === undefined && ComponentClass !== 'nav') {
		      props.role = 'navigation';
		    }

		    if (inverse) {
		      props.bsStyle = _styleMaps.INVERSE;
		    }

		    var classes = _utilsBootstrapUtils.getClassSet(props);

		    classes[_utilsBootstrapUtils.prefix(this.props, 'fixed-top')] = fixedTop;
		    classes[_utilsBootstrapUtils.prefix(this.props, 'fixed-bottom')] = fixedBottom;
		    classes[_utilsBootstrapUtils.prefix(this.props, 'static-top')] = staticTop;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, props, { className: _classnames2['default'](className, classes) }),
		      _react2['default'].createElement(
		        _Grid2['default'],
		        { fluid: fluid },
		        children
		      )
		    );
		  }
		});

		var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

		Navbar = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', _uncontrollable2['default'](Navbar, { expanded: 'onToggle' })));

		function createSimpleWrapper(tag, suffix, displayName) {
		  var wrapper = function wrapper(_ref, _ref2) {
		    var Tag = _ref.componentClass;
		    var className = _ref.className;

		    var props = _objectWithoutProperties(_ref, ['componentClass', 'className']);

		    var _classNames;

		    var _ref2$$bs_navbar_bsClass = _ref2.$bs_navbar_bsClass;
		    var bsClass = _ref2$$bs_navbar_bsClass === undefined ? 'navbar' : _ref2$$bs_navbar_bsClass;
		    return _react2['default'].createElement(Tag, _extends({}, props, {
		      className: _classnames2['default'](className, _utilsBootstrapUtils.prefix({ bsClass: bsClass }, suffix), (_classNames = {}, _classNames[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'right')] = props.pullRight, _classNames[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'left')] = props.pullLeft, _classNames))
		    }));
		  };

		  wrapper.displayName = displayName;

		  wrapper.propTypes = {
		    componentClass: _reactPropTypesLibElementType2['default'],
		    pullRight: _react2['default'].PropTypes.bool,
		    pullLeft: _react2['default'].PropTypes.bool
		  };
		  wrapper.defaultProps = {
		    componentClass: tag,
		    pullRight: false,
		    pullLeft: false
		  };

		  wrapper.contextTypes = {
		    $bs_navbar_bsClass: _react.PropTypes.string
		  };

		  return wrapper;
		}

		Navbar.Brand = _NavbarBrand2['default'];
		Navbar.Header = _NavbarHeader2['default'];
		Navbar.Toggle = _NavbarToggle2['default'];
		Navbar.Collapse = _NavbarCollapse2['default'];

		Navbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');
		Navbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');
		Navbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink');

		exports['default'] = Navbar;
		module.exports = exports['default'];

	/***/ },
	/* 228 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var NavbarBrand = (function (_React$Component) {
		  _inherits(NavbarBrand, _React$Component);

		  function NavbarBrand() {
		    _classCallCheck(this, NavbarBrand);

		    _React$Component.apply(this, arguments);
		  }

		  NavbarBrand.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['className', 'children']);

		    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

		    var brandClasses = _utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'brand');

		    if (_react2['default'].isValidElement(children)) {
		      return _react2['default'].cloneElement(children, {
		        className: _classnames2['default'](children.props.className, className, brandClasses)
		      });
		    }

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, props, { className: _classnames2['default'](className, brandClasses) }),
		      children
		    );
		  };

		  return NavbarBrand;
		})(_react2['default'].Component);

		NavbarBrand.contextTypes = {
		  $bs_navbar_bsClass: _react2['default'].PropTypes.string
		};

		exports['default'] = NavbarBrand;
		module.exports = exports['default'];

	/***/ },
	/* 229 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Collapse = __webpack_require__(71);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var NavbarCollapse = _react2['default'].createClass({
		  displayName: 'NavbarCollapse',

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_expanded: _react.PropTypes.bool
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['children']);

		    var _context = this.context;
		    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
		    var expanded = _context.$bs_navbar_expanded;

		    return _react2['default'].createElement(
		      _Collapse2['default'],
		      _extends({ 'in': expanded }, props),
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'collapse') },
		        children
		      )
		    );
		  }
		});

		exports['default'] = NavbarCollapse;
		module.exports = exports['default'];

	/***/ },
	/* 230 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var NavbarHeader = _react2['default'].createClass({
		  displayName: 'NavbarHeader',

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string
		  },

		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

		    var headerClasses = _utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'header');

		    return _react2['default'].createElement('div', _extends({}, props, { className: _classnames2['default'](className, headerClasses) }));
		  }
		});

		exports['default'] = NavbarHeader;
		module.exports = exports['default'];

	/***/ },
	/* 231 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var NavbarToggle = _react2['default'].createClass({
		  displayName: 'NavbarToggle',

		  propTypes: {
		    onClick: _react2['default'].PropTypes.func,
		    /**
		     * The toggle content, if left empty it will render the default toggle (seen above).
		     */
		    children: _react.PropTypes.node
		  },

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_onToggle: _react.PropTypes.func,
		    $bs_navbar_expanded: _react.PropTypes.bool
		  },

		  render: function render() {
		    var _props = this.props;
		    var onClick = _props.onClick;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['onClick', 'className', 'children']);

		    var _context = this.context;
		    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
		    var onToggle = _context.$bs_navbar_onToggle;
		    var expanded = _context.$bs_navbar_expanded;

		    var buttonProps = _extends({
		      type: 'button'
		    }, props, {
		      onClick: _utilsCreateChainedFunction2['default'](onClick, onToggle),
		      className: _classnames2['default'](className, _utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'toggle'), !expanded && 'collapsed')
		    });

		    if (children) {
		      return _react2['default'].createElement(
		        'button',
		        buttonProps,
		        children
		      );
		    }

		    return _react2['default'].createElement(
		      'button',
		      buttonProps,
		      _react2['default'].createElement(
		        'span',
		        { className: 'sr-only' },
		        'Toggle navigation'
		      ),
		      _react2['default'].createElement('span', { className: 'icon-bar' }),
		      _react2['default'].createElement('span', { className: 'icon-bar' }),
		      _react2['default'].createElement('span', { className: 'icon-bar' })
		    );
		  }
		});

		exports['default'] = NavbarToggle;
		module.exports = exports['default'];

	/***/ },
	/* 232 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Dropdown = __webpack_require__(85);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var NavDropdown = (function (_React$Component) {
		  _inherits(NavDropdown, _React$Component);

		  function NavDropdown() {
		    _classCallCheck(this, NavDropdown);

		    _React$Component.apply(this, arguments);
		  }

		  NavDropdown.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var title = _props.title;
		    var noCaret = _props.noCaret;

		    var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      _extends({}, props, { componentClass: 'li' }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Toggle,
		        {
		          useAnchor: true,
		          disabled: props.disabled,
		          noCaret: noCaret
		        },
		        title
		      ),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return NavDropdown;
		})(_react2['default'].Component);

		NavDropdown.propTypes = _extends({
		  noCaret: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.node.isRequired
		}, _Dropdown2['default'].propTypes);

		exports['default'] = NavDropdown;
		module.exports = exports['default'];

	/***/ },
	/* 233 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var NavItem = _react2['default'].createClass({
		  displayName: 'NavItem',

		  propTypes: {
		    active: _react2['default'].PropTypes.bool,
		    disabled: _react2['default'].PropTypes.bool,
		    role: _react2['default'].PropTypes.string,
		    href: _react2['default'].PropTypes.string,
		    onClick: _react2['default'].PropTypes.func,
		    onSelect: _react2['default'].PropTypes.func,
		    eventKey: _react2['default'].PropTypes.any
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false,
		      disabled: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var active = _props.active;
		    var disabled = _props.disabled;
		    var role = _props.role;
		    var href = _props.href;
		    var onClick = _props.onClick;
		    var className = _props.className;
		    var style = _props.style;

		    var props = _objectWithoutProperties(_props, ['active', 'disabled', 'role', 'href', 'onClick', 'className', 'style']);

		    delete props.onSelect;
		    delete props.eventKey;

		    if (!role) {
		      if (href === '#') {
		        role = 'button';
		      }
		    } else if (role === 'tab') {
		      props['aria-selected'] = active;
		    }

		    return _react2['default'].createElement(
		      'li',
		      {
		        role: 'presentation',
		        className: _classnames2['default'](className, { active: active, disabled: disabled }),
		        style: style
		      },
		      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
		        disabled: disabled,
		        role: role,
		        href: href,
		        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
		      }))
		    );
		  },

		  handleClick: function handleClick(e) {
		    if (this.props.onSelect) {
		      e.preventDefault();

		      if (!this.props.disabled) {
		        this.props.onSelect(this.props.eventKey, e);
		      }
		    }
		  }
		});

		exports['default'] = NavItem;
		module.exports = exports['default'];

	/***/ },
	/* 234 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
		/* These properties are validated in 'Portal' and 'Position' components */

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactOverlaysLibOverlay = __webpack_require__(235);

		var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Fade = __webpack_require__(173);

		var _Fade2 = _interopRequireDefault(_Fade);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Overlay = (function (_React$Component) {
		  _inherits(Overlay, _React$Component);

		  function Overlay() {
		    _classCallCheck(this, Overlay);

		    _React$Component.apply(this, arguments);
		  }

		  Overlay.prototype.render = function render() {
		    var _props = this.props;
		    var child = _props.children;
		    var transition = _props.animation;

		    var props = _objectWithoutProperties(_props, ['children', 'animation']);

		    if (transition === true) {
		      transition = _Fade2['default'];
		    }

		    if (transition === false) {
		      transition = null;
		    }

		    if (!transition) {
		      child = _react.cloneElement(child, {
		        className: _classnames2['default']('in', child.props.className)
		      });
		    }

		    return _react2['default'].createElement(
		      _reactOverlaysLibOverlay2['default'],
		      _extends({}, props, {
		        transition: transition
		      }),
		      child
		    );
		  };

		  return Overlay;
		})(_react2['default'].Component);

		Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

		  /**
		   * Set the visibility of the Overlay
		   */
		  show: _react2['default'].PropTypes.bool,
		  /**
		   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
		   */
		  rootClose: _react2['default'].PropTypes.bool,
		  /**
		   * A callback invoked by the overlay when it wishes to be hidden. Required if
		   * `rootClose` is specified.
		   */
		  onHide: _react2['default'].PropTypes.func,

		  /**
		   * Use animation
		   */
		  animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _reactPropTypesLibElementType2['default']]),

		  /**
		   * Callback fired before the Overlay transitions in
		   */
		  onEnter: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition in
		   */
		  onEntering: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning in
		   */
		  onEntered: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired right before the Overlay transitions out
		   */
		  onExit: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition out
		   */
		  onExiting: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning out
		   */
		  onExited: _react2['default'].PropTypes.func
		});

		Overlay.defaultProps = {
		  animation: _Fade2['default'],
		  rootClose: false,
		  show: false
		};

		exports['default'] = Overlay;
		module.exports = exports['default'];

	/***/ },
	/* 235 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Portal = __webpack_require__(209);

		var _Portal2 = _interopRequireDefault(_Portal);

		var _Position = __webpack_require__(236);

		var _Position2 = _interopRequireDefault(_Position);

		var _RootCloseWrapper = __webpack_require__(165);

		var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

		var _reactPropTypesLibElementType = __webpack_require__(208);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		/**
		 * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
		 */

		var Overlay = (function (_React$Component) {
		  _inherits(Overlay, _React$Component);

		  function Overlay(props, context) {
		    _classCallCheck(this, Overlay);

		    _React$Component.call(this, props, context);

		    this.state = { exited: !props.show };
		    this.onHiddenListener = this.handleHidden.bind(this);
		  }

		  Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    if (nextProps.show) {
		      this.setState({ exited: false });
		    } else if (!nextProps.transition) {
		      // Otherwise let handleHidden take care of marking exited.
		      this.setState({ exited: true });
		    }
		  };

		  Overlay.prototype.render = function render() {
		    var _props = this.props;
		    var container = _props.container;
		    var containerPadding = _props.containerPadding;
		    var target = _props.target;
		    var placement = _props.placement;
		    var shouldUpdatePosition = _props.shouldUpdatePosition;
		    var rootClose = _props.rootClose;
		    var children = _props.children;
		    var Transition = _props.transition;

		    var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'shouldUpdatePosition', 'rootClose', 'children', 'transition']);

		    // Don't un-render the overlay while it's transitioning out.
		    var mountOverlay = props.show || Transition && !this.state.exited;
		    if (!mountOverlay) {
		      // Don't bother showing anything if we don't have to.
		      return null;
		    }

		    var child = children;

		    // Position is be inner-most because it adds inline styles into the child,
		    // which the other wrappers don't forward correctly.
		    child = _react2['default'].createElement(
		      _Position2['default'],
		      { container: container, containerPadding: containerPadding, target: target, placement: placement, shouldUpdatePosition: shouldUpdatePosition },
		      child
		    );

		    if (Transition) {
		      var onExit = props.onExit;
		      var onExiting = props.onExiting;
		      var onEnter = props.onEnter;
		      var onEntering = props.onEntering;
		      var onEntered = props.onEntered;

		      // This animates the child node by injecting props, so it must precede
		      // anything that adds a wrapping div.
		      child = _react2['default'].createElement(
		        Transition,
		        {
		          'in': props.show,
		          transitionAppear: true,
		          onExit: onExit,
		          onExiting: onExiting,
		          onExited: this.onHiddenListener,
		          onEnter: onEnter,
		          onEntering: onEntering,
		          onEntered: onEntered
		        },
		        child
		      );
		    }

		    // This goes after everything else because it adds a wrapping div.
		    if (rootClose) {
		      child = _react2['default'].createElement(
		        _RootCloseWrapper2['default'],
		        { onRootClose: props.onHide },
		        child
		      );
		    }

		    return _react2['default'].createElement(
		      _Portal2['default'],
		      { container: container },
		      child
		    );
		  };

		  Overlay.prototype.handleHidden = function handleHidden() {
		    this.setState({ exited: true });

		    if (this.props.onExited) {
		      var _props2;

		      (_props2 = this.props).onExited.apply(_props2, arguments);
		    }
		  };

		  return Overlay;
		})(_react2['default'].Component);

		Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {

		  /**
		   * Set the visibility of the Overlay
		   */
		  show: _react2['default'].PropTypes.bool,

		  /**
		   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
		   */
		  rootClose: _react2['default'].PropTypes.bool,

		  /**
		   * A Callback fired by the Overlay when it wishes to be hidden.
		   *
		   * __required__ when `rootClose` is `true`.
		   *
		   * @type func
		   */
		  onHide: function onHide(props, name, cname) {
		    var pt = _react2['default'].PropTypes.func;

		    if (props.rootClose) pt = pt.isRequired;
		    return pt(props, name, cname);
		  },

		  /**
		   * A `<Transition/>` component used to animate the overlay changes visibility.
		   */
		  transition: _reactPropTypesLibElementType2['default'],

		  /**
		   * Callback fired before the Overlay transitions in
		   */
		  onEnter: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition in
		   */
		  onEntering: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning in
		   */
		  onEntered: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired right before the Overlay transitions out
		   */
		  onExit: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition out
		   */
		  onExiting: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning out
		   */
		  onExited: _react2['default'].PropTypes.func
		});

		exports['default'] = Overlay;
		module.exports = exports['default'];

	/***/ },
	/* 236 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsOwnerDocument = __webpack_require__(169);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsGetContainer = __webpack_require__(210);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		var _utilsOverlayPositionUtils = __webpack_require__(237);

		var _reactPropTypesLibMountable = __webpack_require__(206);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		/**
		 * The Position component calculates the coordinates for its child, to
		 * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
		 * the Position component injects a `style` props with `left` and `top` values for positioning your component.
		 *
		 * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
		 * a sense of directionality.
		 */

		var Position = (function (_React$Component) {
		  _inherits(Position, _React$Component);

		  function Position(props, context) {
		    _classCallCheck(this, Position);

		    _React$Component.call(this, props, context);

		    this.state = {
		      positionLeft: 0,
		      positionTop: 0,
		      arrowOffsetLeft: null,
		      arrowOffsetTop: null
		    };

		    this._needsFlush = false;
		    this._lastTarget = null;
		  }

		  Position.prototype.componentDidMount = function componentDidMount() {
		    this.updatePosition();
		  };

		  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
		    this._needsFlush = true;
		  };

		  Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		    if (this._needsFlush) {
		      this._needsFlush = false;
		      this.updatePosition(prevProps.placement !== this.props.placement);
		    }
		  };

		  Position.prototype.componentWillUnmount = function componentWillUnmount() {
		    // Probably not necessary, but just in case holding a reference to the
		    // target causes problems somewhere.
		    this._lastTarget = null;
		  };

		  Position.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['children', 'className']);

		    var _state = this.state;
		    var positionLeft = _state.positionLeft;
		    var positionTop = _state.positionTop;

		    var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

		    // These should not be forwarded to the child.
		    delete props.target;
		    delete props.container;
		    delete props.containerPadding;

		    var child = _react2['default'].Children.only(children);
		    return _react.cloneElement(child, _extends({}, props, arrowPosition, {
		      //do we need to also forward positionLeft and positionTop if they are set to style?
		      positionLeft: positionLeft,
		      positionTop: positionTop,
		      className: _classnames2['default'](className, child.props.className),
		      style: _extends({}, child.props.style, {
		        left: positionLeft,
		        top: positionTop
		      })
		    }));
		  };

		  Position.prototype.getTargetSafe = function getTargetSafe() {
		    if (!this.props.target) {
		      return null;
		    }

		    var target = this.props.target(this.props);
		    if (!target) {
		      // This is so we can just use === check below on all falsy targets.
		      return null;
		    }

		    return target;
		  };

		  Position.prototype.updatePosition = function updatePosition(placementChanged) {
		    var target = this.getTargetSafe();

		    if (!this.props.shouldUpdatePosition && target === this._lastTarget && !placementChanged) {
		      return;
		    }

		    this._lastTarget = target;

		    if (!target) {
		      this.setState({
		        positionLeft: 0,
		        positionTop: 0,
		        arrowOffsetLeft: null,
		        arrowOffsetTop: null
		      });

		      return;
		    }

		    var overlay = _reactDom2['default'].findDOMNode(this);
		    var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

		    this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
		  };

		  return Position;
		})(_react2['default'].Component);

		Position.propTypes = {
		  /**
		   * Function mapping props to a DOM node the component is positioned next to
		   *
		   */
		  target: _react2['default'].PropTypes.func,

		  /**
		   * "offsetParent" of the component
		   */
		  container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),
		  /**
		   * Minimum spacing in pixels between container border and component border
		   */
		  containerPadding: _react2['default'].PropTypes.number,
		  /**
		   * How to position the component relative to the target
		   */
		  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),
		  /**
		   * Whether the position should be changed on each update
		   */
		  shouldUpdatePosition: _react2['default'].PropTypes.bool
		};

		Position.displayName = 'Position';

		Position.defaultProps = {
		  containerPadding: 0,
		  placement: 'right',
		  shouldUpdatePosition: false
		};

		exports['default'] = Position;
		module.exports = exports['default'];

	/***/ },
	/* 237 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _ownerDocument = __webpack_require__(169);

		var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

		var _domHelpersQueryOffset = __webpack_require__(238);

		var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

		var _domHelpersQueryPosition = __webpack_require__(239);

		var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

		var _domHelpersQueryScrollTop = __webpack_require__(241);

		var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

		var utils = {

		  getContainerDimensions: function getContainerDimensions(containerNode) {
		    var width = undefined,
		        height = undefined,
		        scroll = undefined;

		    if (containerNode.tagName === 'BODY') {
		      width = window.innerWidth;
		      height = window.innerHeight;

		      scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
		    } else {
		      var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

		      width = _getOffset.width;
		      height = _getOffset.height;

		      scroll = _domHelpersQueryScrollTop2['default'](containerNode);
		    }

		    return { width: width, height: height, scroll: scroll };
		  },

		  getPosition: function getPosition(target, container) {
		    var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

		    return offset;
		  },

		  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
		    var childOffset = utils.getPosition(target, container);

		    var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

		    var overlayHeight = _getOffset2.height;
		    var overlayWidth = _getOffset2.width;

		    var positionLeft = undefined,
		        positionTop = undefined,
		        arrowOffsetLeft = undefined,
		        arrowOffsetTop = undefined;

		    if (placement === 'left' || placement === 'right') {
		      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

		      if (placement === 'left') {
		        positionLeft = childOffset.left - overlayWidth;
		      } else {
		        positionLeft = childOffset.left + childOffset.width;
		      }

		      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

		      positionTop += topDelta;
		      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
		      arrowOffsetLeft = void 0;
		    } else if (placement === 'top' || placement === 'bottom') {
		      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

		      if (placement === 'top') {
		        positionTop = childOffset.top - overlayHeight;
		      } else {
		        positionTop = childOffset.top + childOffset.height;
		      }

		      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
		      positionLeft += leftDelta;
		      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
		      arrowOffsetTop = void 0;
		    } else {
		      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
		    }

		    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
		  }
		};

		function getTopDelta(top, overlayHeight, container, padding) {
		  var containerDimensions = utils.getContainerDimensions(container);
		  var containerScroll = containerDimensions.scroll;
		  var containerHeight = containerDimensions.height;

		  var topEdgeOffset = top - padding - containerScroll;
		  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

		  if (topEdgeOffset < 0) {
		    return -topEdgeOffset;
		  } else if (bottomEdgeOffset > containerHeight) {
		    return containerHeight - bottomEdgeOffset;
		  } else {
		    return 0;
		  }
		}

		function getLeftDelta(left, overlayWidth, container, padding) {
		  var containerDimensions = utils.getContainerDimensions(container);
		  var containerWidth = containerDimensions.width;

		  var leftEdgeOffset = left - padding;
		  var rightEdgeOffset = left + padding + overlayWidth;

		  if (leftEdgeOffset < 0) {
		    return -leftEdgeOffset;
		  } else if (rightEdgeOffset > containerWidth) {
		    return containerWidth - rightEdgeOffset;
		  } else {
		    return 0;
		  }
		}
		exports['default'] = utils;
		module.exports = exports['default'];

	/***/ },
	/* 238 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var contains = __webpack_require__(88),
		    getWindow = __webpack_require__(217),
		    ownerDocument = __webpack_require__(87);

		module.exports = function offset(node) {
		  var doc = ownerDocument(node),
		      win = getWindow(doc),
		      docElem = doc && doc.documentElement,
		      box = { top: 0, left: 0, height: 0, width: 0 };

		  if (!doc) return;

		  // Make sure it's not a disconnected DOM node
		  if (!contains(docElem, node)) return box;

		  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

		  if (box.width || box.height) {

		    box = {
		      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
		      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
		      width: (box.width == null ? node.offsetWidth : box.width) || 0,
		      height: (box.height == null ? node.offsetHeight : box.height) || 0
		    };
		  }

		  return box;
		};

	/***/ },
	/* 239 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(78);

		exports.__esModule = true;
		exports['default'] = position;

		var _offset = __webpack_require__(238);

		var _offset2 = babelHelpers.interopRequireDefault(_offset);

		var _offsetParent = __webpack_require__(240);

		var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

		var _scrollTop = __webpack_require__(241);

		var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

		var _scrollLeft = __webpack_require__(242);

		var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

		var _style = __webpack_require__(72);

		var _style2 = babelHelpers.interopRequireDefault(_style);

		function nodeName(node) {
		  return node.nodeName && node.nodeName.toLowerCase();
		}

		function position(node, offsetParent) {
		  var parentOffset = { top: 0, left: 0 },
		      offset;

		  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		  // because it is its only offset parent
		  if ((0, _style2['default'])(node, 'position') === 'fixed') {
		    offset = node.getBoundingClientRect();
		  } else {
		    offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
		    offset = (0, _offset2['default'])(node);

		    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

		    parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
		    parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
		  }

		  // Subtract parent offsets and node margins
		  return babelHelpers._extends({}, offset, {
		    top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
		    left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
		  });
		}

		module.exports = exports['default'];

	/***/ },
	/* 240 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(78);

		exports.__esModule = true;
		exports['default'] = offsetParent;

		var _ownerDocument = __webpack_require__(87);

		var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

		var _style = __webpack_require__(72);

		var _style2 = babelHelpers.interopRequireDefault(_style);

		function nodeName(node) {
		  return node.nodeName && node.nodeName.toLowerCase();
		}

		function offsetParent(node) {
		  var doc = (0, _ownerDocument2['default'])(node),
		      offsetParent = node && node.offsetParent;

		  while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
		    offsetParent = offsetParent.offsetParent;
		  }

		  return offsetParent || doc.documentElement;
		}

		module.exports = exports['default'];

	/***/ },
	/* 241 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var getWindow = __webpack_require__(217);

		module.exports = function scrollTop(node, val) {
		  var win = getWindow(node);

		  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

		  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
		};

	/***/ },
	/* 242 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var getWindow = __webpack_require__(217);

		module.exports = function scrollTop(node, val) {
		  var win = getWindow(node);

		  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

		  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
		};

	/***/ },
	/* 243 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint-disable react/prop-types */

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _domHelpersQueryContains = __webpack_require__(88);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _lodashCompatObjectPick = __webpack_require__(172);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(65);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _Overlay = __webpack_require__(234);

		var _Overlay2 = _interopRequireDefault(_Overlay);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		/**
		 * Check if value one is inside or equal to the of value
		 *
		 * @param {string} one
		 * @param {string|array} of
		 * @returns {boolean}
		 */
		function isOneOf(one, of) {
		  if (Array.isArray(of)) {
		    return of.indexOf(one) >= 0;
		  }
		  return one === of;
		}

		var OverlayTrigger = _react2['default'].createClass({
		  displayName: 'OverlayTrigger',

		  propTypes: _extends({}, _Overlay2['default'].propTypes, {

		    /**
		    * Specify which action or actions trigger Overlay visibility
		    */
		    trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

		    /**
		     * A millisecond delay amount to show and hide the Overlay once triggered
		     */
		    delay: _react2['default'].PropTypes.number,
		    /**
		     * A millisecond delay amount before showing the Overlay once triggered.
		     */
		    delayShow: _react2['default'].PropTypes.number,
		    /**
		     * A millisecond delay amount before hiding the Overlay once triggered.
		     */
		    delayHide: _react2['default'].PropTypes.number,

		    /**
		     * The initial visibility state of the Overlay, for more nuanced visibility controll consider
		     * using the Overlay component directly.
		     */
		    defaultOverlayShown: _react2['default'].PropTypes.bool,

		    /**
		     * An element or text to overlay next to the target.
		     */
		    overlay: _react2['default'].PropTypes.node.isRequired,

		    /**
		     * @private
		     */
		    onBlur: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onClick: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onFocus: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onMouseEnter: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onMouseLeave: _react2['default'].PropTypes.func,

		    // override specific overlay props
		    /**
		     * @private
		     */
		    target: function target() {},
		    /**
		    * @private
		    */
		    onHide: function onHide() {},
		    /**
		     * @private
		     */
		    show: function show() {}
		  }),

		  getDefaultProps: function getDefaultProps() {
		    return {
		      defaultOverlayShown: false,
		      trigger: ['hover', 'focus']
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      isOverlayShown: this.props.defaultOverlayShown
		    };
		  },

		  show: function show() {
		    this.setState({
		      isOverlayShown: true
		    });
		  },

		  hide: function hide() {
		    this.setState({
		      isOverlayShown: false
		    });
		  },

		  toggle: function toggle() {
		    if (this.state.isOverlayShown) {
		      this.hide();
		    } else {
		      this.show();
		    }
		  },

		  componentWillMount: function componentWillMount() {
		    this.handleMouseOver = this.handleMouseOverOut.bind(null, this.handleDelayedShow);
		    this.handleMouseOut = this.handleMouseOverOut.bind(null, this.handleDelayedHide);
		  },

		  componentDidMount: function componentDidMount() {
		    this._mountNode = document.createElement('div');
		    this.renderOverlay();
		  },

		  renderOverlay: function renderOverlay() {
		    _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    _reactDom2['default'].unmountComponentAtNode(this._mountNode);
		    this._mountNode = null;
		    clearTimeout(this._hoverShowDelay);
		    clearTimeout(this._hoverHideDelay);
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    if (this._mountNode) {
		      this.renderOverlay();
		    }
		  },

		  getOverlayTarget: function getOverlayTarget() {
		    return _reactDom2['default'].findDOMNode(this);
		  },

		  getOverlay: function getOverlay() {
		    var overlayProps = _extends({}, _lodashCompatObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
		      show: this.state.isOverlayShown,
		      onHide: this.hide,
		      target: this.getOverlayTarget,
		      onExit: this.props.onExit,
		      onExiting: this.props.onExiting,
		      onExited: this.props.onExited,
		      onEnter: this.props.onEnter,
		      onEntering: this.props.onEntering,
		      onEntered: this.props.onEntered
		    });

		    var overlay = _react.cloneElement(this.props.overlay, {
		      placement: overlayProps.placement,
		      container: overlayProps.container
		    });

		    return _react2['default'].createElement(
		      _Overlay2['default'],
		      overlayProps,
		      overlay
		    );
		  },

		  render: function render() {
		    var trigger = _react2['default'].Children.only(this.props.children);
		    var triggerProps = trigger.props;

		    var props = {
		      'aria-describedby': this.props.overlay.props.id
		    };

		    // create in render otherwise owner is lost...
		    this._overlay = this.getOverlay();

		    props.onClick = _utilsCreateChainedFunction2['default'](triggerProps.onClick, this.props.onClick);

		    if (isOneOf('click', this.props.trigger)) {
		      props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
		    }

		    if (isOneOf('hover', this.props.trigger)) {
		       true ? _warning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : undefined;

		      props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleMouseOver, this.props.onMouseOver, triggerProps.onMouseOver);
		      props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleMouseOut, this.props.onMouseOut, triggerProps.onMouseOut);
		    }

		    if (isOneOf('focus', this.props.trigger)) {
		      props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus, triggerProps.onFocus);
		      props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur, triggerProps.onBlur);
		    }

		    return _react.cloneElement(trigger, props);
		  },

		  handleDelayedShow: function handleDelayedShow() {
		    var _this = this;

		    if (this._hoverHideDelay != null) {
		      clearTimeout(this._hoverHideDelay);
		      this._hoverHideDelay = null;
		      return;
		    }

		    if (this.state.isOverlayShown || this._hoverShowDelay != null) {
		      return;
		    }

		    var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

		    if (!delay) {
		      this.show();
		      return;
		    }

		    this._hoverShowDelay = setTimeout(function () {
		      _this._hoverShowDelay = null;
		      _this.show();
		    }, delay);
		  },

		  handleDelayedHide: function handleDelayedHide() {
		    var _this2 = this;

		    if (this._hoverShowDelay != null) {
		      clearTimeout(this._hoverShowDelay);
		      this._hoverShowDelay = null;
		      return;
		    }

		    if (!this.state.isOverlayShown || this._hoverHideDelay != null) {
		      return;
		    }

		    var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

		    if (!delay) {
		      this.hide();
		      return;
		    }

		    this._hoverHideDelay = setTimeout(function () {
		      _this2._hoverHideDelay = null;
		      _this2.hide();
		    }, delay);
		  },

		  // Simple implementation of mouseEnter and mouseLeave.
		  // React's built version is broken: https://github.com/facebook/react/issues/4251
		  // for cases when the trigger is disabled and mouseOut/Over can cause flicker moving
		  // from one child element to another.
		  handleMouseOverOut: function handleMouseOverOut(handler, e) {
		    var target = e.currentTarget;
		    var related = e.relatedTarget || e.nativeEvent.toElement;

		    if (!related || related !== target && !_domHelpersQueryContains2['default'](target, related)) {
		      handler(e);
		    }
		  }

		});

		exports['default'] = OverlayTrigger;
		module.exports = exports['default'];

	/***/ },
	/* 244 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var PageHeader = _react2['default'].createClass({
		  displayName: 'PageHeader',

		  render: function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
		      _react2['default'].createElement(
		        'h1',
		        null,
		        this.props.children
		      )
		    );
		  }
		});

		exports['default'] = PageHeader;
		module.exports = exports['default'];

	/***/ },
	/* 245 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var PageItem = _react2['default'].createClass({
		  displayName: 'PageItem',

		  propTypes: {
		    disabled: _react2['default'].PropTypes.bool,
		    previous: _react2['default'].PropTypes.bool,
		    next: _react2['default'].PropTypes.bool,
		    onClick: _react2['default'].PropTypes.func,
		    onSelect: _react2['default'].PropTypes.func,
		    eventKey: _react2['default'].PropTypes.any
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      disabled: false,
		      previous: false,
		      next: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var disabled = _props.disabled;
		    var previous = _props.previous;
		    var next = _props.next;
		    var onClick = _props.onClick;
		    var className = _props.className;
		    var style = _props.style;

		    var props = _objectWithoutProperties(_props, ['disabled', 'previous', 'next', 'onClick', 'className', 'style']);

		    delete props.onSelect;
		    delete props.eventKey;

		    return _react2['default'].createElement(
		      'li',
		      {
		        className: _classnames2['default'](className, { disabled: disabled, previous: previous, next: next }),
		        style: style
		      },
		      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
		        disabled: disabled,
		        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleSelect)
		      }))
		    );
		  },

		  handleSelect: function handleSelect(e) {
		    if (this.props.onSelect || this.props.disabled) {
		      e.preventDefault();

		      if (!this.props.disabled) {
		        this.props.onSelect(this.props.eventKey, e);
		      }
		    }
		  }
		});

		exports['default'] = PageItem;
		module.exports = exports['default'];

	/***/ },
	/* 246 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var Pager = _react2['default'].createClass({
		  displayName: 'Pager',

		  propTypes: {
		    onSelect: _react2['default'].PropTypes.func
		  },

		  render: function render() {
		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'pager') }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
		    );
		  },

		  renderPageItem: function renderPageItem(child, index) {
		    return _react.cloneElement(child, {
		      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
		      key: child.key ? child.key : index
		    });
		  }
		});

		exports['default'] = Pager;
		module.exports = exports['default'];

	/***/ },
	/* 247 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _PaginationButton = __webpack_require__(248);

		var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var Pagination = _react2['default'].createClass({
		  displayName: 'Pagination',

		  propTypes: {
		    activePage: _react2['default'].PropTypes.number,
		    items: _react2['default'].PropTypes.number,
		    maxButtons: _react2['default'].PropTypes.number,
		    /**
		     * When `true`, will display the first and the last button page
		     */
		    boundaryLinks: _react2['default'].PropTypes.bool,
		    /**
		     * When `true`, will display the default node value ('&hellip;').
		     * Otherwise, will display provided node (when specified).
		     */
		    ellipsis: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&laquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    first: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&raquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    last: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&lsaquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    prev: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&rsaquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    next: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    onSelect: _react2['default'].PropTypes.func,
		    /**
		     * You can use a custom element for the buttons
		     */
		    buttonComponentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      activePage: 1,
		      items: 1,
		      maxButtons: 0,
		      first: false,
		      last: false,
		      prev: false,
		      next: false,
		      ellipsis: true,
		      boundaryLinks: false,
		      buttonComponentClass: _SafeAnchor2['default'],
		      bsClass: 'pagination'
		    };
		  },

		  renderPageButtons: function renderPageButtons() {
		    var pageButtons = [];
		    var startPage = undefined,
		        endPage = undefined,
		        hasHiddenPagesAfter = undefined;
		    var _props = this.props;
		    var maxButtons = _props.maxButtons;
		    var activePage = _props.activePage;
		    var items = _props.items;
		    var onSelect = _props.onSelect;
		    var ellipsis = _props.ellipsis;
		    var buttonComponentClass = _props.buttonComponentClass;
		    var boundaryLinks = _props.boundaryLinks;

		    if (maxButtons) {
		      var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
		      startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
		      hasHiddenPagesAfter = startPage + maxButtons <= items;

		      if (!hasHiddenPagesAfter) {
		        endPage = items;
		        startPage = items - maxButtons + 1;
		        if (startPage < 1) {
		          startPage = 1;
		        }
		      } else {
		        endPage = startPage + maxButtons - 1;
		      }
		    } else {
		      startPage = 1;
		      endPage = items;
		    }

		    for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
		      pageButtons.push(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: pagenumber,
		          eventKey: pagenumber,
		          active: pagenumber === activePage,
		          onSelect: onSelect,
		          buttonComponentClass: buttonComponentClass
		        },
		        pagenumber
		      ));
		    }

		    if (boundaryLinks && ellipsis && startPage !== 1) {
		      pageButtons.unshift(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 'ellipsisFirst',
		          disabled: true,
		          buttonComponentClass: buttonComponentClass
		        },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-label': 'More' },
		          this.props.ellipsis === true ? '…' : this.props.ellipsis
		        )
		      ));

		      pageButtons.unshift(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 1,
		          eventKey: 1,
		          active: false,
		          onSelect: onSelect,
		          buttonComponentClass: buttonComponentClass
		        },
		        '1'
		      ));
		    }

		    if (maxButtons && hasHiddenPagesAfter && ellipsis) {
		      pageButtons.push(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 'ellipsis',
		          disabled: true,
		          buttonComponentClass: buttonComponentClass
		        },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-label': 'More' },
		          this.props.ellipsis === true ? '…' : this.props.ellipsis
		        )
		      ));

		      if (boundaryLinks && endPage !== items) {
		        pageButtons.push(_react2['default'].createElement(
		          _PaginationButton2['default'],
		          {
		            key: items,
		            eventKey: items,
		            active: false,
		            onSelect: onSelect,
		            buttonComponentClass: buttonComponentClass
		          },
		          items
		        ));
		      }
		    }

		    return pageButtons;
		  },

		  renderPrev: function renderPrev() {
		    if (!this.props.prev) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'prev',
		        eventKey: this.props.activePage - 1,
		        disabled: this.props.activePage === 1,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass
		      },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Previous' },
		        this.props.prev === true ? '‹' : this.props.prev
		      )
		    );
		  },

		  renderNext: function renderNext() {
		    if (!this.props.next) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'next',
		        eventKey: this.props.activePage + 1,
		        disabled: this.props.activePage >= this.props.items,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass
		      },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Next' },
		        this.props.next === true ? '›' : this.props.next
		      )
		    );
		  },

		  renderFirst: function renderFirst() {
		    if (!this.props.first) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'first',
		        eventKey: 1,
		        disabled: this.props.activePage === 1,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass
		      },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'First' },
		        this.props.first === true ? '«' : this.props.first
		      )
		    );
		  },

		  renderLast: function renderLast() {
		    if (!this.props.last) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'last',
		        eventKey: this.props.items,
		        disabled: this.props.activePage >= this.props.items,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass
		      },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Last' },
		        this.props.last === true ? '»' : this.props.last
		      )
		    );
		  },

		  render: function render() {
		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.getClassSet(this.props))
		      }),
		      this.renderFirst(),
		      this.renderPrev(),
		      this.renderPageButtons(),
		      this.renderNext(),
		      this.renderLast()
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('pagination', Pagination);
		module.exports = exports['default'];

	/***/ },
	/* 248 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var PaginationButton = _react2['default'].createClass({
		  displayName: 'PaginationButton',

		  propTypes: {
		    className: _react2['default'].PropTypes.string,
		    eventKey: _react2['default'].PropTypes.any,
		    onSelect: _react2['default'].PropTypes.func,
		    disabled: _react2['default'].PropTypes.bool,
		    active: _react2['default'].PropTypes.bool,
		    onClick: _react2['default'].PropTypes.func,
		    /**
		     * You can use a custom element for this component
		     */
		    buttonComponentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false,
		      disabled: false
		    };
		  },

		  handleClick: function handleClick(event) {
		    if (this.props.disabled) {
		      return;
		    }

		    if (this.props.onSelect) {
		      this.props.onSelect(this.props.eventKey, event);
		    }
		  },

		  render: function render() {
		    var _props = this.props;
		    var active = _props.active;
		    var disabled = _props.disabled;
		    var onClick = _props.onClick;
		    var ButtonComponentClass = _props.buttonComponentClass;
		    var className = _props.className;
		    var style = _props.style;

		    var props = _objectWithoutProperties(_props, ['active', 'disabled', 'onClick', 'buttonComponentClass', 'className', 'style']);

		    delete props.onSelect;
		    delete props.eventKey;

		    return _react2['default'].createElement(
		      'li',
		      {
		        className: _classnames2['default'](className, { active: active, disabled: disabled }),
		        style: style
		      },
		      _react2['default'].createElement(ButtonComponentClass, _extends({}, props, {
		        disabled: disabled,
		        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
		      }))
		    );
		  }
		});

		exports['default'] = PaginationButton;
		module.exports = exports['default'];

	/***/ },
	/* 249 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _Collapse = __webpack_require__(71);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var Panel = _react2['default'].createClass({
		  displayName: 'Panel',

		  propTypes: {
		    collapsible: _react2['default'].PropTypes.bool,
		    onSelect: _react2['default'].PropTypes.func,
		    header: _react2['default'].PropTypes.node,
		    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    footer: _react2['default'].PropTypes.node,
		    defaultExpanded: _react2['default'].PropTypes.bool,
		    expanded: _react2['default'].PropTypes.bool,
		    eventKey: _react2['default'].PropTypes.any,
		    headerRole: _react2['default'].PropTypes.string,
		    panelRole: _react2['default'].PropTypes.string,

		    onEnter: _Collapse2['default'].propTypes.onEnter,
		    onEntering: _Collapse2['default'].propTypes.onEntering,
		    onEntered: _Collapse2['default'].propTypes.onEntered,
		    onExit: _Collapse2['default'].propTypes.onExit,
		    onExiting: _Collapse2['default'].propTypes.onExiting,
		    onExited: _Collapse2['default'].propTypes.onExited
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      defaultExpanded: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      expanded: this.props.defaultExpanded
		    };
		  },

		  handleSelect: function handleSelect(e) {
		    e.selected = true;

		    if (this.props.onSelect) {
		      this.props.onSelect(this.props.eventKey, e);
		    } else {
		      e.preventDefault();
		    }

		    if (e.selected) {
		      this.handleToggle();
		    }
		  },

		  handleToggle: function handleToggle() {
		    this.setState({ expanded: !this.state.expanded });
		  },

		  isExpanded: function isExpanded() {
		    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
		  },

		  render: function render() {
		    var _props = this.props;
		    var headerRole = _props.headerRole;
		    var panelRole = _props.panelRole;

		    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.getClassSet(this.props)),
		        id: this.props.collapsible ? null : this.props.id, onSelect: null
		      }),
		      this.renderHeading(headerRole),
		      this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
		      this.renderFooter()
		    );
		  },

		  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
		    var collapseProps = {
		      onEnter: this.props.onEnter,
		      onEntering: this.props.onEntering,
		      onEntered: this.props.onEntered,
		      onExit: this.props.onExit,
		      onExiting: this.props.onExiting,
		      onExited: this.props.onExited,
		      'in': this.isExpanded()
		    };
		    var props = {
		      className: _utilsBootstrapUtils.prefix(this.props, 'collapse'),
		      id: this.props.id,
		      ref: 'panel',
		      'aria-hidden': !this.isExpanded()
		    };
		    if (panelRole) {
		      props.role = panelRole;
		    }

		    return _react2['default'].createElement(
		      _Collapse2['default'],
		      collapseProps,
		      _react2['default'].createElement(
		        'div',
		        props,
		        this.renderBody()
		      )
		    );
		  },

		  renderBody: function renderBody() {
		    var _this = this;

		    var allChildren = this.props.children;
		    var bodyElements = [];
		    var panelBodyChildren = [];
		    var bodyClass = _utilsBootstrapUtils.prefix(this.props, 'body');

		    function getProps() {
		      return { key: bodyElements.length };
		    }

		    function addPanelChild(child) {
		      bodyElements.push(_react.cloneElement(child, getProps()));
		    }

		    function addPanelBody(children) {
		      bodyElements.push(_react2['default'].createElement(
		        'div',
		        _extends({ className: bodyClass }, getProps()),
		        children
		      ));
		    }

		    function maybeRenderPanelBody() {
		      if (panelBodyChildren.length === 0) {
		        return;
		      }

		      addPanelBody(panelBodyChildren);
		      panelBodyChildren = [];
		    }

		    // Handle edge cases where we should not iterate through children.
		    if (!Array.isArray(allChildren) || allChildren.length === 0) {
		      if (this.shouldRenderFill(allChildren)) {
		        addPanelChild(allChildren);
		      } else {
		        addPanelBody(allChildren);
		      }
		    } else {
		      allChildren.forEach(function (child) {
		        if (_this.shouldRenderFill(child)) {
		          maybeRenderPanelBody();

		          // Separately add the filled element.
		          addPanelChild(child);
		        } else {
		          panelBodyChildren.push(child);
		        }
		      });

		      maybeRenderPanelBody();
		    }

		    return bodyElements;
		  },

		  shouldRenderFill: function shouldRenderFill(child) {
		    return _react2['default'].isValidElement(child) && child.props.fill != null;
		  },

		  renderHeading: function renderHeading(headerRole) {
		    var header = this.props.header;

		    if (!header) {
		      return null;
		    }

		    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
		      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
		    } else {
		      var className = _classnames2['default'](_utilsBootstrapUtils.prefix(this.props, 'title'), header.props.className);

		      if (this.props.collapsible) {
		        header = _react.cloneElement(header, {
		          className: className,
		          children: this.renderAnchor(header.props.children, headerRole)
		        });
		      } else {
		        header = _react.cloneElement(header, { className: className });
		      }
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _utilsBootstrapUtils.prefix(this.props, 'heading') },
		      header
		    );
		  },

		  renderAnchor: function renderAnchor(header, headerRole) {
		    return _react2['default'].createElement(
		      'a',
		      {
		        href: '#' + (this.props.id || ''),
		        'aria-controls': this.props.collapsible ? this.props.id : null,
		        className: this.isExpanded() ? null : 'collapsed',
		        'aria-expanded': this.isExpanded(),
		        'aria-selected': this.isExpanded(),
		        onClick: this.handleSelect,
		        role: headerRole
		      },
		      header
		    );
		  },

		  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
		    return _react2['default'].createElement(
		      'h4',
		      { className: _utilsBootstrapUtils.prefix(this.props, 'title'), role: 'presentation' },
		      this.renderAnchor(header, headerRole)
		    );
		  },

		  renderFooter: function renderFooter() {
		    if (!this.props.footer) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _utilsBootstrapUtils.prefix(this.props, 'footer') },
		      this.props.footer
		    );
		  }
		});

		var PANEL_STATES = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY);

		exports['default'] = _utilsBootstrapUtils.bsStyles(PANEL_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('panel', Panel));
		module.exports = exports['default'];

	/***/ },
	/* 250 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(158);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var Popover = _react2['default'].createClass({
		  displayName: 'Popover',

		  propTypes: {

		    /**
		     * An html id attribute, necessary for accessibility
		     * @type {string}
		     * @required
		     */
		    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		    /**
		     * Sets the direction the Popover is positioned towards.
		     */
		    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

		    /**
		     * The "left" position value for the Popover.
		     */
		    positionLeft: _react2['default'].PropTypes.number,
		    /**
		     * The "top" position value for the Popover.
		     */
		    positionTop: _react2['default'].PropTypes.number,
		    /**
		     * The "left" position value for the Popover arrow.
		     */
		    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * The "top" position value for the Popover arrow.
		     */
		    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * Title text
		     */
		    title: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      placement: 'right',
		      bsClass: 'popover'
		    };
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

		    var style = _extends({
		      left: this.props.positionLeft,
		      top: this.props.positionTop,
		      display: 'block'
		    }, this.props.style);

		    // eslint-disable-line react/prop-types
		    var arrowStyle = {
		      left: this.props.arrowOffsetLeft,
		      top: this.props.arrowOffsetTop
		    };

		    return _react2['default'].createElement(
		      'div',
		      _extends({
		        role: 'tooltip'
		      }, this.props, {
		        className: _classnames2['default'](this.props.className, classes),
		        style: style,
		        title: null
		      }),
		      _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
		      this.props.title ? this.renderTitle() : null,
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils.prefix(this.props, 'content') },
		        this.props.children
		      )
		    );
		  },

		  renderTitle: function renderTitle() {
		    return _react2['default'].createElement(
		      'h3',
		      { className: _utilsBootstrapUtils.prefix(this.props, 'title') },
		      this.props.title
		    );
		  }
		});

		exports['default'] = Popover;
		module.exports = exports['default'];
		// we don't want to expose the `style` property

	/***/ },
	/* 251 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsDeprecationWarning = __webpack_require__(60);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _Interpolate = __webpack_require__(187);

		var _Interpolate2 = _interopRequireDefault(_Interpolate);

		/**
		 * Custom propTypes checker
		 */
		function onlyProgressBar(props, propName, componentName) {
		  if (props[propName]) {
		    var _ret = (function () {
		      var error = undefined,
		          childIdentifier = undefined;

		      _react2['default'].Children.forEach(props[propName], function (child) {
		        if (child.type !== ProgressBar) {
		          //eslint-disable-line
		          childIdentifier = child.type.displayName ? child.type.displayName : child.type;
		          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
		        }
		      });

		      return {
		        v: error
		      };
		    })();

		    if (typeof _ret === 'object') return _ret.v;
		  }
		}

		var ProgressBar = (function (_React$Component) {
		  _inherits(ProgressBar, _React$Component);

		  function ProgressBar() {
		    _classCallCheck(this, ProgressBar);

		    _React$Component.apply(this, arguments);
		  }

		  ProgressBar.prototype.getPercentage = function getPercentage(now, min, max) {
		    var roundPrecision = 1000;
		    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
		  };

		  ProgressBar.prototype.render = function render() {
		    if (this.props.isChild) {
		      return this.renderProgressBar();
		    }

		    var content = undefined;

		    if (this.props.children) {
		      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
		    } else {
		      content = this.renderProgressBar();
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'progress'),
		        min: null,
		        max: null,
		        label: null,
		        'aria-valuetext': null
		      }),
		      content
		    );
		  };

		  ProgressBar.prototype.renderChildBar = function renderChildBar(child, index) {
		    return _react.cloneElement(child, {
		      isChild: true,
		      key: child.key ? child.key : index
		    });
		  };

		  ProgressBar.prototype.renderProgressBar = function renderProgressBar() {
		    var _classNames;

		    var _props = this.props;
		    var className = _props.className;
		    var label = _props.label;
		    var now = _props.now;
		    var min = _props.min;
		    var max = _props.max;
		    var style = _props.style;

		    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max', 'style']);

		    var percentage = this.getPercentage(now, min, max);

		    if (typeof label === 'string') {
		      label = this.renderLabel(percentage);
		    }

		    if (this.props.srOnly) {
		      label = _react2['default'].createElement(
		        'span',
		        { className: 'sr-only' },
		        label
		      );
		    }

		    var classes = _classnames2['default'](className, _utilsBootstrapUtils.getClassSet(this.props), (_classNames = {
		      active: this.props.active
		    }, _classNames[_utilsBootstrapUtils.prefix(this.props, 'striped')] = this.props.active || this.props.striped, _classNames));

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: classes,
		        role: 'progressbar',
		        style: _extends({ width: percentage + '%' }, style),
		        'aria-valuenow': this.props.now,
		        'aria-valuemin': this.props.min,
		        'aria-valuemax': this.props.max
		      }),
		      label
		    );
		  };

		  ProgressBar.prototype.renderLabel = function renderLabel(percentage) {
		    var _props2 = this.props;
		    var interpolateClass = _props2.interpolateClass;
		    var now = _props2.now;
		    var min = _props2.min;
		    var max = _props2.max;
		    var bsStyle = _props2.bsStyle;
		    var label = _props2.label;

		    var InterpolateClass = interpolateClass || _Interpolate2['default'];

		    var REGEXP = InterpolateClass.REGEXP;

		    if (REGEXP && REGEXP.exec(label)) {
		      _utilsDeprecationWarning2['default']('String interpolation in <ProgressBar label>', 'ES2015 template strings or other patterns');
		    }

		    return _react2['default'].createElement(
		      InterpolateClass,
		      {
		        now: now,
		        min: min,
		        max: max,
		        percent: percentage,
		        bsStyle: bsStyle
		      },
		      label
		    );
		  };

		  return ProgressBar;
		})(_react2['default'].Component);

		ProgressBar.propTypes = {
		  min: _react.PropTypes.number,
		  now: _react.PropTypes.number,
		  max: _react.PropTypes.number,
		  label: _react.PropTypes.node,
		  srOnly: _react.PropTypes.bool,
		  striped: _react.PropTypes.bool,
		  active: _react.PropTypes.bool,
		  children: onlyProgressBar,
		  className: _react2['default'].PropTypes.string,
		  interpolateClass: _react.PropTypes.node,
		  /**
		   * @private
		   */
		  isChild: _react.PropTypes.bool
		};

		ProgressBar.defaultProps = {
		  min: 0,
		  max: 100,
		  active: false,
		  isChild: false,
		  srOnly: false,
		  striped: false
		};

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('progress-bar', ProgressBar));
		module.exports = exports['default'];

	/***/ },
	/* 252 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var propTypes = {
		  inline: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  /**
		   * Only valid if `inline` is not set.
		   */
		  validationState: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error'])
		};

		var defaultProps = {
		  inline: false,
		  disabled: false
		};

		var Radio = (function (_React$Component) {
		  _inherits(Radio, _React$Component);

		  function Radio() {
		    _classCallCheck(this, Radio);

		    _React$Component.apply(this, arguments);
		  }

		  Radio.prototype.render = function render() {
		    var _props = this.props;
		    var inline = _props.inline;
		    var disabled = _props.disabled;
		    var validationState = _props.validationState;
		    var className = _props.className;
		    var style = _props.style;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['inline', 'disabled', 'validationState', 'className', 'style', 'children']);

		    delete props.bsClass;

		    if (inline) {
		      var _classes;

		      var _classes2 = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props, 'inline')] = true, _classes.disabled = disabled, _classes);

		      // Use a warning here instead of in propTypes to get better-looking
		      // generated documentation.
		       true ? _warning2['default'](!validationState, '`validationState` is ignored on `<Radio inline>`. To display ' + 'validation state on an inline radio, set `validationState` on a ' + 'parent `<FormGroup>` or other element instead.') : undefined;

		      return _react2['default'].createElement(
		        'label',
		        { className: _classnames2['default'](className, _classes2), style: style },
		        _react2['default'].createElement('input', _extends({}, props, { type: 'radio', disabled: disabled })),
		        children
		      );
		    }

		    var classes = _extends({}, _utilsBootstrapUtils.getClassSet(this.props), {
		      disabled: disabled
		    });
		    if (validationState) {
		      classes['has-' + validationState] = true;
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](className, classes), style: style },
		      _react2['default'].createElement(
		        'label',
		        null,
		        _react2['default'].createElement('input', _extends({}, props, { type: 'radio', disabled: disabled })),
		        children
		      )
		    );
		  };

		  return Radio;
		})(_react2['default'].Component);

		Radio.propTypes = propTypes;
		Radio.defaultProps = defaultProps;

		exports['default'] = _utilsBootstrapUtils.bsClass('radio', Radio);
		module.exports = exports['default'];

	/***/ },
	/* 253 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var ResponsiveEmbed = (function (_React$Component) {
		  _inherits(ResponsiveEmbed, _React$Component);

		  function ResponsiveEmbed() {
		    _classCallCheck(this, ResponsiveEmbed);

		    _React$Component.apply(this, arguments);
		  }

		  ResponsiveEmbed.prototype.render = function render() {
		    var _props = this.props;
		    var bsClass = _props.bsClass;
		    var className = _props.className;
		    var a16by9 = _props.a16by9;
		    var a4by3 = _props.a4by3;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['bsClass', 'className', 'a16by9', 'a4by3', 'children']);

		     true ? _warning2['default'](!(!a16by9 && !a4by3), '`a16by9` or `a4by3` attribute must be set.') : undefined;
		     true ? _warning2['default'](!(a16by9 && a4by3), 'Either `a16by9` or `a4by3` attribute can be set. Not both.') : undefined;

		    var aspectRatio = {
		      'embed-responsive-16by9': a16by9,
		      'embed-responsive-4by3': a4by3
		    };

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](bsClass, aspectRatio) },
		      _react.cloneElement(children, _extends({}, props, {
		        className: _classnames2['default'](className, 'embed-responsive-item')
		      }))
		    );
		  };

		  return ResponsiveEmbed;
		})(_react2['default'].Component);

		ResponsiveEmbed.defaultProps = {
		  bsClass: 'embed-responsive',
		  a16by9: false,
		  a4by3: false
		};

		ResponsiveEmbed.propTypes = {
		  /**
		   * bootstrap className
		   * @private
		   */
		  bsClass: _react.PropTypes.string,
		  /**
		   * This component accepts only one child element
		   */
		  children: _react.PropTypes.element.isRequired,
		  /**
		   * 16by9 aspect ratio
		   */
		  a16by9: _react.PropTypes.bool,
		  /**
		   * 4by3 aspect ratio
		   */
		  a4by3: _react.PropTypes.bool
		};

		exports['default'] = ResponsiveEmbed;
		module.exports = exports['default'];

	/***/ },
	/* 254 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Row = _react2['default'].createClass({
		  displayName: 'Row',

		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Row;
		module.exports = exports['default'];

	/***/ },
	/* 255 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Button = __webpack_require__(51);

		var _Button2 = _interopRequireDefault(_Button);

		var _Dropdown = __webpack_require__(85);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var _SplitToggle = __webpack_require__(256);

		var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

		var _lodashCompatObjectOmit = __webpack_require__(143);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _lodashCompatObjectPick = __webpack_require__(172);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var SplitButton = (function (_React$Component) {
		  _inherits(SplitButton, _React$Component);

		  function SplitButton() {
		    _classCallCheck(this, SplitButton);

		    _React$Component.apply(this, arguments);
		  }

		  SplitButton.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var title = _props.title;
		    var onClick = _props.onClick;
		    var target = _props.target;
		    var href = _props.href;
		    var toggleLabel = _props.toggleLabel;
		    var bsSize = _props.bsSize;
		    var bsStyle = _props.bsStyle;

		    var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'toggleLabel', 'bsSize', 'bsStyle']);

		    var disabled = props.disabled;

		    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
		    var buttonProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      dropdownProps,
		      _react2['default'].createElement(
		        _Button2['default'],
		        _extends({}, buttonProps, {
		          onClick: onClick,
		          bsStyle: bsStyle,
		          bsSize: bsSize,
		          disabled: disabled,
		          target: target,
		          href: href
		        }),
		        title
		      ),
		      _react2['default'].createElement(_SplitToggle2['default'], {
		        'aria-label': toggleLabel || title,
		        bsStyle: bsStyle,
		        bsSize: bsSize,
		        disabled: disabled
		      }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return SplitButton;
		})(_react2['default'].Component);

		SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, {
		  bsStyle: _Button2['default'].propTypes.bsStyle,

		  /**
		   * @private
		   */
		  onClick: function onClick() {},
		  target: _react2['default'].PropTypes.string,
		  href: _react2['default'].PropTypes.string,
		  /**
		   * The content of the split button.
		   */
		  title: _react2['default'].PropTypes.node.isRequired,
		  /**
		   * Accessible label for the toggle; the value of `title` if not specified.
		   */
		  toggleLabel: _react2['default'].PropTypes.string
		});

		SplitButton.defaultProps = {
		  disabled: false,
		  dropup: false,
		  pullRight: false
		};

		SplitButton.Toggle = _SplitToggle2['default'];

		exports['default'] = SplitButton;
		module.exports = exports['default'];

	/***/ },
	/* 256 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _DropdownToggle = __webpack_require__(170);

		var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

		var SplitToggle = (function (_React$Component) {
		  _inherits(SplitToggle, _React$Component);

		  function SplitToggle() {
		    _classCallCheck(this, SplitToggle);

		    _React$Component.apply(this, arguments);
		  }

		  SplitToggle.prototype.render = function render() {
		    return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
		      useAnchor: false,
		      noCaret: false
		    }));
		  };

		  return SplitToggle;
		})(_react2['default'].Component);

		exports['default'] = SplitToggle;

		SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
		module.exports = exports['default'];

	/***/ },
	/* 257 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _TabPane = __webpack_require__(258);

		var _TabPane2 = _interopRequireDefault(_TabPane);

		var _TabContainer = __webpack_require__(259);

		var _TabContainer2 = _interopRequireDefault(_TabContainer);

		var _TabContent = __webpack_require__(260);

		var _TabContent2 = _interopRequireDefault(_TabContent);

		var Tab = (function (_React$Component) {
		  _inherits(Tab, _React$Component);

		  function Tab() {
		    _classCallCheck(this, Tab);

		    _React$Component.apply(this, arguments);
		  }

		  Tab.prototype.render = function render() {
		    var _props = this.props;
		    var title = _props.title;
		    var disabled = _props.disabled;
		    var tabClassName = _props.tabClassName;

		    var props = _objectWithoutProperties(_props, ['title', 'disabled', 'tabClassName']);

		    return _react2['default'].createElement(_TabPane2['default'], props);
		  };

		  return Tab;
		})(_react2['default'].Component);

		Tab.propTypes = _extends({}, _TabPane2['default'].propTypes, {

		  disabled: _react2['default'].PropTypes.bool,

		  title: _react2['default'].PropTypes.node,

		  /**
		   * tabClassName is used as className for the associated NavItem
		   */
		  tabClassName: _react2['default'].PropTypes.string
		});

		Tab.Container = _TabContainer2['default'];
		Tab.Content = _TabContent2['default'];
		Tab.Pane = _TabPane2['default'];

		exports['default'] = Tab;
		module.exports = exports['default'];

	/***/ },
	/* 258 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _domHelpersClassAddClass = __webpack_require__(213);

		var _domHelpersClassAddClass2 = _interopRequireDefault(_domHelpersClassAddClass);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _warning = __webpack_require__(36);

		var _warning2 = _interopRequireDefault(_warning);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _utilsCreateChainedFunction = __webpack_require__(84);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsTabUtils = __webpack_require__(226);

		var _Fade = __webpack_require__(173);

		var _Fade2 = _interopRequireDefault(_Fade);

		var TabPane = _react2['default'].createClass({
		  displayName: 'TabPane',

		  propTypes: {

		    /**
		     * Uniquely identify the TabPane amoung its siblings.
		     */
		    eventKey: _react.PropTypes.any,

		    /**
		     * Use animation when showing or hiding TabPanes. Use `false` to disable,
		     * `true` to enable the default "Fade" animation or any Transition component.
		     *
		     */
		    animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),

		    /** @private **/
		    id: _react.PropTypes.string,

		    /** @private **/
		    'aria-labelledby': _react.PropTypes.string,

		    /**
		     * Transition onEnter callback when animation is not `false`
		     */
		    onEnter: _react.PropTypes.func,

		    /**
		     * Transition onEntering callback when animation is not `false`
		     */
		    onEntering: _react.PropTypes.func,

		    /**
		     * Transition onEntered callback when animation is not `false`
		     */
		    onEntered: _react.PropTypes.func,

		    /**
		     * Transition onExit callback when animation is not `false`
		     */
		    onExit: _react.PropTypes.func,

		    /**
		     * Transition onExiting callback when animation is not `false`
		     */
		    onExiting: _react.PropTypes.func,

		    /**
		     * Transition onExited callback when animation is not `false`
		     */
		    onExited: _react.PropTypes.func
		  },

		  contextTypes: {
		    $bs_tabcontainer: _react.PropTypes.shape({
		      getId: _react.PropTypes.func
		    }),
		    $bs_tabcontent: _react.PropTypes.shape({
		      bsClass: _react.PropTypes.string,
		      animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),
		      activeKey: _react.PropTypes.any,
		      onExited: _react.PropTypes.func,
		      register: _react.PropTypes.func
		    })
		  },

		  /**
		   * We override the TabContainer context so Navs in TabPanes
		   * don't conflict with the top level one.
		   */
		  childContextTypes: {
		    $bs_tabcontainer: _react.PropTypes.oneOf([null])
		  },

		  componentWillMount: function componentWillMount() {
		    this.exited = !this.isActive();
		    this.registerWithParent();
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {
		    if (nextProps.eventKey !== this.props.eventKey) {
		      this.unregisterWithParent();
		      this.registerWithParent(nextProps, nextContext);
		    }
		  },

		  componentWillUpdate: function componentWillUpdate(nextProps, _, nextContext) {
		    if (this.isActive(nextProps, nextContext)) {
		      this.exited = false;
		    } else if (!this.exited && !this.getTransition(nextProps, nextContext)) {
		      // Otherwise let handleHidden take care of marking exited.
		      this.exited = true;
		      this._fireExitedCallback = true;
		    }
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    if (this._fireExitedCallback) {
		      this._fireExitedCallback = false;
		      this.onExited();
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    this.unregisterWithParent();
		  },

		  getChildContext: function getChildContext() {
		    return { $bs_tabcontainer: null };
		  },

		  getTransition: function getTransition() {
		    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
		    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];

		    context = this.getContext('$bs_tabcontent', context);
		    return props.animation != null ? props.animation : context.animation;
		  },

		  isActive: function isActive() {
		    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
		    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];

		    return this.getContext('$bs_tabcontent', context).activeKey === props.eventKey;
		  },

		  render: function render() {
		    var _classes;

		    var active = this.isActive();
		    var visible = active || !this.exited;
		    var getId = this.getContext('$bs_tabcontainer').getId;
		    var bsClass = this.props.bsClass || this.getContext('$bs_tabcontent').bsClass;

		    var Transition = this.getTransition();

		    var classes = (_classes = {
		      active: visible
		    }, _classes[_utilsBootstrapUtils.prefix({ bsClass: bsClass }, 'pane')] = true, _classes);

		    var _props = this.props;
		    var eventKey = _props.eventKey;
		    var id = _props.id;
		    var labelledBy = _props['aria-labelledby'];
		    var onExit = _props.onExit;
		    var onExiting = _props.onExiting;
		    var onExited = _props.onExited;
		    var onEnter = _props.onEnter;
		    var onEntering = _props.onEntering;
		    var onEntered = _props.onEntered;

		    if (typeof Transition === 'boolean') {
		      Transition = Transition ? _Fade2['default'] : null;
		    }

		    if (getId) {
		       true ? _warning2['default'](!(id || labelledBy), 'In the context of a TabContainer, TabPanes are given generated `id` and `aria-labelledby` ' + 'attributes for the sake of proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` prop to the parent TabContainer.') : undefined;
		      id = getId(eventKey, _utilsTabUtils.PANE) || null;
		      labelledBy = getId(eventKey, _utilsTabUtils.TAB) || null;
		    }

		    var tabPane = _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        id: id,
		        role: 'tabpanel',
		        'aria-hidden': !visible,
		        'aria-labelledby': labelledBy,
		        className: _classnames2['default'](this.props.className, classes, { 'in': !Transition })
		      }),
		      this.props.children
		    );

		    if (Transition) {
		      tabPane = _react2['default'].createElement(
		        Transition,
		        {
		          'in': active,
		          onExit: onExit,
		          onExiting: onExiting,
		          onExited: _utilsCreateChainedFunction2['default'](this.handleExited, onExited),
		          onEnter: _utilsCreateChainedFunction2['default'](this.handleEnter, onEnter),
		          onEntering: onEntering,
		          onEntered: onEntered
		        },
		        tabPane
		      );
		    }

		    return tabPane;
		  },

		  onExited: function onExited() {
		    var context = this.getContext('$bs_tabcontent');
		    if (context.onExited) {
		      context.onExited(this.props.eventKey);
		    }
		  },

		  handleEnter: function handleEnter(node) {
		    // ref: https://github.com/react-bootstrap/react-overlays/issues/40
		    if (this.isActive()) {
		      _domHelpersClassAddClass2['default'](node, 'active');
		      node.offsetWidth; // eslint-disable-line no-unused-expressions
		    }
		  },

		  handleExited: function handleExited() {
		    this.exited = true;
		    this.onExited();
		    this.forceUpdate();
		  },

		  registerWithParent: function registerWithParent() {
		    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
		    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];

		    var register = this.getContext('$bs_tabcontent', context).register;

		    if (register) {
		      this.unregister = register(props.eventKey);
		    }
		  },

		  unregisterWithParent: function unregisterWithParent() {
		    if (this.unregister) {
		      this.unregister();
		    }
		  },

		  getContext: function getContext(key) {
		    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];

		    return context[key] || {};
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('tab', TabPane);
		module.exports = exports['default'];

	/***/ },
	/* 259 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _uncontrollable = __webpack_require__(159);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var idPropType = _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]);

		var TabContainer = _react2['default'].createClass({
		  displayName: 'TabContainer',

		  propTypes: {
		    /**
		     * HTML id attribute, required if no `generateChildId` prop
		     * is specified.
		     */
		    id: function id(props) {
		      var error = null;

		      if (!props.generateChildId) {
		        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		          args[_key - 1] = arguments[_key];
		        }

		        error = idPropType.apply(undefined, [props].concat(args));

		        if (!error && !props.id) {
		          error = new Error('In order to properly inialize Tabs in a way that is accessible to assistive technologies ' + '(such as screen readers) an `id` or a `generateChildId` prop to TabContainer is required');
		        }
		      }
		      return error;
		    },

		    /**
		     * A function that takes an eventKey and type and returns a
		     * unique id for child tab NavItems and TabPanes. The function _must_ be a pure function,
		     * meaning it should always return the _same_ id for the same set of inputs. The default
		     * value requires that an `id` to be set for the TabContainer.
		     *
		     * The `type` argument will either be `"tab"` or `"pane"`.
		     *
		     * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`
		     */
		    generateChildId: _react.PropTypes.func,

		    /**
		     * A callback fired when a tab is selected.
		     *
		     * @controllable activeKey
		     */
		    onSelect: _react.PropTypes.func,

		    /**
		     * The `eventKey` of the currently active tab.
		     *
		     * @controllable onSelect
		     */
		    activeKey: _react.PropTypes.any
		  },

		  childContextTypes: {
		    $bs_tabcontainer: _react2['default'].PropTypes.shape({
		      activeKey: _react.PropTypes.any,
		      onSelect: _react.PropTypes.func,
		      getId: _react.PropTypes.func
		    })
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  getChildContext: function getChildContext() {
		    var _this = this;

		    return {
		      $bs_tabcontainer: {
		        activeKey: this.props.activeKey,
		        onSelect: this.props.onSelect,
		        getId: this.props.generateChildId || function (key, type) {
		          return _this.props.id ? _this.props.id + '-' + type + '-' + key : null;
		        }
		      }
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['children']);

		    return _react2['default'].cloneElement(_react2['default'].Children.only(children), props);
		  }
		});

		exports['default'] = _uncontrollable2['default'](TabContainer, { activeKey: 'onSelect' });
		module.exports = exports['default'];

	/***/ },
	/* 260 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _invariant = __webpack_require__(32);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibElementType = __webpack_require__(49);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var animationPropType = _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]);

		var TabContent = _react2['default'].createClass({
		  displayName: 'TabContent',

		  propTypes: {

		    /**
		     * the Component used to render the TabContent
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],

		    /**
		     * Sets a default animation strategy for all children TabPanes.
		     * Use `false` to disable, `true` to enable the default "Fade"
		     * animation or any `<Transition>` component.
		     */
		    animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']])
		  },

		  contextTypes: {
		    $bs_tabcontainer: _react2['default'].PropTypes.shape({
		      activeKey: _react2['default'].PropTypes.any,
		      onSelect: _react.PropTypes.func
		    })
		  },

		  childContextTypes: {
		    $bs_tabcontent: _react.PropTypes.shape({
		      bsClass: _react.PropTypes.string,
		      animation: animationPropType,
		      activeKey: _react.PropTypes.any,
		      onExited: _react.PropTypes.func,
		      register: _react.PropTypes.func
		    })
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div',
		      animation: true
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      exitingPane: null
		    };
		  },

		  getChildContext: function getChildContext() {
		    var exitingPane = this._exitingPane;

		    return {
		      $bs_tabcontent: {
		        bsClass: this.props.bsClass,
		        animation: this.props.animation,
		        activeKey: exitingPane ? undefined : this.getActiveKey(),
		        onExited: this.handlePaneExited,
		        register: this.registerPane
		      }
		    };
		  },

		  /**
		   * This belongs in `componentWillReceiveProps()` but
		   * 0.14.x contains a bug where cwrp isn't called when only context changes.
		   * fixed in master, not sure it will make it into any 0.14 release
		   */
		  componentWillUpdate: function componentWillUpdate(nextProps, _, nextContext) {
		    var currentActiveKey = this.getActiveKey();
		    var nextActiveKey = this.getActiveKey(nextContext);
		    var currentKeyIsStillValid = this.panes.indexOf(currentActiveKey) !== -1;

		    if (this.panes.indexOf(this._exitingPane) === -1) {
		      this._exitingPane = null;
		    }

		    if (nextActiveKey !== currentActiveKey && currentKeyIsStillValid) {
		      this._exitingPane = currentActiveKey;
		    }
		  },

		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;

		    var Component = this.props.componentClass;

		    var contentClass = _utilsBootstrapUtils.prefix(this.props, 'content');

		    return _react2['default'].createElement(
		      Component,
		      { className: _classnames2['default'](contentClass, className) },
		      children
		    );
		  },

		  handlePaneExited: function handlePaneExited() {
		    this._exitingPane = null;
		    this.forceUpdate();
		  },

		  /**
		   * This is unfortunately neccessary because the TabContent needs to know if
		   * a TabPane is ever going to exit, since it may unmount and just leave the
		   * TabContent to wait longingly forever for the handlePaneExited to be called.
		   */
		  registerPane: function registerPane(eventKey) {
		    var _this = this;

		    var panes = this.panes || (this.panes = []);

		    !(panes.indexOf(eventKey) === -1) ?  true ? _invariant2['default'](false, 'You cannot have multiple TabPanes of with the same `eventKey` in the same ' + 'TabContent component. Duplicate eventKey: ' + eventKey) : _invariant2['default'](false) : undefined;

		    panes.push(eventKey);

		    return function () {
		      panes.splice(panes.indexOf(eventKey), 1);
		      if (eventKey === _this.getActiveKey()) {
		        _this.getContext('$bs_tabcontainer').onSelect();
		      }
		    };
		  },

		  getActiveKey: function getActiveKey() {
		    var context = arguments.length <= 0 || arguments[0] === undefined ? this.context : arguments[0];

		    return this.getContext('$bs_tabcontainer', context).activeKey;
		  },

		  getContext: function getContext(key) {
		    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];

		    return context[key] || {};
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('tab', TabContent);
		module.exports = exports['default'];

	/***/ },
	/* 261 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Table = _react2['default'].createClass({
		  displayName: 'Table',

		  propTypes: {
		    striped: _react2['default'].PropTypes.bool,
		    bordered: _react2['default'].PropTypes.bool,
		    condensed: _react2['default'].PropTypes.bool,
		    hover: _react2['default'].PropTypes.bool,
		    responsive: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bordered: false,
		      condensed: false,
		      hover: false,
		      responsive: false,
		      striped: false
		    };
		  },

		  render: function render() {
		    var classes = {
		      'table': true,
		      'table-striped': this.props.striped,
		      'table-bordered': this.props.bordered,
		      'table-condensed': this.props.condensed,
		      'table-hover': this.props.hover
		    };
		    var table = _react2['default'].createElement(
		      'table',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );

		    return this.props.responsive ? _react2['default'].createElement(
		      'div',
		      { className: 'table-responsive' },
		      table
		    ) : table;
		  }
		});

		exports['default'] = Table;
		module.exports = exports['default'];

	/***/ },
	/* 262 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _objectWithoutProperties = __webpack_require__(22)['default'];

		var _Object$keys = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _uncontrollable = __webpack_require__(159);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _Col = __webpack_require__(70);

		var _Col2 = _interopRequireDefault(_Col);

		var _Nav = __webpack_require__(225);

		var _Nav2 = _interopRequireDefault(_Nav);

		var _NavItem = __webpack_require__(233);

		var _NavItem2 = _interopRequireDefault(_NavItem);

		var _styleMaps = __webpack_require__(25);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(158);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var _utilsDeprecationWarning = __webpack_require__(60);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var _utilsValidComponentChildren = __webpack_require__(33);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _TabContainer = __webpack_require__(259);

		var _TabContainer2 = _interopRequireDefault(_TabContainer);

		var _TabContent = __webpack_require__(260);

		var _TabContent2 = _interopRequireDefault(_TabContent);

		var TabContainer = _TabContainer2['default'].ControlledComponent;

		function getDefaultActiveKeyFromChildren(children) {
		  var defaultActiveKey = undefined;
		  _utilsValidComponentChildren2['default'].forEach(children, function (child) {
		    if (defaultActiveKey == null) {
		      defaultActiveKey = child.props.eventKey;
		    }
		  });
		  return defaultActiveKey;
		}

		var Tabs = _react2['default'].createClass({
		  displayName: 'Tabs',

		  propTypes: {

		    /**
		     * Mark the Tab with a matching `eventKey` as active.
		     *
		     * @controllable onSelect
		     */
		    activeKey: _react2['default'].PropTypes.any,

		    /**
		     * Navigation style for tabs
		     *
		     * If not specified, it will be treated as `'tabs'` when vertically
		     * positioned and `'pills'` when horizontally positioned.
		     */
		    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),

		    animation: _react2['default'].PropTypes.bool,

		    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		    /**
		     * Callback fired when a Tab is selected.
		     *
		     * ```js
		     * function (
		     * 	Any eventKey,
		     * 	SyntheticEvent event?
		     * )
		     * ```
		     *
		     * @controllable activeKey
		     */
		    onSelect: _react2['default'].PropTypes.func,

		    /**
		     * @deprecated Use TabContainer to create differently shaped tab layouts.
		     */
		    position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),

		    /**
		     * Number of grid columns for the tabs if horizontally positioned
		     *
		     * This accepts either a single width or a mapping of size to width.
		     *
		     * @deprecated Use TabContainer to create differently shaped tab layouts.
		     */
		    tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
		    /**
		     * Number of grid columns for the panes if horizontally positioned
		     *
		     * This accepts either a single width or a mapping of size to width. If not
		     * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
		     * `tabWidth`.
		     *
		     * @deprecated Use TabContainer to create differently shaped tab layouts.
		     */
		    paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
		    /**
		     * Render without clearfix if horizontally positioned
		     *
		     * @deprecated Use TabContainer to create differently shaped tab layouts.
		     */
		    standalone: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'tab',
		      animation: true,
		      tabWidth: 2,
		      position: 'top',
		      standalone: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var id = _props.id;
		    var className = _props.className;
		    var style = _props.style;
		    var position = _props.position;
		    var bsStyle = _props.bsStyle;
		    var tabWidth = _props.tabWidth;
		    var paneWidth = _props.paneWidth;
		    var standalone = _props.standalone;
		    var children = _props.children;
		    var onSelect = _props.onSelect;
		    var activeKey = _props.activeKey;

		    var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'standalone', 'children', 'onSelect', 'activeKey']);

		    activeKey = this.getActiveKey();

		    var isHorizontal = position === 'left' || position === 'right';

		    if (bsStyle == null) {
		      bsStyle = isHorizontal ? 'pills' : 'tabs';
		    }

		    var containerProps = { id: id, className: className, style: style, activeKey: activeKey, onSelect: onSelect };

		    var tabsProps = _extends({}, props, {
		      bsStyle: bsStyle,
		      bsClass: undefined,
		      stacked: isHorizontal,
		      ref: 'tabs',
		      role: 'tablist'
		    });
		    var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

		    var panesProps = {
		      ref: 'panes',
		      animation: props.animation
		    };

		    var childPanes = children;

		    if (isHorizontal) {
		      _utilsDeprecationWarning2['default']({
		        message: 'Horizontal Tabs (position "left" or "right") are deprecated in favor ' + 'of the more flexible TabContainer component.'
		      });

		      if (!standalone) {
		        containerProps.className = _classnames2['default'](containerProps.className, 'clearfix');
		      }

		      var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

		      var tabsColProps = _getColProps.tabsColProps;
		      var panesColProps = _getColProps.panesColProps;

		      var tabs = _react2['default'].createElement(
		        _Col2['default'],
		        _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
		        childTabs
		      );
		      var panes = _react2['default'].createElement(
		        _Col2['default'],
		        _extends({ componentClass: _TabContent2['default'] }, panesProps, panesColProps),
		        childPanes
		      );

		      if (position === 'left') {
		        return _react2['default'].createElement(
		          TabContainer,
		          containerProps,
		          _react2['default'].createElement(
		            'div',
		            containerProps,
		            tabs,
		            panes
		          )
		        );
		      }

		      return _react2['default'].createElement(
		        TabContainer,
		        containerProps,
		        _react2['default'].createElement(
		          'div',
		          containerProps,
		          panes,
		          tabs
		        )
		      );
		    }

		    return _react2['default'].createElement(
		      TabContainer,
		      containerProps,
		      _react2['default'].createElement(
		        'div',
		        containerProps,
		        _react2['default'].createElement(
		          _Nav2['default'],
		          tabsProps,
		          childTabs
		        ),
		        _react2['default'].createElement(
		          _TabContent2['default'],
		          panesProps,
		          childPanes
		        )
		      )
		    );
		  },

		  getActiveKey: function getActiveKey() {
		    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
		    var activeKey = props.activeKey;
		    var children = props.children;

		    return activeKey === undefined ? getDefaultActiveKeyFromChildren(children) : activeKey;
		  },

		  renderPane: function renderPane(child, index) {
		    return _react.cloneElement(child, {
		      key: child.key ? child.key : index
		    });
		  },

		  renderTab: function renderTab(child) {
		    if (child.props.title == null) {
		      return null;
		    }

		    var _child$props = child.props;
		    var eventKey = _child$props.eventKey;
		    var title = _child$props.title;
		    var disabled = _child$props.disabled;
		    var tabClassName = _child$props.tabClassName;

		    return _react2['default'].createElement(
		      _NavItem2['default'],
		      {
		        eventKey: eventKey,
		        disabled: disabled,
		        className: tabClassName
		      },
		      title
		    );
		  },

		  getColProps: function getColProps(_ref) {
		    var tabWidth = _ref.tabWidth;
		    var paneWidth = _ref.paneWidth;

		    var tabsColProps = undefined;
		    if (tabWidth instanceof Object) {
		      tabsColProps = tabWidth;
		    } else {
		      tabsColProps = { xs: tabWidth };
		    }

		    var panesColProps = undefined;
		    if (paneWidth == null) {
		      panesColProps = {};
		      _Object$keys(tabsColProps).forEach(function (size) {
		        panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
		      });
		    } else if (paneWidth instanceof Object) {
		      panesColProps = paneWidth;
		    } else {
		      panesColProps = { xs: paneWidth };
		    }

		    return { tabsColProps: tabsColProps, panesColProps: panesColProps };
		  }

		});

		exports['default'] = _uncontrollable2['default'](Tabs, { activeKey: 'onSelect' });
		module.exports = exports['default'];

	/***/ },
	/* 263 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var _SafeAnchor = __webpack_require__(40);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var Thumbnail = _react2['default'].createClass({
		  displayName: 'Thumbnail',

		  propTypes: {
		    alt: _react2['default'].PropTypes.string,
		    href: _react2['default'].PropTypes.string,
		    src: _react2['default'].PropTypes.string
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    if (this.props.href) {
		      return _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
		        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
		      );
		    }

		    if (this.props.children) {
		      return _react2['default'].createElement(
		        'div',
		        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
		        _react2['default'].createElement(
		          'div',
		          { className: 'caption' },
		          this.props.children
		        )
		      );
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('thumbnail', Thumbnail);
		module.exports = exports['default'];

	/***/ },
	/* 264 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(158);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var Tooltip = _react2['default'].createClass({
		  displayName: 'Tooltip',

		  propTypes: {
		    /**
		     * An html id attribute, necessary for accessibility
		     * @type {string}
		     * @required
		     */
		    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		    /**
		     * Sets the direction the Tooltip is positioned towards.
		     */
		    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

		    /**
		     * The "left" position value for the Tooltip.
		     */
		    positionLeft: _react2['default'].PropTypes.number,
		    /**
		     * The "top" position value for the Tooltip.
		     */
		    positionTop: _react2['default'].PropTypes.number,
		    /**
		     * The "left" position value for the Tooltip arrow.
		     */
		    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * The "top" position value for the Tooltip arrow.
		     */
		    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * Title text
		     */
		    title: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'tooltip',
		      placement: 'right'
		    };
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

		    var style = _extends({
		      left: this.props.positionLeft,
		      top: this.props.positionTop
		    }, this.props.style);

		    var arrowStyle = {
		      left: this.props.arrowOffsetLeft,
		      top: this.props.arrowOffsetTop
		    };

		    return _react2['default'].createElement(
		      'div',
		      _extends({
		        role: 'tooltip'
		      }, this.props, {
		        className: _classnames2['default'](this.props.className, classes),
		        style: style
		      }),
		      _react2['default'].createElement('div', { className: _utilsBootstrapUtils.prefix(this.props, 'arrow'), style: arrowStyle }),
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils.prefix(this.props, 'inner') },
		        this.props.children
		      )
		    );
		  }
		});

		exports['default'] = Tooltip;
		module.exports = exports['default'];

	/***/ },
	/* 265 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(41)['default'];

		var _classCallCheck = __webpack_require__(48)['default'];

		var _extends = __webpack_require__(4)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(23);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(20);

		var _react2 = _interopRequireDefault(_react);

		var _styleMaps = __webpack_require__(25);

		var _utilsBootstrapUtils = __webpack_require__(24);

		var Well = (function (_React$Component) {
		  _inherits(Well, _React$Component);

		  function Well() {
		    _classCallCheck(this, _Well);

		    _React$Component.apply(this, arguments);
		  }

		  Well.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils.getClassSet(this.props);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  };

		  var _Well = Well;
		  Well = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL])(Well) || Well;
		  Well = _utilsBootstrapUtils.bsClass('well')(Well) || Well;
		  return Well;
		})(_react2['default'].Component);

		exports['default'] = Well;
		module.exports = exports['default'];

	/***/ },
	/* 266 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireWildcard = __webpack_require__(2)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _bootstrapUtils2 = __webpack_require__(24);

		var _bootstrapUtils = _interopRequireWildcard(_bootstrapUtils2);

		exports.bootstrapUtils = _bootstrapUtils;

		var _childrenValueInputValidation2 = __webpack_require__(58);

		var _childrenValueInputValidation3 = _interopRequireDefault(_childrenValueInputValidation2);

		exports.childrenValueInputValidation = _childrenValueInputValidation3['default'];

		var _createChainedFunction2 = __webpack_require__(84);

		var _createChainedFunction3 = _interopRequireDefault(_createChainedFunction2);

		exports.createChainedFunction = _createChainedFunction3['default'];

		var _ValidComponentChildren2 = __webpack_require__(33);

		var _ValidComponentChildren3 = _interopRequireDefault(_ValidComponentChildren2);

		exports.ValidComponentChildren = _ValidComponentChildren3['default'];

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(6);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, _) {/**
	 * @license
	 * lodash 4.11.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash -d -o ./foo/lodash.js`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.11.1';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;

	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	    rsUpper + '+' + rsOptUpperContr,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `exports`. */
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	    ? exports
	    : undefined;

	  /** Detect free variable `module`. */
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	    ? module
	    : undefined;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = (freeModule && freeModule.exports === freeExports)
	    ? freeExports
	    : undefined;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	  /** Detect free variable `window`. */
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal ||
	    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	      freeSelf || thisGlobal || Function('return this')();

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * Creates a new array concatenating `array` with `other`.
	   *
	   * @private
	   * @param {Array} array The first array to concatenate.
	   * @param {Array} other The second array to concatenate.
	   * @returns {Array} Returns the new concatenated array.
	   */
	  function arrayConcat(array, other) {
	    var index = -1,
	        length = array.length,
	        othIndex = -1,
	        othLength = other.length,
	        result = Array(length + othLength);

	    while (++index < length) {
	      result[index] = array[index];
	    }
	    while (++othIndex < othLength) {
	      result[index++] = other[othIndex];
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    return !!array.length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * The base implementation of methods like `_.max` and `_.min` which accepts a
	   * `comparator` to determine the extremum value.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The iteratee invoked per iteration.
	   * @param {Function} comparator The comparator used to compare values.
	   * @returns {*} Returns the extremum value.
	   */
	  function baseExtremum(array, iteratee, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index],
	          current = iteratee(value);

	      if (current != null && (computed === undefined
	            ? current === current
	            : comparator(current, computed)
	          )) {
	        var computed = current,
	            result = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element
	   *  instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFind(collection, predicate, eachFunc, retKey) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = retKey ? key : value;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array ? array.length : 0;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the new array of key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /**
	   * Compares values to sort them in ascending order.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function compareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * Used by `_.orderBy` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	   * specify an order of "desc" for descending or "asc" for ascending sort order
	   * of corresponding values.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]|string[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = compareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * (order == 'desc' ? -1 : 1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates a function that performs a mathematical operation on two values.
	   *
	   * @private
	   * @param {Function} operator The function to perform the operation.
	   * @returns {Function} Returns the new mathematical operation function.
	   */
	  function createMathOperation(operator) {
	    return function(value, other) {
	      var result;
	      if (value === undefined && other === undefined) {
	        return 0;
	      }
	      if (value !== undefined) {
	        result = value;
	      }
	      if (other !== undefined) {
	        result = result === undefined ? other : operator(result, other);
	      }
	      return result;
	    };
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }

	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */
	  function isIndex(value, length) {
	    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	    length = length == null ? MAX_SAFE_INTEGER : length;
	    return value > -1 && value % 1 == 0 && value < length;
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to an array.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

	    /** Built-in constructor references. */
	    var Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype,
	        stringProto = context.String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        clearTimeout = context.clearTimeout,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetPrototype = Object.getPrototypeOf,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReplace = stringProto.replace,
	        nativeReverse = arrayProto.reverse,
	        nativeSplit = stringProto.split;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`,
	     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
	     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`,
	     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
	     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
	     * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,
	     * `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,
	     * `noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`,
	     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
	     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
	     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
	     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toInteger`,
	     * `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`, `toString`,
	     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,
	     * `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @returns {Object} Returns the new hash object.
	     */
	    function Hash() {}

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(hash, key) {
	      return hashHas(hash, key) && delete hash[key];
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(hash, key) {
	      if (nativeCreate) {
	        var result = hash[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(hash, key) {
	      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function hashSet(hash, key, value) {
	      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	    }

	    // Avoid inheriting from `Object.prototype` when possible.
	    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function MapCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': Map ? new Map : [],
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapDelete(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapGet(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.get(key) : assocGet(data.map, key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.has(key) : assocHas(data.map, key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapSet(key, value) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	      } else if (Map) {
	        data.map.set(key, value);
	      } else {
	        assocSet(data.map, key, value);
	      }
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapClear;
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a set cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.push(values[index]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache`.
	     *
	     * @private
	     * @param {Object} cache The set cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function cacheHas(cache, value) {
	      var map = cache.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        return hash[value] === HASH_UNDEFINED;
	      }
	      return map.has(value);
	    }

	    /**
	     * Adds `value` to the set cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var map = this.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        hash[value] = HASH_UNDEFINED;
	      }
	      else {
	        map.set(value, HASH_UNDEFINED);
	      }
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.push = cachePush;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function Stack(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = { 'array': [], 'map': null };
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocDelete(array, key) : data.map['delete'](key);
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocGet(array, key) : data.map.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocHas(array, key) : data.map.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__,
	          array = data.array;

	      if (array) {
	        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	          assocSet(array, key, value);
	        } else {
	          data.array = null;
	          data.map = new MapCache(array);
	        }
	      }
	      var map = data.map;
	      if (map) {
	        map.set(key, value);
	      }
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Removes `key` and its value from the associative array.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function assocDelete(array, key) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = array.length - 1;
	      if (index == lastIndex) {
	        array.pop();
	      } else {
	        splice.call(array, index, 1);
	      }
	      return true;
	    }

	    /**
	     * Gets the associative array value for `key`.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function assocGet(array, key) {
	      var index = assocIndexOf(array, key);
	      return index < 0 ? undefined : array[index][1];
	    }

	    /**
	     * Checks if an associative array value for `key` exists.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function assocHas(array, key) {
	      return assocIndexOf(array, key) > -1;
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Sets the associative array `key` to `value`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function assocSet(array, key, value) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        array.push([key, value]);
	      } else {
	        array[index][1] = value;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (!isArr) {
	        var props = isFull ? getAllKeys(value) : keys(value);
	      }
	      // Recursively populate clone (susceptible to call stack limits).
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     */
	    function baseConforms(source) {
	      var props = keys(source),
	          length = props.length;

	      return function(object) {
	        if (object == null) {
	          return !length;
	        }
	        var index = length;
	        while (index--) {
	          var key = props[index],
	              predicate = source[key],
	              value = object[key];

	          if ((value === undefined &&
	              !(key in Object(object))) || !predicate(value)) {
	            return false;
	          }
	        }
	        return true;
	      };
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object)
	        ? result
	        : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototype(object) === null);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      return nativeKeys(Object(object));
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);

	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }

	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(path, srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      if (!(isArray(source) || isTypedArray(source))) {
	        var props = keysIn(source);
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      stack.set(srcValue, newValue);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	      }
	      stack['delete'](srcValue);
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return arrayReduce(props, function(result, key) {
	        if (key in object) {
	          result[key] = object[key];
	        }
	        return result;
	      }, {});
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, predicate) {
	      var index = -1,
	          props = getAllKeysIn(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (lastIndex == length || index != previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[last(path)];
	            }
	          }
	          else {
	            delete array[index];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the new array of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq`.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array) {
	      return baseSortedUniqBy(array);
	    }

	    /**
	     * The base implementation of `_.sortedUniqBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniqBy(array, iteratee) {
	      var index = 0,
	          length = array.length,
	          value = array[0],
	          computed = iteratee ? iteratee(value) : value,
	          seen = computed,
	          resIndex = 1,
	          result = [value];

	      while (++index < length) {
	        value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	        if (!eq(computed, seen)) {
	          seen = computed;
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);
	      var key = last(path);
	      return (object != null && has(object, key)) ? delete object[key] : true;
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;

	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : source[key];

	        assignValue(object, key, newValue);
	      }
	      return object;
	    }

	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return rest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = typeof customizer == 'function'
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBaseWrapper(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurryWrapper(func, bitmask, arity) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getPlaceholder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return rest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);

	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getPlaceholder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new invoker function.
	     */
	    function createOver(arrayFunc) {
	      return rest(function(iteratees) {
	        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
	          : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	        return rest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : (chars + '');

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return result;
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = toInteger(precision);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBaseWrapper(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurryWrapper(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartialWrapper(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var index = -1,
	          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(array, other);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isUnordered) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue ||
	                  equalFunc(arrValue, othValue, customizer, bitmask, stack);
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and
	          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
	          // not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object) ? other != +other : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	          stack.set(object, other);

	          // Recursively compare objects (susceptible to call stack limits).
	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a
	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	     * Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = toPairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getPlaceholder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
	    function getPrototype(value) {
	      return nativeGetPrototype(Object(value));
	    }

	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    function getSymbols(object) {
	      // Coerce `object` to an object to avoid non-object errors in V8.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	      return getOwnPropertySymbols(Object(object));
	    }

	    // Fallback for IE < 11.
	    if (!getOwnPropertySymbols) {
	      getSymbols = function() {
	        return [];
	      };
	    }

	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function getTag(value) {
	      return objectToString.call(value);
	    }

	    // Fallback for data views, maps, sets, and weak maps in IE 11,
	    // for data views in Edge, and promises in Node.js.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : undefined;

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var result,
	          index = -1,
	          length = path.length;

	      while (++index < length) {
	        var key = path[index];
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result) {
	        return result;
	      }
	      var length = object ? object.length : 0;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isString(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
	    }

	    /**
	     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
	     * iteratee shorthand.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenableIteratee(value) {
	      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol') {
	        return true;
	      }
	      return !isArray(value) &&
	        (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	          (object != null && value in Object(object)));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return type == 'number' || type == 'boolean' ||
	        (type == 'string' && value != '__proto__') || value == null;
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	      }
	      return objValue;
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoize(function(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(key) {
	      return (typeof key == 'string' || isSymbol(key)) ? key : (key + '');
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to process.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length,
	          array = castArray(arguments[0]);

	      if (length < 2) {
	        return length ? copyArray(array) : [];
	      }
	      var args = Array(length - 1);
	      while (length--) {
	        args[length - 1] = arguments[length];
	      }
	      return arrayConcat(array, baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other given
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([3, 2, 1], [4, 2]);
	     * // => [3, 1]
	     */
	    var difference = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	     * // => [3.1, 1.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = rest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = rest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3))
	        : -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3), true)
	        : -1;
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      fromIndex = toInteger(fromIndex);
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [4, 2], [1, 2]);
	     * // => [2]
	     */
	    var intersection = rest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = rest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = rest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (
	          index < 0
	            ? nativeMax(length + index, 0)
	            : nativeMin(index, length - 1)
	        ) + 1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the nth element of `array`. If `n` is negative, the nth element
	     * from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    var pull = rest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = rest(function(array, indexes) {
	      indexes = arrayMap(baseFlatten(indexes, 1), String);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(compareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniqBy(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2, 1], [4, 2], [1, 2]);
	     * // => [2, 1, 4]
	     */
	    var union = rest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1, 1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([2, 1], [4, 2]);
	     * // => [1, 4]
	     */
	    var xor = rest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = rest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = rest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     *
	     * _(['a', 'b', 'c']).at(0, 2).value();
	     * // => ['a', 'c']
	     */
	    var wrapperAt = rest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    function find(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate, true);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, getIteratee(iteratee));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function, it's
	     * invoked for and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = rest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getIteratee(predicate, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;

	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = baseClamp(toInteger(n), 0, length);
	      }
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      if (isObjectLike(collection)) {
	        var tag = getTag(collection);
	        if (tag == mapTag || tag == setTag) {
	          return collection.size;
	        }
	      }
	      return keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    var sortBy = rest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	        ? iteratees[0]
	        : baseFlatten(iteratees, 1, isFlattenableIteratee);

	      return baseOrderBy(collection, iteratees, []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @type {Function}
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred function to be invoked.
	     */
	    var now = Date.now;

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = rest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = rest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime = 0,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (!lastCallTime || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        clearTimeout(timerId);
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastCallTime = lastInvokeTime = 0;
	        lastArgs = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one or more milliseconds.
	     */
	    var defer = rest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = rest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrapper(func, FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [transforms[_.identity]] The functions to transform.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = rest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return rest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partial));
	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partialRight));
	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = rest(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, array);
	          case 1: return func.call(this, args[0], array);
	          case 2: return func.call(this, args[0], args[1], array);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return rest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @type {Function}
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    function isArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = !Buffer ? constant(false) : function(value) {
	      return value instanceof Buffer;
	    };

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) || isFunction(value.splice) ||
	            isArguments(value) || isBuffer(value))) {
	        return !value.length;
	      }
	      if (isObjectLike(value)) {
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return !(nonEnumShadows && keys(value).length);
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MAX_VALUE);
	     * // => true
	     *
	     * _.isFinite(3.14);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    function isMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    function isSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3');
	     * // => 3
	     */
	    function toInteger(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      var remainder = value % 1;
	      return value === value ? (remainder ? value - remainder : value) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3);
	     * // => 3
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3');
	     * // => 3
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (value == null) {
	        return '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.c = 3;
	     * }
	     *
	     * function Bar() {
	     *   this.e = 5;
	     * }
	     *
	     * Foo.prototype.d = 4;
	     * Bar.prototype.f = 6;
	     *
	     * _.assign({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3, 'e': 5 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * function Bar() {
	     *   this.d = 4;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     * Bar.prototype.e = 5;
	     *
	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     *
	     * _.at(['a', 'b', 'c'], 0, 2);
	     * // => ['a', 'c']
	     */
	    var at = rest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = rest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = rest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = rest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively.Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = rest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), toKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      predicate = getIteratee(predicate);
	      return basePickBy(object, function(value, key) {
	        return !predicate(value, key);
	      });
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = rest(function(object, props) {
	      return object == null ? {} : basePick(object, baseFlatten(props, 1));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[path[index]];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    function toPairs(object) {
	      return baseToPairs(object, keys(object));
	    }

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
	     */
	    function toPairsIn(object) {
	      return baseToPairs(object, keysIn(object));
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. The iteratee is invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = typeof target == 'string' ? target : (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the new array of string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator += '';
	        if (separator == '' && reHasComplexSymbol.test(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return nativeSplit.call(string, separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrim, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!(chars += '')) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? toString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = rest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, 'onClick');
	     * jQuery(element).on('click', view.onClick);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = rest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return rest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = rest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = rest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns its nth argument. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return rest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over(Math.max, Math.min);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [predicates=[_.identity]] The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    });

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    });

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, gt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), gt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, lt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), lt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    });

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    });

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.deburr = deburr;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      predicate = getIteratee(predicate, 3);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Expose lodash on the free variable `window` or `self` when available. This
	  // prevents errors in cases where lodash is loaded by a script tag in the presence
	  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
	  (freeWindow || freeSelf || {})._ = _;

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module), (function() { return this; }()), __webpack_require__(5)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	// LibraryItemsStore.js
	'use strict';

	var LibraryItemsDispatcher = __webpack_require__(9);
	var AuthoringConstants = __webpack_require__(14);
	var EventEmitter = __webpack_require__(16).EventEmitter;
	var MiddlewareService = __webpack_require__(17);
	var _ = __webpack_require__(5);

	var ActionTypes = AuthoringConstants.ActionTypes;
	var CHANGE_EVENT = ActionTypes.CHANGE_EVENT;

	var _items = [];

	var LibraryItemsStore = _.assign({}, EventEmitter.prototype, {
	    emitChange: function () {
	        this.emit(CHANGE_EVENT, _items);
	    },
	    addChangeListener: function (callback) {
	        this.on(CHANGE_EVENT, callback);
	    },
	    removeChangeListener: function (callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	    },
	    createNewItem: function (payload) {
	        var url = this.url() + payload.libraryId + '/items',
	            _this = this,
	            data = new FormData();

	        _.each(_.keys(payload), function (key) {
	            if (key == 'question' || key == 'answers') {
	                data.append(key, JSON.stringify(payload[key]));
	            } else if (key != 'questionFile') {
	                data.append(key, payload[key]);
	            }
	        });

	        fetch(url, {
	            method: 'POST',
	            credentials: "same-origin",
	            headers: new Headers({
	                'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken')[0].value
	            }),
	            body: data
	        }).then(function (response) {
	            if (response.ok) {
	                response.json().then(function (data) {
	                    _this.getItems(payload.libraryId);
	                    console.log(data);
	                });
	            } else {
	                response.text().then(function (data) {
	                    alert(response.statusText + ': ' + data);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with creating item: ' + error.message);
	        });
	    },
	    deleteItem: function (data) {
	        var url = this.url() + data.libraryId + '/items/' + data.itemId,
	            _this = this;

	        fetch(url, {
	            method: 'DELETE',
	            credentials: "same-origin",
	            headers: new Headers({
	                'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken')[0].value
	            })
	        }).then(function (response) {
	            if (response.ok) {
	                _this.getItems(data.libraryId);
	                console.log('item deleted');
	            } else {
	                response.text().then(function (responseData) {
	                    alert(response.statusText + ': ' + responseData);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with deleting item: ' + error.message);
	        });
	    },
	    getItemDetails: function (libraryId, itemId, callback) {
	        var url;

	        if (MiddlewareService.shouldReturnStatic()) {
	          url = '/raw_data/CAD_item_with_file_url.json';
	        } else {
	          url = this.url() + libraryId + '/items/' + itemId;
	        }

	        fetch(url, {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            response.json().then(function (data) {
	                callback(data);
	            });
	        }).catch(function (error) {
	            console.log('Problem with getting specific item: ' + error.message);
	        });
	    },
	    getItems: function (id) {
	        var url, _this = this;

	        if (MiddlewareService.shouldReturnStatic()) {
	          url = '/raw_data/CAD_items.json';
	        } else {
	            var ts = new Date();
	          url = this.url() + id + '/items?wronganswers&unrandomized&ts=' + ts.toISOString();
	        }

	        fetch(url, {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            response.json().then(function (data) {
	                _items = data;
	                _this.emitChange();
	            });
	        }).catch(function (error) {
	            console.log('Problem with getting library items: ' + error.message);
	        });
	    },
	    linkAnswerToLO: function (payload) {
	        var url = this.url() + payload.libraryId + '/items/' + payload.itemId,
	            _this = this,
	            data = new FormData();

	        data.append('answers', JSON.stringify([{
	            answerId: payload.answerId,
	            confusedLearningObjectiveIds: [payload.confusedLearningObjectiveId]
	        }]));

	        fetch(url, {
	            method: 'PUT',
	            credentials: "same-origin",
	            headers: new Headers({
	                'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken')[0].value
	            }),
	            body: data
	        }).then(function (response) {
	            if (response.ok) {
	                response.json().then(function (data) {
	                    _this.getItems(payload.libraryId);
	                    console.log(data);
	                });
	            } else {
	                response.text().then(function (data) {
	                    alert(response.statusText + ': ' + data);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with linking answer to a confused learning objective: ' + error.message);
	        });
	    },
	    linkItemToLO: function (payload) {
	        var url = this.url() + payload.libraryId + '/items/' + payload.itemId,
	            _this = this,
	            data = new FormData();

	        data.append('learningObjectiveId', payload.learningObjectiveId);

	        fetch(url, {
	            method: 'PUT',
	            credentials: "same-origin",
	            headers: new Headers({
	                'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken')[0].value
	            }),
	            body: data
	        }).then(function (response) {
	            if (response.ok) {
	                response.json().then(function (data) {
	                    _this.getItems(payload.libraryId);
	                    console.log(data);
	                });
	            } else {
	                response.text().then(function (data) {
	                    alert(response.statusText + ': ' + data);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with linking question to a learning objective: ' + error.message);
	        });
	    },
	    updateItem: function (payload) {
	        var url = this.url() + payload.libraryId + '/items/' + payload.itemId,
	            _this = this,
	            data = new FormData();

	        _.each(_.keys(payload), function (key) {
	            if (key == 'question' || key == 'answers' || key == 'assignedBankIds') {
	                data.append(key, JSON.stringify(payload[key]));
	            } else if (key != 'questionFile') {
	                data.append(key, payload[key]);
	            }
	        });

	        fetch(url, {
	            method: 'PUT',
	            credentials: "same-origin",
	            headers: new Headers({
	                'X-CSRFToken': document.getElementsByName('csrfmiddlewaretoken')[0].value
	            }),
	            body: data
	        }).then(function (response) {
	            if (response.ok) {
	                response.json().then(function (data) {
	                    _this.getItems(payload.libraryId);
	                    console.log(data);
	                });
	            } else {
	                response.text().then(function (data) {
	                    alert(response.statusText + ': ' + data);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with updating item ' + payload.itemId + ': ' + error.message);
	        });
	    },
	    url: function () {
	      if (MiddlewareService.shouldReturnStatic()) return '/raw_data/libraries.json';

	      return MiddlewareService.host() + '/assessment/libraries/';
	    }
	});

	LibraryItemsStore.dispatchToken = LibraryItemsDispatcher.register(function (action) {
	    switch(action.type) {
	        case ActionTypes.CREATE_ITEM:
	            LibraryItemsStore.createNewItem(action.content);
	            break;
	        case ActionTypes.DELETE_ITEM:
	            LibraryItemsStore.deleteItem(action.content);
	            break;
	        case ActionTypes.UPDATE_ITEM:
	            LibraryItemsStore.updateItem(action.content);
	            break;
	        case ActionTypes.LINK_ANSWER_LO:
	            LibraryItemsStore.linkAnswerToLO(action.content);
	            break;
	        case ActionTypes.LINK_ITEM_LO:
	            LibraryItemsStore.linkItemToLO(action.content);
	            break;
	    }
	});

	module.exports = LibraryItemsStore;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var Dispatcher = __webpack_require__(10).Dispatcher;

	module.exports = new Dispatcher();

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(11);


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * 
	 * @preventMunge
	 */

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var invariant = __webpack_require__(13);

	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *         case 'city-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	var Dispatcher = (function () {
	  function Dispatcher() {
	    _classCallCheck(this, Dispatcher);

	    this._callbacks = {};
	    this._isDispatching = false;
	    this._isHandled = {};
	    this._isPending = {};
	    this._lastID = 1;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   */

	  Dispatcher.prototype.register = function register(callback) {
	    var id = _prefix + this._lastID++;
	    this._callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   */

	  Dispatcher.prototype.unregister = function unregister(id) {
	    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	    delete this._callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   */

	  Dispatcher.prototype.waitFor = function waitFor(ids) {
	    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this._isPending[id]) {
	        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
	        continue;
	      }
	      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	      this._invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   */

	  Dispatcher.prototype.dispatch = function dispatch(payload) {
	    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
	    this._startDispatching(payload);
	    try {
	      for (var id in this._callbacks) {
	        if (this._isPending[id]) {
	          continue;
	        }
	        this._invokeCallback(id);
	      }
	    } finally {
	      this._stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   */

	  Dispatcher.prototype.isDispatching = function isDispatching() {
	    return this._isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
	    this._isPending[id] = true;
	    this._callbacks[id](this._pendingPayload);
	    this._isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
	    for (var id in this._callbacks) {
	      this._isPending[id] = false;
	      this._isHandled[id] = false;
	    }
	    this._pendingPayload = payload;
	    this._isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
	    delete this._pendingPayload;
	    this._isDispatching = false;
	  };

	  return Dispatcher;
	})();

	module.exports = Dispatcher;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var keyMirror = __webpack_require__(15);

	module.exports = {
	    ActionTypes: keyMirror({
	        CHANGE_EVENT: null,
	        CREATE_ITEM: null,
	        DELETE_ITEM: null,
	        UPDATE_ITEM: null,
	        LINK_ANSWER_LO: null,
	        LINK_ITEM_LO: null
	    }),
	    GenusTypes: {
	        CORRECT_ANSWER: 'answer-type%3Aright-answer%40ODL.MIT.EDU',
	        WRONG_ANSWER: 'answer-type%3Awrong-answer%40ODL.MIT.EDU',
	        MC_QUESTION: 'question-type%3Amultiple-choice%40ODL.MIT.EDU',
	        SURVEY_FR_QUESTION: 'question-type%3Asurvey-free-response%40ODL.MIT.EDU',
	        SURVEY_MC_QUESTION: 'question-type%3Asurvey-multiple-choice%40ODL.MIT.EDU',
	        SURVEY_MR_QUESTION: 'question-type%3Asurvey-multiple-response%40ODL.MIT.EDU'
	    },
	    ChoiceLabels: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],  // for multi-choice choices
	    SequenceNumberTexts: ['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth']  // useful for labeling the Nth wrong answer
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	"use strict";

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  if (!(obj instanceof Object && !Array.isArray(obj))) {
	    throw new Error('keyMirror(...): Argument must be an object.');
	  }
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ },
/* 16 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 17 */
/***/ function(module, exports) {

	// MiddlewareService


	let MiddlewareService = {
	  shouldReturnStatic: () => {
	    let hostLocation = window.location.host;

	    // terrible hack that works because only Cole and Luwen are developing
	    // luwen uses port 8080 to serve the frontend, Cole doesn't.
	    return (hostLocation.indexOf('localhost:8080') >= 0 || hostLocation.indexOf('127.0.0.1:8080') >= 0);
	  },
	  host: () => {
	    let location = window.location.host;

	    if (location.indexOf('localhost') >= 0 || location.indexOf('127.0.0.1') >= 0) {
	        return '/api/v1';
	    } else {
	        return '/fbw-author/api/v1';
	    }
	  },
	  staticFiles: () => {
	    let location = window.location.host;

	    if (location.indexOf('localhost') >= 0 || location.indexOf('127.0.0.1') >= 0) {
	        return '/static';
	    } else {
	        return '/fbw-author/static';
	    }
	  },
	  ckEditor: () => {
	    let location = window.location.host,
	        url;

	    if (location.indexOf('localhost') >= 0 || location.indexOf('127.0.0.1') >= 0) {
	        url = '/static';
	    } else {
	        url = '/fbw-author/static';
	    }
	    return url + '/fbw_author/js/ItemAuthoring/vendor/ckeditor-custom/ckeditor.js';
	  }
	}

	module.exports = MiddlewareService;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LibrariesDispatcher = __webpack_require__(19);
	var AuthoringConstants = __webpack_require__(14);
	var EventEmitter = __webpack_require__(16).EventEmitter;
	var _ = __webpack_require__(5);
	var MiddlewareService = __webpack_require__(17);

	var ActionTypes = AuthoringConstants.ActionTypes;
	var CHANGE_EVENT = ActionTypes.CHANGE_EVENT;

	var _libraries = [];

	var LibrariesStore = _.assign({}, EventEmitter.prototype, {
	    emitChange: function () {
	        this.emit(CHANGE_EVENT, _libraries);
	    },
	    addChangeListener: function (callback) {
	        this.on(CHANGE_EVENT, callback);
	    },
	    removeChangeListener: function (callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	    },
	    getAll: function () {
	        var _this = this;
	        fetch(this.url(), {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            response.json().then(function (data) {
	                _libraries = data;
	                _this.emitChange();
	            });
	        })
	        .catch(function (error) {
	            console.log('Problem with getting libraries: ' + error.message);
	        });
	    },
	    url: function () {
	        if (MiddlewareService.shouldReturnStatic()) return '/raw_data/libraries.json';

	        return MiddlewareService.host() + '/assessment/libraries/';
	    }
	});

	LibrariesStore.dispatchToken = LibrariesDispatcher.register(function (action) {
	    switch(action.type) {
	    }
	});

	module.exports = LibrariesStore;


/***/ },
/* 19 */
9,
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// ItemWrapper.js
	// should include item status, item search, and then items list

	'use strict';

	__webpack_require__(21);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Badge = ReactBS.Badge;
	var Col = ReactBS.Col;
	var Row = ReactBS.Row;

	var LibraryItemsStore = __webpack_require__(8);

	var AddItem = __webpack_require__(25);
	var ItemSearch = __webpack_require__(39);
	var ItemStatus = __webpack_require__(98);

	var ItemWrapper = React.createClass({
	    displayName: 'ItemWrapper',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {
	        // get list of modules to filter by
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Row,
	                null,
	                React.createElement(
	                    Col,
	                    { sm: 6, md: 4, lg: 4 },
	                    React.createElement(ItemStatus, { items: this.props.items,
	                        libraryDescription: this.props.libraryDescription })
	                ),
	                React.createElement(
	                    Col,
	                    { sm: 4, md: 2, lg: 2 },
	                    React.createElement(AddItem, { libraryId: this.props.libraryId })
	                )
	            ),
	            React.createElement(
	                Row,
	                null,
	                React.createElement(
	                    Col,
	                    null,
	                    React.createElement(ItemSearch, { items: this.props.items,
	                        libraries: this.props.libraries,
	                        libraryId: this.props.libraryId })
	                )
	            )
	        );
	    }
	});

	module.exports = ItemWrapper;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(22);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ItemWrapper.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ItemWrapper.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, "", ""]);

	// exports


/***/ },
/* 23 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// AddItem.js
	'use strict';

	__webpack_require__(26);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var _ = __webpack_require__(5);

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var CreateMultipleChoice = __webpack_require__(28);
	var GenusTypes = __webpack_require__(14).GenusTypes;
	var ItemTypesStore = __webpack_require__(38);

	var AddItem = React.createClass({
	    displayName: 'AddItem',

	    getInitialState: function getInitialState() {
	        return {
	            itemTypes: [],
	            questionType: '',
	            showFormModal: false,
	            showTypeModal: false
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	        ItemTypesStore.addChangeListener(function (itemTypes) {
	            _this.setState({ itemTypes: itemTypes });
	        });
	    },
	    componentDidMount: function componentDidMount() {
	        ItemTypesStore.getSupportedItemTypes(this.props.libraryId);
	    },
	    closeFormModal: function closeFormModal() {
	        this.setState({ showFormModal: false });
	    },
	    closeTypeModal: function closeTypeModal() {
	        this.setState({ showTypeModal: false });
	    },
	    onChange: function onChange(e) {
	        var option = e.currentTarget.selectedOptions[0],
	            questionType = option.value;
	        if (questionType !== '-1') {
	            this.setState({ questionType: questionType });
	        }
	    },
	    openTypeModal: function openTypeModal() {
	        this.setState({ showTypeModal: true });
	    },
	    renderQuestionTypes: function renderQuestionTypes() {
	        return _.map(this.state.itemTypes, function (itemType, key) {
	            return React.createElement(
	                'option',
	                { value: key,
	                    key: key },
	                itemType
	            );
	        });
	    },
	    showForm: function showForm() {
	        this.closeTypeModal();
	        this.setState({ showFormModal: true });
	    },
	    render: function render() {
	        var questionForm = '';

	        if (this.state.questionType === 'multiple-choice') {
	            questionForm = React.createElement(CreateMultipleChoice, { close: this.closeFormModal,
	                libraryId: this.props.libraryId,
	                showModal: this.state.showFormModal });
	        }

	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.openTypeModal },
	                React.createElement(Glyphicon, { glyph: 'plus' }),
	                'New Question'
	            ),
	            React.createElement(
	                Modal,
	                { bsSize: 'lg',
	                    show: this.state.showTypeModal,
	                    onHide: this.closeTypeModal },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Select Question Type'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'form',
	                        null,
	                        React.createElement(
	                            FormGroup,
	                            { controlId: 'itemType' },
	                            React.createElement(
	                                ControlLabel,
	                                null,
	                                'Question Type'
	                            ),
	                            React.createElement(
	                                FormControl,
	                                { componentClass: 'select',
	                                    onChange: this.onChange,
	                                    placeholder: 'Select a question type ...' },
	                                React.createElement(
	                                    'option',
	                                    { value: '-1' },
	                                    'Please select a question type ... '
	                                ),
	                                this.renderQuestionTypes()
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { onClick: this.closeTypeModal },
	                        'Cancel'
	                    ),
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'success', onClick: this.showForm },
	                        'Next'
	                    )
	                )
	            ),
	            questionForm
	        );
	    }
	});

	module.exports = AddItem;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(27);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./AddItem.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./AddItem.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".has-error .form-control-feedback {\n    top: 34px;\n}\n\n.glyphicon {\n    margin-right: 5px;\n}", ""]);

	// exports


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// CreateMultipleChoice.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var _ = __webpack_require__(5);

	var $s = __webpack_require__(29);

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var CKEditorModalHack = __webpack_require__(30);
	var ConfigureCKEditor = __webpack_require__(33);
	var ConvertLibraryId2RepositoryId = __webpack_require__(34);
	var GenusTypes = __webpack_require__(14).GenusTypes;
	var Dispatcher = __webpack_require__(9);
	var LibraryItemsStore = __webpack_require__(8);
	var MiddlewareService = __webpack_require__(17);
	var WrongAnswerEditor = __webpack_require__(35);

	var CreateMultipleChoice = React.createClass({
	    displayName: 'CreateMultipleChoice',

	    getInitialState: function getInitialState() {
	        return {
	            correctAnswer: '',
	            correctAnswerError: false,
	            correctAnswerFeedback: '',
	            itemDescription: '',
	            itemDisplayName: '',
	            itemDisplayNameError: false,
	            newWrongAnswerIndices: [],
	            questionFile: '',
	            questionString: '',
	            questionStringError: false,
	            showAlert: false,
	            showModal: true,
	            wrongAnswers: [''],
	            wrongAnswerErrors: [false],
	            wrongAnswerFeedbacks: ['']
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        setTimeout(this.checkNewEditorInstances, 500);
	    },
	    addWrongAnswer: function addWrongAnswer() {
	        var newIndex = this.state.wrongAnswers.length + 1;
	        this.setState({ wrongAnswers: this.state.wrongAnswers.concat(['']) });
	        this.setState({ wrongAnswerErrors: this.state.wrongAnswerErrors.concat([false]) });
	        this.setState({ wrongAnswerFeedbacks: this.state.wrongAnswerFeedbacks.concat(['']) });

	        this.setState({ newWrongAnswerIndices: [newIndex] });
	    },
	    checkNewEditorInstances: function checkNewEditorInstances() {
	        if (this.state.newWrongAnswerIndices.length > 0) {
	            this.initializeNewEditorInstances();
	        }
	    },
	    close: function close() {
	        this.reset();
	        this.props.close();
	    },
	    create: function create(e) {
	        // With CKEditor, need to get the data from CKEditor,
	        // not this.state. http://docs.ckeditor.com/#!/guide/dev_savedata
	        // var data = CKEDITOR.instances.correctAnswer.getData();
	        var payload = {
	            libraryId: this.props.libraryId
	        },
	            correctAnswer = CKEDITOR.instances.correctAnswer.getData(),
	            correctAnswerFeedback = CKEDITOR.instances.correctAnswerFeedback.getData(),
	            questionString = CKEDITOR.instances.questionString.getData(),
	            wrongAnswers = this.getWrongAnswers(),
	            wrongAnswerFeedbacks = this.getWrongAnswerFeedbacks();

	        if (this.state.itemDisplayName === '' || correctAnswer === '' || questionString === '' || wrongAnswers.indexOf('') >= 0) {

	            var firstEmptyWrongAnswer = wrongAnswers.indexOf(''),
	                validationState = [];
	            _.each(this.state.wrongAnswerErrors, function (errorState) {
	                validationState.push(false);
	            });

	            if (firstEmptyWrongAnswer >= 0) {
	                _.each(wrongAnswers, function (wrongAnswer, index) {
	                    if (wrongAnswer === '') {
	                        validationState[index] = true;
	                    }
	                });
	            }

	            this.setState({ showAlert: true });

	            this.setState({ itemDisplayNameError: this.state.itemDisplayName === '' });
	            this.setState({ correctAnswerError: correctAnswer === '' });
	            this.setState({ questionStringError: questionString === '' });
	            this.setState({ wrongAnswerErrors: validationState });
	        } else {
	            payload['itemType'] = 'multiple-choice';
	            payload['displayName'] = this.state.itemDisplayName;
	            payload['description'] = this.state.itemDescription;
	            payload['question'] = {
	                text: questionString,
	                choices: [correctAnswer]
	            };

	            _.each(wrongAnswers, function (wrongAnswer) {
	                payload['question']['choices'].push(wrongAnswer);
	            });
	            payload['answers'] = [{
	                genusTypeId: GenusTypes.CORRECT_ANSWER,
	                choiceId: 0,
	                feedback: correctAnswerFeedback
	            }];

	            _.each(wrongAnswerFeedbacks, function (feedback, index) {
	                var choiceIndex = index + 1,
	                    data = {
	                    genusTypeId: GenusTypes.WRONG_ANSWER,
	                    choiceId: choiceIndex,
	                    feedback: feedback
	                };
	                payload['answers'].push(data);
	            });

	            Dispatcher.dispatch({
	                type: ActionTypes.CREATE_ITEM,
	                content: payload
	            });
	            this.close();
	        }
	    },
	    formatWrongAnswers: function formatWrongAnswers() {
	        var _this = this;
	        return _.map(this.state.wrongAnswers, function (wrongAnswer, index) {
	            var errorState = _this.state.wrongAnswerErrors[index],
	                feedback = _this.state.wrongAnswerFeedbacks[index];

	            return React.createElement(WrongAnswerEditor, { error: errorState,
	                feedback: feedback,
	                index: index,
	                key: index,
	                remove: _this.removeWrongAnswer,
	                text: wrongAnswer.text });
	        });
	    },
	    getWrongAnswerFeedbacks: function getWrongAnswerFeedbacks() {
	        var results = [];

	        _.each(this.state.wrongAnswers, function (wrongAnswer, index) {
	            var visibleIndex = index + 1,
	                editorInstance = 'wrongAnswer' + visibleIndex,
	                feedbackEditor = editorInstance + 'Feedback';
	            results.push(CKEDITOR.instances[feedbackEditor].getData());
	        });

	        return results;
	    },
	    getWrongAnswers: function getWrongAnswers() {
	        var results = [];
	        _.each(this.state.wrongAnswers, function (wrongAnswer, index) {
	            var visibleIndex = index + 1,
	                editorInstance = 'wrongAnswer' + visibleIndex;
	            results.push(CKEDITOR.instances[editorInstance].getData());
	        });

	        return results;
	    },
	    initializeEditorInstance: function initializeEditorInstance(instance) {
	        $s(MiddlewareService.ckEditor(), function () {
	            CKEDITOR.replace(instance);
	        });
	    },
	    initializeEditors: function initializeEditors(e) {
	        var repositoryId = ConvertLibraryId2RepositoryId(this.props.libraryId),
	            _this = this;
	        // CKEditor
	        // Instructions from here
	        // http://stackoverflow.com/questions/29703324/how-to-use-ckeditor-as-an-npm-module-built-with-webpack-or-similar
	        CKEditorModalHack();
	        $s(MiddlewareService.ckEditor(), function () {
	            ConfigureCKEditor(CKEDITOR, repositoryId);
	            _this.initializeEditorInstance('correctAnswer');
	            _this.initializeEditorInstance('correctAnswerFeedback');
	            _this.initializeEditorInstance('questionString');
	            _this.initializeEditorInstance('wrongAnswer1');
	            _this.initializeEditorInstance('wrongAnswer1Feedback');
	        });
	    },
	    initializeNewEditorInstances: function initializeNewEditorInstances() {
	        var _this = this;
	        _.each(this.state.newWrongAnswerIndices, function (index) {
	            var visibleIndex = index,
	                editorInstance = 'wrongAnswer' + visibleIndex,
	                feedbackInstance = editorInstance + 'Feedback';

	            _this.initializeEditorInstance(editorInstance);
	            _this.initializeEditorInstance(feedbackInstance);
	        });

	        this.setState({ newWrongAnswerIndices: [] });
	    },
	    onChange: function onChange(e) {
	        var inputId = e.currentTarget.id,
	            inputValue = e.target.value,
	            update = {};

	        update[inputId] = inputValue;
	        this.setState(update);
	    },
	    removeWrongAnswer: function removeWrongAnswer(index) {
	        var editorInstance = 'wrongAnswer' + (index + 1),
	            feedbackEditor = editorInstance + 'Feedback',
	            updatedWrongAnswers = this.state.wrongAnswers,
	            updatedWrongAnswerErrors = this.state.wrongAnswerErrors,
	            updatedWrongAnswerFeedbacks = this.state.wrongAnswerFeedbacks;

	        updatedWrongAnswers.splice(index, 1);
	        updatedWrongAnswerErrors.splice(index, 1);
	        updatedWrongAnswerFeedbacks.splice(index, 1);

	        // remove wrong answer & feedback & errors with the given index
	        this.setState({ wrongAnswers: updatedWrongAnswers });
	        this.setState({ wrongAnswerErrors: updatedWrongAnswerErrors });
	        this.setState({ wrongAnswerFeedbacks: updatedWrongAnswerFeedbacks });

	        if (this.state.wrongAnswers.length === 0) {
	            this.setState({ wrongAnswers: [''] });
	            this.setState({ wrongAnswerErrors: [false] });
	            this.setState({ wrongAnswerFeedbacks: [''] });
	        }

	        this.resetEditorInstance(editorInstance);
	        this.resetEditorInstance(feedbackEditor);
	    },
	    reset: function reset() {
	        this.setState({ correctAnswer: '' });
	        this.setState({ correctAnswerError: false });
	        this.setState({ correctAnswerFeedback: '' });
	        this.setState({ itemDescription: '' });
	        this.setState({ itemDisplayName: '' });
	        this.setState({ itemDisplayNameError: false });
	        this.setState({ newWrongAnswerIndices: [] });
	        this.setState({ questionFile: '' });
	        this.setState({ questionString: '' });
	        this.setState({ questionStringError: false });
	        this.setState({ showAlert: false });
	        this.setState({ wrongAnswers: [''] });
	        this.setState({ wrongAnswerErrors: [false] });
	        this.setState({ wrongAnswerFeedbacks: [''] });
	    },
	    resetEditorInstance: function resetEditorInstance(instance) {
	        $s(MiddlewareService.ckEditor(), function () {
	            CKEDITOR.instances[instance].setData('');
	            CKEDITOR.instances[instance].destroy();
	            CKEDITOR.replace(instance);
	        });
	    },
	    render: function render() {
	        var alert = '',
	            wrongAnswers = this.formatWrongAnswers(),
	            correctAnswer,
	            itemDisplayName,
	            questionString;

	        if (this.state.showAlert) {
	            alert = React.createElement(
	                Alert,
	                { bsStyle: 'danger' },
	                'You are missing some required fields'
	            );
	        }

	        if (this.state.correctAnswerError) {
	            correctAnswer = React.createElement(
	                FormGroup,
	                { controlId: 'correctAnswer',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Correct Answer'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.correctAnswer,
	                    onChange: this.onChange,
	                    placeholder: 'The correct answer' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            correctAnswer = React.createElement(
	                FormGroup,
	                { controlId: 'correctAnswer' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Correct Answer'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.correctAnswer,
	                    onChange: this.onChange,
	                    placeholder: 'The correct answer' })
	            );
	        }

	        if (this.state.itemDisplayNameError) {
	            itemDisplayName = React.createElement(
	                FormGroup,
	                { controlId: 'itemDisplayName',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Item Name'
	                ),
	                React.createElement(FormControl, { type: 'text',
	                    value: this.state.itemDisplayName,
	                    onChange: this.onChange,
	                    placeholder: 'A name for the item' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            itemDisplayName = React.createElement(
	                FormGroup,
	                { controlId: 'itemDisplayName' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Item Name'
	                ),
	                React.createElement(FormControl, { type: 'text',
	                    value: this.state.itemDisplayName,
	                    onChange: this.onChange,
	                    placeholder: 'A name for the item' })
	            );
	        }

	        if (this.state.questionStringError) {
	            questionString = React.createElement(
	                FormGroup,
	                { controlId: 'questionString',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Question'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.questionString,
	                    onChange: this.onChange,
	                    placeholder: 'Please enter the question string, like \'What is your favorite color?\'' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            questionString = React.createElement(
	                FormGroup,
	                { controlId: 'questionString' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Question'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.questionString,
	                    onChange: this.onChange,
	                    placeholder: 'Please enter the question string, like \'What is your favorite color?\'' })
	            );
	        }

	        return React.createElement(
	            Modal,
	            { backdrop: 'static',
	                bsSize: 'lg',
	                show: this.props.showModal,
	                onHide: this.close,
	                onEntered: this.initializeEditors },
	            React.createElement(
	                Modal.Header,
	                { closeButton: true },
	                React.createElement(
	                    Modal.Title,
	                    null,
	                    'New Multiple Choice Question'
	                )
	            ),
	            React.createElement(
	                Modal.Body,
	                null,
	                alert,
	                React.createElement(
	                    'form',
	                    null,
	                    itemDisplayName,
	                    React.createElement(
	                        FormGroup,
	                        { controlId: 'itemDescription' },
	                        React.createElement(
	                            ControlLabel,
	                            null,
	                            'Item Description (optional)'
	                        ),
	                        React.createElement(FormControl, { type: 'text',
	                            value: this.state.itemDescription,
	                            onChange: this.onChange,
	                            placeholder: 'A description for this item' })
	                    ),
	                    questionString,
	                    correctAnswer,
	                    React.createElement(
	                        FormGroup,
	                        { controlId: 'correctAnswerFeedback' },
	                        React.createElement(
	                            ControlLabel,
	                            null,
	                            'Solution Explanation (recommended)'
	                        ),
	                        React.createElement(FormControl, { componentClass: 'textarea',
	                            value: this.state.correctAnswerFeedback,
	                            onChange: this.onChange,
	                            placeholder: 'Solution Explanation' })
	                    ),
	                    wrongAnswers,
	                    React.createElement(
	                        Button,
	                        { onClick: this.addWrongAnswer,
	                            bsStyle: 'success' },
	                        React.createElement(Glyphicon, { glyph: 'plus' }),
	                        'Add Wrong Answer'
	                    )
	                )
	            ),
	            React.createElement(
	                Modal.Footer,
	                null,
	                React.createElement(
	                    Button,
	                    { onClick: this.close },
	                    'Cancel'
	                ),
	                React.createElement(
	                    Button,
	                    { bsStyle: 'success', onClick: this.create },
	                    'Create'
	                )
	            )
	        );
	    }
	});

	module.exports = CreateMultipleChoice;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  * $script.js JS loader & dependency manager
	  * https://github.com/ded/script.js
	  * (c) Dustin Diaz 2014 | License MIT
	  */

	(function (name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  else this[name] = definition()
	})('$script', function () {
	  var doc = document
	    , head = doc.getElementsByTagName('head')[0]
	    , s = 'string'
	    , f = false
	    , push = 'push'
	    , readyState = 'readyState'
	    , onreadystatechange = 'onreadystatechange'
	    , list = {}
	    , ids = {}
	    , delay = {}
	    , scripts = {}
	    , scriptpath
	    , urlArgs

	  function every(ar, fn) {
	    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f
	    return 1
	  }
	  function each(ar, fn) {
	    every(ar, function (el) {
	      return !fn(el)
	    })
	  }

	  function $script(paths, idOrDone, optDone) {
	    paths = paths[push] ? paths : [paths]
	    var idOrDoneIsDone = idOrDone && idOrDone.call
	      , done = idOrDoneIsDone ? idOrDone : optDone
	      , id = idOrDoneIsDone ? paths.join('') : idOrDone
	      , queue = paths.length
	    function loopFn(item) {
	      return item.call ? item() : list[item]
	    }
	    function callback() {
	      if (!--queue) {
	        list[id] = 1
	        done && done()
	        for (var dset in delay) {
	          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])
	        }
	      }
	    }
	    setTimeout(function () {
	      each(paths, function loading(path, force) {
	        if (path === null) return callback()
	        
	        if (!force && !/^https?:\/\//.test(path) && scriptpath) {
	          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;
	        }
	        
	        if (scripts[path]) {
	          if (id) ids[id] = 1
	          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)
	        }

	        scripts[path] = 1
	        if (id) ids[id] = 1
	        create(path, callback)
	      })
	    }, 0)
	    return $script
	  }

	  function create(path, fn) {
	    var el = doc.createElement('script'), loaded
	    el.onload = el.onerror = el[onreadystatechange] = function () {
	      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;
	      el.onload = el[onreadystatechange] = null
	      loaded = 1
	      scripts[path] = 2
	      fn()
	    }
	    el.async = 1
	    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;
	    head.insertBefore(el, head.lastChild)
	  }

	  $script.get = create

	  $script.order = function (scripts, id, done) {
	    (function callback(s) {
	      s = scripts.shift()
	      !scripts.length ? $script(s, id, done) : $script(s, callback)
	    }())
	  }

	  $script.path = function (p) {
	    scriptpath = p
	  }
	  $script.urlArgs = function (str) {
	    urlArgs = str;
	  }
	  $script.ready = function (deps, ready, req) {
	    deps = deps[push] ? deps : [deps]
	    var missing = [];
	    !each(deps, function (dep) {
	      list[dep] || missing[push](dep);
	    }) && every(deps, function (dep) {return list[dep]}) ?
	      ready() : !function (key) {
	      delay[key] = delay[key] || []
	      delay[key][push](ready)
	      req && req(missing)
	    }(deps.join('|'))
	    return $script
	  }

	  $script.done = function (idOrDone) {
	    $script([null], idOrDone)
	  }

	  return $script
	});


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// CKEditorModalHack.js
	// Needed because stacking a CKEditor dialog window (i.e. for table definition) on
	// top of a Bootstrap / ReactBS modal conflicts, due to the tabindex="-1" setting
	// on the Bootstrap modal backdrop.
	// http://stackoverflow.com/questions/19570661/ckeditor-plugin-text-fields-not-editable


	'use strict';

	var $ = __webpack_require__(31);
	var _ = __webpack_require__(5);


	var CKEditorModalHack = function () {
	    $('.fade.in.modal').attr('tabindex', '');
	};

	module.exports = CKEditorModalHack;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {
	  var create = function(window, noConflictMode) {
	    var navigator = window.navigator;
	    var location = window.location;
	    /*!
	     * jQuery JavaScript Library v1.7.1
	     * http://jquery.com/
	     *
	     * Copyright 2011, John Resig
	     * Dual licensed under the MIT or GPL Version 2 licenses.
	     * http://jquery.org/license
	     *
	     * Includes Sizzle.js
	     * http://sizzlejs.com/
	     * Copyright 2011, The Dojo Foundation
	     * Released under the MIT, BSD, and GPL Licenses.
	     *
	     * Date: Mon Nov 21 21:11:03 2011 -0500
	     */
	    (function( window, undefined ) {
	    
	    // Use the correct document accordingly with window argument (sandbox)
	    var document = window.document,
	    	navigator = window.navigator,
	    	location = window.location;
	    var jQuery = (function() {
	    
	    // Define a local copy of jQuery
	    var jQuery = function( selector, context ) {
	    		// The jQuery object is actually just the init constructor 'enhanced'
	    		return new jQuery.fn.init( selector, context, rootjQuery );
	    	},
	    
	    	// Map over jQuery in case of overwrite
	    	_jQuery = window.jQuery,
	    
	    	// Map over the $ in case of overwrite
	    	_$ = window.$,
	    
	    	// A central reference to the root jQuery(document)
	    	rootjQuery,
	    
	    	// A simple way to check for HTML strings or ID strings
	    	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	    	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
	    
	    	// Check if a string has a non-whitespace character in it
	    	rnotwhite = /\S/,
	    
	    	// Used for trimming whitespace
	    	trimLeft = /^\s+/,
	    	trimRight = /\s+$/,
	    
	    	// Match a standalone tag
	    	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
	    
	    	// JSON RegExp
	    	rvalidchars = /^[\],:{}\s]*$/,
	    	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	    	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	    	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	    
	    	// Useragent RegExp
	    	rwebkit = /(webkit)[ \/]([\w.]+)/,
	    	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	    	rmsie = /(msie) ([\w.]+)/,
	    	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
	    
	    	// Matches dashed string for camelizing
	    	rdashAlpha = /-([a-z]|[0-9])/ig,
	    	rmsPrefix = /^-ms-/,
	    
	    	// Used by jQuery.camelCase as callback to replace()
	    	fcamelCase = function( all, letter ) {
	    		return ( letter + "" ).toUpperCase();
	    	},
	    
	    	// Keep a UserAgent string for use with jQuery.browser
	    	userAgent = navigator.userAgent,
	    
	    	// For matching the engine and version of the browser
	    	browserMatch,
	    
	    	// The deferred used on DOM ready
	    	readyList,
	    
	    	// The ready event handler
	    	DOMContentLoaded,
	    
	    	// Save a reference to some core methods
	    	toString = Object.prototype.toString,
	    	hasOwn = Object.prototype.hasOwnProperty,
	    	push = Array.prototype.push,
	    	slice = Array.prototype.slice,
	    	trim = String.prototype.trim,
	    	indexOf = Array.prototype.indexOf,
	    
	    	// [[Class]] -> type pairs
	    	class2type = {};
	    
	    jQuery.fn = jQuery.prototype = {
	    	constructor: jQuery,
	    	init: function( selector, context, rootjQuery ) {
	    		var match, elem, ret, doc;
	    
	    		// Handle $(""), $(null), or $(undefined)
	    		if ( !selector ) {
	    			return this;
	    		}
	    
	    		// Handle $(DOMElement)
	    		if ( selector.nodeType ) {
	    			this.context = this[0] = selector;
	    			this.length = 1;
	    			return this;
	    		}
	    
	    		// The body element only exists once, optimize finding it
	    		if ( selector === "body" && !context && document.body ) {
	    			this.context = document;
	    			this[0] = document.body;
	    			this.selector = selector;
	    			this.length = 1;
	    			return this;
	    		}
	    
	    		// Handle HTML strings
	    		if ( typeof selector === "string" ) {
	    			// Are we dealing with HTML string or an ID?
	    			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
	    				// Assume that strings that start and end with <> are HTML and skip the regex check
	    				match = [ null, selector, null ];
	    
	    			} else {
	    				match = quickExpr.exec( selector );
	    			}
	    
	    			// Verify a match, and that no context was specified for #id
	    			if ( match && (match[1] || !context) ) {
	    
	    				// HANDLE: $(html) -> $(array)
	    				if ( match[1] ) {
	    					context = context instanceof jQuery ? context[0] : context;
	    					doc = ( context ? context.ownerDocument || context : document );
	    
	    					// If a single string is passed in and it's a single tag
	    					// just do a createElement and skip the rest
	    					ret = rsingleTag.exec( selector );
	    
	    					if ( ret ) {
	    						if ( jQuery.isPlainObject( context ) ) {
	    							selector = [ document.createElement( ret[1] ) ];
	    							jQuery.fn.attr.call( selector, context, true );
	    
	    						} else {
	    							selector = [ doc.createElement( ret[1] ) ];
	    						}
	    
	    					} else {
	    						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
	    						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
	    					}
	    
	    					return jQuery.merge( this, selector );
	    
	    				// HANDLE: $("#id")
	    				} else {
	    					elem = document.getElementById( match[2] );
	    
	    					// Check parentNode to catch when Blackberry 4.6 returns
	    					// nodes that are no longer in the document #6963
	    					if ( elem && elem.parentNode ) {
	    						// Handle the case where IE and Opera return items
	    						// by name instead of ID
	    						if ( elem.id !== match[2] ) {
	    							return rootjQuery.find( selector );
	    						}
	    
	    						// Otherwise, we inject the element directly into the jQuery object
	    						this.length = 1;
	    						this[0] = elem;
	    					}
	    
	    					this.context = document;
	    					this.selector = selector;
	    					return this;
	    				}
	    
	    			// HANDLE: $(expr, $(...))
	    			} else if ( !context || context.jquery ) {
	    				return ( context || rootjQuery ).find( selector );
	    
	    			// HANDLE: $(expr, context)
	    			// (which is just equivalent to: $(context).find(expr)
	    			} else {
	    				return this.constructor( context ).find( selector );
	    			}
	    
	    		// HANDLE: $(function)
	    		// Shortcut for document ready
	    		} else if ( jQuery.isFunction( selector ) ) {
	    			return rootjQuery.ready( selector );
	    		}
	    
	    		if ( selector.selector !== undefined ) {
	    			this.selector = selector.selector;
	    			this.context = selector.context;
	    		}
	    
	    		return jQuery.makeArray( selector, this );
	    	},
	    
	    	// Start with an empty selector
	    	selector: "",
	    
	    	// The current version of jQuery being used
	    	jquery: "1.7.1",
	    
	    	// The default length of a jQuery object is 0
	    	length: 0,
	    
	    	// The number of elements contained in the matched element set
	    	size: function() {
	    		return this.length;
	    	},
	    
	    	toArray: function() {
	    		return slice.call( this, 0 );
	    	},
	    
	    	// Get the Nth element in the matched element set OR
	    	// Get the whole matched element set as a clean array
	    	get: function( num ) {
	    		return num == null ?
	    
	    			// Return a 'clean' array
	    			this.toArray() :
	    
	    			// Return just the object
	    			( num < 0 ? this[ this.length + num ] : this[ num ] );
	    	},
	    
	    	// Take an array of elements and push it onto the stack
	    	// (returning the new matched element set)
	    	pushStack: function( elems, name, selector ) {
	    		// Build a new jQuery matched element set
	    		var ret = this.constructor();
	    
	    		if ( jQuery.isArray( elems ) ) {
	    			push.apply( ret, elems );
	    
	    		} else {
	    			jQuery.merge( ret, elems );
	    		}
	    
	    		// Add the old object onto the stack (as a reference)
	    		ret.prevObject = this;
	    
	    		ret.context = this.context;
	    
	    		if ( name === "find" ) {
	    			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
	    		} else if ( name ) {
	    			ret.selector = this.selector + "." + name + "(" + selector + ")";
	    		}
	    
	    		// Return the newly-formed element set
	    		return ret;
	    	},
	    
	    	// Execute a callback for every element in the matched set.
	    	// (You can seed the arguments with an array of args, but this is
	    	// only used internally.)
	    	each: function( callback, args ) {
	    		return jQuery.each( this, callback, args );
	    	},
	    
	    	ready: function( fn ) {
	    		// Attach the listeners
	    		jQuery.bindReady();
	    
	    		// Add the callback
	    		readyList.add( fn );
	    
	    		return this;
	    	},
	    
	    	eq: function( i ) {
	    		i = +i;
	    		return i === -1 ?
	    			this.slice( i ) :
	    			this.slice( i, i + 1 );
	    	},
	    
	    	first: function() {
	    		return this.eq( 0 );
	    	},
	    
	    	last: function() {
	    		return this.eq( -1 );
	    	},
	    
	    	slice: function() {
	    		return this.pushStack( slice.apply( this, arguments ),
	    			"slice", slice.call(arguments).join(",") );
	    	},
	    
	    	map: function( callback ) {
	    		return this.pushStack( jQuery.map(this, function( elem, i ) {
	    			return callback.call( elem, i, elem );
	    		}));
	    	},
	    
	    	end: function() {
	    		return this.prevObject || this.constructor(null);
	    	},
	    
	    	// For internal use only.
	    	// Behaves like an Array's method, not like a jQuery method.
	    	push: push,
	    	sort: [].sort,
	    	splice: [].splice
	    };
	    
	    // Give the init function the jQuery prototype for later instantiation
	    jQuery.fn.init.prototype = jQuery.fn;
	    
	    jQuery.extend = jQuery.fn.extend = function() {
	    	var options, name, src, copy, copyIsArray, clone,
	    		target = arguments[0] || {},
	    		i = 1,
	    		length = arguments.length,
	    		deep = false;
	    
	    	// Handle a deep copy situation
	    	if ( typeof target === "boolean" ) {
	    		deep = target;
	    		target = arguments[1] || {};
	    		// skip the boolean and the target
	    		i = 2;
	    	}
	    
	    	// Handle case when target is a string or something (possible in deep copy)
	    	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
	    		target = {};
	    	}
	    
	    	// extend jQuery itself if only one argument is passed
	    	if ( length === i ) {
	    		target = this;
	    		--i;
	    	}
	    
	    	for ( ; i < length; i++ ) {
	    		// Only deal with non-null/undefined values
	    		if ( (options = arguments[ i ]) != null ) {
	    			// Extend the base object
	    			for ( name in options ) {
	    				src = target[ name ];
	    				copy = options[ name ];
	    
	    				// Prevent never-ending loop
	    				if ( target === copy ) {
	    					continue;
	    				}
	    
	    				// Recurse if we're merging plain objects or arrays
	    				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
	    					if ( copyIsArray ) {
	    						copyIsArray = false;
	    						clone = src && jQuery.isArray(src) ? src : [];
	    
	    					} else {
	    						clone = src && jQuery.isPlainObject(src) ? src : {};
	    					}
	    
	    					// Never move original objects, clone them
	    					target[ name ] = jQuery.extend( deep, clone, copy );
	    
	    				// Don't bring in undefined values
	    				} else if ( copy !== undefined ) {
	    					target[ name ] = copy;
	    				}
	    			}
	    		}
	    	}
	    
	    	// Return the modified object
	    	return target;
	    };
	    
	    jQuery.extend({
	    	noConflict: function( deep ) {
	    		if ( window.$ === jQuery ) {
	    			window.$ = _$;
	    		}
	    
	    		if ( deep && window.jQuery === jQuery ) {
	    			window.jQuery = _jQuery;
	    		}
	    
	    		return jQuery;
	    	},
	    
	    	// Is the DOM ready to be used? Set to true once it occurs.
	    	isReady: false,
	    
	    	// A counter to track how many items to wait for before
	    	// the ready event fires. See #6781
	    	readyWait: 1,
	    
	    	// Hold (or release) the ready event
	    	holdReady: function( hold ) {
	    		if ( hold ) {
	    			jQuery.readyWait++;
	    		} else {
	    			jQuery.ready( true );
	    		}
	    	},
	    
	    	// Handle when the DOM is ready
	    	ready: function( wait ) {
	    		// Either a released hold or an DOMready/load event and not yet ready
	    		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
	    			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
	    			if ( !document.body ) {
	    				return setTimeout( jQuery.ready, 1 );
	    			}
	    
	    			// Remember that the DOM is ready
	    			jQuery.isReady = true;
	    
	    			// If a normal DOM Ready event fired, decrement, and wait if need be
	    			if ( wait !== true && --jQuery.readyWait > 0 ) {
	    				return;
	    			}
	    
	    			// If there are functions bound, to execute
	    			readyList.fireWith( document, [ jQuery ] );
	    
	    			// Trigger any bound ready events
	    			if ( jQuery.fn.trigger ) {
	    				jQuery( document ).trigger( "ready" ).off( "ready" );
	    			}
	    		}
	    	},
	    
	    	bindReady: function() {
	    		if ( readyList ) {
	    			return;
	    		}
	    
	    		readyList = jQuery.Callbacks( "once memory" );
	    
	    		// Catch cases where $(document).ready() is called after the
	    		// browser event has already occurred.
	    		if ( document.readyState === "complete" ) {
	    			// Handle it asynchronously to allow scripts the opportunity to delay ready
	    			return setTimeout( jQuery.ready, 1 );
	    		}
	    
	    		// Mozilla, Opera and webkit nightlies currently support this event
	    		if ( document.addEventListener ) {
	    			// Use the handy event callback
	    			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
	    
	    			// A fallback to window.onload, that will always work
	    			window.addEventListener( "load", jQuery.ready, false );
	    
	    		// If IE event model is used
	    		} else if ( document.attachEvent ) {
	    			// ensure firing before onload,
	    			// maybe late but safe also for iframes
	    			document.attachEvent( "onreadystatechange", DOMContentLoaded );
	    
	    			// A fallback to window.onload, that will always work
	    			window.attachEvent( "onload", jQuery.ready );
	    
	    			// If IE and not a frame
	    			// continually check to see if the document is ready
	    			var toplevel = false;
	    
	    			try {
	    				toplevel = window.frameElement == null;
	    			} catch(e) {}
	    
	    			if ( document.documentElement.doScroll && toplevel ) {
	    				doScrollCheck();
	    			}
	    		}
	    	},
	    
	    	// See test/unit/core.js for details concerning isFunction.
	    	// Since version 1.3, DOM methods and functions like alert
	    	// aren't supported. They return false on IE (#2968).
	    	isFunction: function( obj ) {
	    		return jQuery.type(obj) === "function";
	    	},
	    
	    	isArray: Array.isArray || function( obj ) {
	    		return jQuery.type(obj) === "array";
	    	},
	    
	    	// A crude way of determining if an object is a window
	    	isWindow: function( obj ) {
	    		return obj && typeof obj === "object" && "setInterval" in obj;
	    	},
	    
	    	isNumeric: function( obj ) {
	    		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	    	},
	    
	    	type: function( obj ) {
	    		return obj == null ?
	    			String( obj ) :
	    			class2type[ toString.call(obj) ] || "object";
	    	},
	    
	    	isPlainObject: function( obj ) {
	    		// Must be an Object.
	    		// Because of IE, we also have to check the presence of the constructor property.
	    		// Make sure that DOM nodes and window objects don't pass through, as well
	    		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
	    			return false;
	    		}
	    
	    		try {
	    			// Not own constructor property must be Object
	    			if ( obj.constructor &&
	    				!hasOwn.call(obj, "constructor") &&
	    				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
	    				return false;
	    			}
	    		} catch ( e ) {
	    			// IE8,9 Will throw exceptions on certain host objects #9897
	    			return false;
	    		}
	    
	    		// Own properties are enumerated firstly, so to speed up,
	    		// if last one is own, then all properties are own.
	    
	    		var key;
	    		for ( key in obj ) {}
	    
	    		return key === undefined || hasOwn.call( obj, key );
	    	},
	    
	    	isEmptyObject: function( obj ) {
	    		for ( var name in obj ) {
	    			return false;
	    		}
	    		return true;
	    	},
	    
	    	error: function( msg ) {
	    		throw new Error( msg );
	    	},
	    
	    	parseJSON: function( data ) {
	    		if ( typeof data !== "string" || !data ) {
	    			return null;
	    		}
	    
	    		// Make sure leading/trailing whitespace is removed (IE can't handle it)
	    		data = jQuery.trim( data );
	    
	    		// Attempt to parse using the native JSON parser first
	    		if ( window.JSON && window.JSON.parse ) {
	    			return window.JSON.parse( data );
	    		}
	    
	    		// Make sure the incoming data is actual JSON
	    		// Logic borrowed from http://json.org/json2.js
	    		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
	    			.replace( rvalidtokens, "]" )
	    			.replace( rvalidbraces, "")) ) {
	    
	    			return ( new Function( "return " + data ) )();
	    
	    		}
	    		jQuery.error( "Invalid JSON: " + data );
	    	},
	    
	    	// Cross-browser xml parsing
	    	parseXML: function( data ) {
	    		var xml, tmp;
	    		try {
	    			if ( window.DOMParser ) { // Standard
	    				tmp = new DOMParser();
	    				xml = tmp.parseFromString( data , "text/xml" );
	    			} else { // IE
	    				xml = new ActiveXObject( "Microsoft.XMLDOM" );
	    				xml.async = "false";
	    				xml.loadXML( data );
	    			}
	    		} catch( e ) {
	    			xml = undefined;
	    		}
	    		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
	    			jQuery.error( "Invalid XML: " + data );
	    		}
	    		return xml;
	    	},
	    
	    	noop: function() {},
	    
	    	// Evaluates a script in a global context
	    	// Workarounds based on findings by Jim Driscoll
	    	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	    	globalEval: function( data ) {
	    		if ( data && rnotwhite.test( data ) ) {
	    			// We use execScript on Internet Explorer
	    			// We use an anonymous function so that context is window
	    			// rather than jQuery in Firefox
	    			( window.execScript || function( data ) {
	    				window[ "eval" ].call( window, data );
	    			} )( data );
	    		}
	    	},
	    
	    	// Convert dashed to camelCase; used by the css and data modules
	    	// Microsoft forgot to hump their vendor prefix (#9572)
	    	camelCase: function( string ) {
	    		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	    	},
	    
	    	nodeName: function( elem, name ) {
	    		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	    	},
	    
	    	// args is for internal usage only
	    	each: function( object, callback, args ) {
	    		var name, i = 0,
	    			length = object.length,
	    			isObj = length === undefined || jQuery.isFunction( object );
	    
	    		if ( args ) {
	    			if ( isObj ) {
	    				for ( name in object ) {
	    					if ( callback.apply( object[ name ], args ) === false ) {
	    						break;
	    					}
	    				}
	    			} else {
	    				for ( ; i < length; ) {
	    					if ( callback.apply( object[ i++ ], args ) === false ) {
	    						break;
	    					}
	    				}
	    			}
	    
	    		// A special, fast, case for the most common use of each
	    		} else {
	    			if ( isObj ) {
	    				for ( name in object ) {
	    					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
	    						break;
	    					}
	    				}
	    			} else {
	    				for ( ; i < length; ) {
	    					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
	    						break;
	    					}
	    				}
	    			}
	    		}
	    
	    		return object;
	    	},
	    
	    	// Use native String.trim function wherever possible
	    	trim: trim ?
	    		function( text ) {
	    			return text == null ?
	    				"" :
	    				trim.call( text );
	    		} :
	    
	    		// Otherwise use our own trimming functionality
	    		function( text ) {
	    			return text == null ?
	    				"" :
	    				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
	    		},
	    
	    	// results is for internal usage only
	    	makeArray: function( array, results ) {
	    		var ret = results || [];
	    
	    		if ( array != null ) {
	    			// The window, strings (and functions) also have 'length'
	    			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
	    			var type = jQuery.type( array );
	    
	    			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
	    				push.call( ret, array );
	    			} else {
	    				jQuery.merge( ret, array );
	    			}
	    		}
	    
	    		return ret;
	    	},
	    
	    	inArray: function( elem, array, i ) {
	    		var len;
	    
	    		if ( array ) {
	    			if ( indexOf ) {
	    				return indexOf.call( array, elem, i );
	    			}
	    
	    			len = array.length;
	    			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
	    
	    			for ( ; i < len; i++ ) {
	    				// Skip accessing in sparse arrays
	    				if ( i in array && array[ i ] === elem ) {
	    					return i;
	    				}
	    			}
	    		}
	    
	    		return -1;
	    	},
	    
	    	merge: function( first, second ) {
	    		var i = first.length,
	    			j = 0;
	    
	    		if ( typeof second.length === "number" ) {
	    			for ( var l = second.length; j < l; j++ ) {
	    				first[ i++ ] = second[ j ];
	    			}
	    
	    		} else {
	    			while ( second[j] !== undefined ) {
	    				first[ i++ ] = second[ j++ ];
	    			}
	    		}
	    
	    		first.length = i;
	    
	    		return first;
	    	},
	    
	    	grep: function( elems, callback, inv ) {
	    		var ret = [], retVal;
	    		inv = !!inv;
	    
	    		// Go through the array, only saving the items
	    		// that pass the validator function
	    		for ( var i = 0, length = elems.length; i < length; i++ ) {
	    			retVal = !!callback( elems[ i ], i );
	    			if ( inv !== retVal ) {
	    				ret.push( elems[ i ] );
	    			}
	    		}
	    
	    		return ret;
	    	},
	    
	    	// arg is for internal usage only
	    	map: function( elems, callback, arg ) {
	    		var value, key, ret = [],
	    			i = 0,
	    			length = elems.length,
	    			// jquery objects are treated as arrays
	    			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;
	    
	    		// Go through the array, translating each of the items to their
	    		if ( isArray ) {
	    			for ( ; i < length; i++ ) {
	    				value = callback( elems[ i ], i, arg );
	    
	    				if ( value != null ) {
	    					ret[ ret.length ] = value;
	    				}
	    			}
	    
	    		// Go through every key on the object,
	    		} else {
	    			for ( key in elems ) {
	    				value = callback( elems[ key ], key, arg );
	    
	    				if ( value != null ) {
	    					ret[ ret.length ] = value;
	    				}
	    			}
	    		}
	    
	    		// Flatten any nested arrays
	    		return ret.concat.apply( [], ret );
	    	},
	    
	    	// A global GUID counter for objects
	    	guid: 1,
	    
	    	// Bind a function to a context, optionally partially applying any
	    	// arguments.
	    	proxy: function( fn, context ) {
	    		if ( typeof context === "string" ) {
	    			var tmp = fn[ context ];
	    			context = fn;
	    			fn = tmp;
	    		}
	    
	    		// Quick check to determine if target is callable, in the spec
	    		// this throws a TypeError, but we will just return undefined.
	    		if ( !jQuery.isFunction( fn ) ) {
	    			return undefined;
	    		}
	    
	    		// Simulated bind
	    		var args = slice.call( arguments, 2 ),
	    			proxy = function() {
	    				return fn.apply( context, args.concat( slice.call( arguments ) ) );
	    			};
	    
	    		// Set the guid of unique handler to the same of original handler, so it can be removed
	    		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
	    
	    		return proxy;
	    	},
	    
	    	// Mutifunctional method to get and set values to a collection
	    	// The value/s can optionally be executed if it's a function
	    	access: function( elems, key, value, exec, fn, pass ) {
	    		var length = elems.length;
	    
	    		// Setting many attributes
	    		if ( typeof key === "object" ) {
	    			for ( var k in key ) {
	    				jQuery.access( elems, k, key[k], exec, fn, value );
	    			}
	    			return elems;
	    		}
	    
	    		// Setting one attribute
	    		if ( value !== undefined ) {
	    			// Optionally, function values get executed if exec is true
	    			exec = !pass && exec && jQuery.isFunction(value);
	    
	    			for ( var i = 0; i < length; i++ ) {
	    				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
	    			}
	    
	    			return elems;
	    		}
	    
	    		// Getting an attribute
	    		return length ? fn( elems[0], key ) : undefined;
	    	},
	    
	    	now: function() {
	    		return ( new Date() ).getTime();
	    	},
	    
	    	// Use of jQuery.browser is frowned upon.
	    	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	    	uaMatch: function( ua ) {
	    		ua = ua.toLowerCase();
	    
	    		var match = rwebkit.exec( ua ) ||
	    			ropera.exec( ua ) ||
	    			rmsie.exec( ua ) ||
	    			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
	    			[];
	    
	    		return { browser: match[1] || "", version: match[2] || "0" };
	    	},
	    
	    	sub: function() {
	    		function jQuerySub( selector, context ) {
	    			return new jQuerySub.fn.init( selector, context );
	    		}
	    		jQuery.extend( true, jQuerySub, this );
	    		jQuerySub.superclass = this;
	    		jQuerySub.fn = jQuerySub.prototype = this();
	    		jQuerySub.fn.constructor = jQuerySub;
	    		jQuerySub.sub = this.sub;
	    		jQuerySub.fn.init = function init( selector, context ) {
	    			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
	    				context = jQuerySub( context );
	    			}
	    
	    			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	    		};
	    		jQuerySub.fn.init.prototype = jQuerySub.fn;
	    		var rootjQuerySub = jQuerySub(document);
	    		return jQuerySub;
	    	},
	    
	    	browser: {}
	    });
	    
	    // Populate the class2type map
	    jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	    	class2type[ "[object " + name + "]" ] = name.toLowerCase();
	    });
	    
	    browserMatch = jQuery.uaMatch( userAgent );
	    if ( browserMatch.browser ) {
	    	jQuery.browser[ browserMatch.browser ] = true;
	    	jQuery.browser.version = browserMatch.version;
	    }
	    
	    // Deprecated, use jQuery.browser.webkit instead
	    if ( jQuery.browser.webkit ) {
	    	jQuery.browser.safari = true;
	    }
	    
	    // IE doesn't match non-breaking spaces with \s
	    if ( rnotwhite.test( "\xA0" ) ) {
	    	trimLeft = /^[\s\xA0]+/;
	    	trimRight = /[\s\xA0]+$/;
	    }
	    
	    // All jQuery objects should point back to these
	    rootjQuery = jQuery(document);
	    
	    // Cleanup functions for the document ready method
	    if ( document.addEventListener ) {
	    	DOMContentLoaded = function() {
	    		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
	    		jQuery.ready();
	    	};
	    
	    } else if ( document.attachEvent ) {
	    	DOMContentLoaded = function() {
	    		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
	    		if ( document.readyState === "complete" ) {
	    			document.detachEvent( "onreadystatechange", DOMContentLoaded );
	    			jQuery.ready();
	    		}
	    	};
	    }
	    
	    // The DOM ready check for Internet Explorer
	    function doScrollCheck() {
	    	if ( jQuery.isReady ) {
	    		return;
	    	}
	    
	    	try {
	    		// If IE is used, use the trick by Diego Perini
	    		// http://javascript.nwbox.com/IEContentLoaded/
	    		document.documentElement.doScroll("left");
	    	} catch(e) {
	    		setTimeout( doScrollCheck, 1 );
	    		return;
	    	}
	    
	    	// and execute any waiting functions
	    	jQuery.ready();
	    }
	    
	    return jQuery;
	    
	    })();
	    
	    
	    // String to Object flags format cache
	    var flagsCache = {};
	    
	    // Convert String-formatted flags into Object-formatted ones and store in cache
	    function createFlags( flags ) {
	    	var object = flagsCache[ flags ] = {},
	    		i, length;
	    	flags = flags.split( /\s+/ );
	    	for ( i = 0, length = flags.length; i < length; i++ ) {
	    		object[ flags[i] ] = true;
	    	}
	    	return object;
	    }
	    
	    /*
	     * Create a callback list using the following parameters:
	     *
	     *	flags:	an optional list of space-separated flags that will change how
	     *			the callback list behaves
	     *
	     * By default a callback list will act like an event callback list and can be
	     * "fired" multiple times.
	     *
	     * Possible flags:
	     *
	     *	once:			will ensure the callback list can only be fired once (like a Deferred)
	     *
	     *	memory:			will keep track of previous values and will call any callback added
	     *					after the list has been fired right away with the latest "memorized"
	     *					values (like a Deferred)
	     *
	     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	     *
	     *	stopOnFalse:	interrupt callings when a callback returns false
	     *
	     */
	    jQuery.Callbacks = function( flags ) {
	    
	    	// Convert flags from String-formatted to Object-formatted
	    	// (we check in cache first)
	    	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};
	    
	    	var // Actual callback list
	    		list = [],
	    		// Stack of fire calls for repeatable lists
	    		stack = [],
	    		// Last fire value (for non-forgettable lists)
	    		memory,
	    		// Flag to know if list is currently firing
	    		firing,
	    		// First callback to fire (used internally by add and fireWith)
	    		firingStart,
	    		// End of the loop when firing
	    		firingLength,
	    		// Index of currently firing callback (modified by remove if needed)
	    		firingIndex,
	    		// Add one or several callbacks to the list
	    		add = function( args ) {
	    			var i,
	    				length,
	    				elem,
	    				type,
	    				actual;
	    			for ( i = 0, length = args.length; i < length; i++ ) {
	    				elem = args[ i ];
	    				type = jQuery.type( elem );
	    				if ( type === "array" ) {
	    					// Inspect recursively
	    					add( elem );
	    				} else if ( type === "function" ) {
	    					// Add if not in unique mode and callback is not in
	    					if ( !flags.unique || !self.has( elem ) ) {
	    						list.push( elem );
	    					}
	    				}
	    			}
	    		},
	    		// Fire callbacks
	    		fire = function( context, args ) {
	    			args = args || [];
	    			memory = !flags.memory || [ context, args ];
	    			firing = true;
	    			firingIndex = firingStart || 0;
	    			firingStart = 0;
	    			firingLength = list.length;
	    			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
	    				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
	    					memory = true; // Mark as halted
	    					break;
	    				}
	    			}
	    			firing = false;
	    			if ( list ) {
	    				if ( !flags.once ) {
	    					if ( stack && stack.length ) {
	    						memory = stack.shift();
	    						self.fireWith( memory[ 0 ], memory[ 1 ] );
	    					}
	    				} else if ( memory === true ) {
	    					self.disable();
	    				} else {
	    					list = [];
	    				}
	    			}
	    		},
	    		// Actual Callbacks object
	    		self = {
	    			// Add a callback or a collection of callbacks to the list
	    			add: function() {
	    				if ( list ) {
	    					var length = list.length;
	    					add( arguments );
	    					// Do we need to add the callbacks to the
	    					// current firing batch?
	    					if ( firing ) {
	    						firingLength = list.length;
	    					// With memory, if we're not firing then
	    					// we should call right away, unless previous
	    					// firing was halted (stopOnFalse)
	    					} else if ( memory && memory !== true ) {
	    						firingStart = length;
	    						fire( memory[ 0 ], memory[ 1 ] );
	    					}
	    				}
	    				return this;
	    			},
	    			// Remove a callback from the list
	    			remove: function() {
	    				if ( list ) {
	    					var args = arguments,
	    						argIndex = 0,
	    						argLength = args.length;
	    					for ( ; argIndex < argLength ; argIndex++ ) {
	    						for ( var i = 0; i < list.length; i++ ) {
	    							if ( args[ argIndex ] === list[ i ] ) {
	    								// Handle firingIndex and firingLength
	    								if ( firing ) {
	    									if ( i <= firingLength ) {
	    										firingLength--;
	    										if ( i <= firingIndex ) {
	    											firingIndex--;
	    										}
	    									}
	    								}
	    								// Remove the element
	    								list.splice( i--, 1 );
	    								// If we have some unicity property then
	    								// we only need to do this once
	    								if ( flags.unique ) {
	    									break;
	    								}
	    							}
	    						}
	    					}
	    				}
	    				return this;
	    			},
	    			// Control if a given callback is in the list
	    			has: function( fn ) {
	    				if ( list ) {
	    					var i = 0,
	    						length = list.length;
	    					for ( ; i < length; i++ ) {
	    						if ( fn === list[ i ] ) {
	    							return true;
	    						}
	    					}
	    				}
	    				return false;
	    			},
	    			// Remove all callbacks from the list
	    			empty: function() {
	    				list = [];
	    				return this;
	    			},
	    			// Have the list do nothing anymore
	    			disable: function() {
	    				list = stack = memory = undefined;
	    				return this;
	    			},
	    			// Is it disabled?
	    			disabled: function() {
	    				return !list;
	    			},
	    			// Lock the list in its current state
	    			lock: function() {
	    				stack = undefined;
	    				if ( !memory || memory === true ) {
	    					self.disable();
	    				}
	    				return this;
	    			},
	    			// Is it locked?
	    			locked: function() {
	    				return !stack;
	    			},
	    			// Call all callbacks with the given context and arguments
	    			fireWith: function( context, args ) {
	    				if ( stack ) {
	    					if ( firing ) {
	    						if ( !flags.once ) {
	    							stack.push( [ context, args ] );
	    						}
	    					} else if ( !( flags.once && memory ) ) {
	    						fire( context, args );
	    					}
	    				}
	    				return this;
	    			},
	    			// Call all the callbacks with the given arguments
	    			fire: function() {
	    				self.fireWith( this, arguments );
	    				return this;
	    			},
	    			// To know if the callbacks have already been called at least once
	    			fired: function() {
	    				return !!memory;
	    			}
	    		};
	    
	    	return self;
	    };
	    
	    
	    
	    
	    var // Static reference to slice
	    	sliceDeferred = [].slice;
	    
	    jQuery.extend({
	    
	    	Deferred: function( func ) {
	    		var doneList = jQuery.Callbacks( "once memory" ),
	    			failList = jQuery.Callbacks( "once memory" ),
	    			progressList = jQuery.Callbacks( "memory" ),
	    			state = "pending",
	    			lists = {
	    				resolve: doneList,
	    				reject: failList,
	    				notify: progressList
	    			},
	    			promise = {
	    				done: doneList.add,
	    				fail: failList.add,
	    				progress: progressList.add,
	    
	    				state: function() {
	    					return state;
	    				},
	    
	    				// Deprecated
	    				isResolved: doneList.fired,
	    				isRejected: failList.fired,
	    
	    				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
	    					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
	    					return this;
	    				},
	    				always: function() {
	    					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
	    					return this;
	    				},
	    				pipe: function( fnDone, fnFail, fnProgress ) {
	    					return jQuery.Deferred(function( newDefer ) {
	    						jQuery.each( {
	    							done: [ fnDone, "resolve" ],
	    							fail: [ fnFail, "reject" ],
	    							progress: [ fnProgress, "notify" ]
	    						}, function( handler, data ) {
	    							var fn = data[ 0 ],
	    								action = data[ 1 ],
	    								returned;
	    							if ( jQuery.isFunction( fn ) ) {
	    								deferred[ handler ](function() {
	    									returned = fn.apply( this, arguments );
	    									if ( returned && jQuery.isFunction( returned.promise ) ) {
	    										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
	    									} else {
	    										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
	    									}
	    								});
	    							} else {
	    								deferred[ handler ]( newDefer[ action ] );
	    							}
	    						});
	    					}).promise();
	    				},
	    				// Get a promise for this deferred
	    				// If obj is provided, the promise aspect is added to the object
	    				promise: function( obj ) {
	    					if ( obj == null ) {
	    						obj = promise;
	    					} else {
	    						for ( var key in promise ) {
	    							obj[ key ] = promise[ key ];
	    						}
	    					}
	    					return obj;
	    				}
	    			},
	    			deferred = promise.promise({}),
	    			key;
	    
	    		for ( key in lists ) {
	    			deferred[ key ] = lists[ key ].fire;
	    			deferred[ key + "With" ] = lists[ key ].fireWith;
	    		}
	    
	    		// Handle state
	    		deferred.done( function() {
	    			state = "resolved";
	    		}, failList.disable, progressList.lock ).fail( function() {
	    			state = "rejected";
	    		}, doneList.disable, progressList.lock );
	    
	    		// Call given func if any
	    		if ( func ) {
	    			func.call( deferred, deferred );
	    		}
	    
	    		// All done!
	    		return deferred;
	    	},
	    
	    	// Deferred helper
	    	when: function( firstParam ) {
	    		var args = sliceDeferred.call( arguments, 0 ),
	    			i = 0,
	    			length = args.length,
	    			pValues = new Array( length ),
	    			count = length,
	    			pCount = length,
	    			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
	    				firstParam :
	    				jQuery.Deferred(),
	    			promise = deferred.promise();
	    		function resolveFunc( i ) {
	    			return function( value ) {
	    				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
	    				if ( !( --count ) ) {
	    					deferred.resolveWith( deferred, args );
	    				}
	    			};
	    		}
	    		function progressFunc( i ) {
	    			return function( value ) {
	    				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
	    				deferred.notifyWith( promise, pValues );
	    			};
	    		}
	    		if ( length > 1 ) {
	    			for ( ; i < length; i++ ) {
	    				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
	    					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
	    				} else {
	    					--count;
	    				}
	    			}
	    			if ( !count ) {
	    				deferred.resolveWith( deferred, args );
	    			}
	    		} else if ( deferred !== firstParam ) {
	    			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
	    		}
	    		return promise;
	    	}
	    });
	    
	    
	    
	    
	    jQuery.support = (function() {
	    
	    	var support,
	    		all,
	    		a,
	    		select,
	    		opt,
	    		input,
	    		marginDiv,
	    		fragment,
	    		tds,
	    		events,
	    		eventName,
	    		i,
	    		isSupported,
	    		div = document.createElement( "div" ),
	    		documentElement = document.documentElement;
	    
	    	// Preliminary tests
	    	div.setAttribute("className", "t");
	    	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
	    
	    	all = div.getElementsByTagName( "*" );
	    	a = div.getElementsByTagName( "a" )[ 0 ];
	    
	    	// Can't get basic test support
	    	if ( !all || !all.length || !a ) {
	    		return {};
	    	}
	    
	    	// First batch of supports tests
	    	select = document.createElement( "select" );
	    	opt = select.appendChild( document.createElement("option") );
	    	input = div.getElementsByTagName( "input" )[ 0 ];
	    
	    	support = {
	    		// IE strips leading whitespace when .innerHTML is used
	    		leadingWhitespace: ( div.firstChild.nodeType === 3 ),
	    
	    		// Make sure that tbody elements aren't automatically inserted
	    		// IE will insert them into empty tables
	    		tbody: !div.getElementsByTagName("tbody").length,
	    
	    		// Make sure that link elements get serialized correctly by innerHTML
	    		// This requires a wrapper element in IE
	    		htmlSerialize: !!div.getElementsByTagName("link").length,
	    
	    		// Get the style information from getAttribute
	    		// (IE uses .cssText instead)
	    		style: /top/.test( a.getAttribute("style") ),
	    
	    		// Make sure that URLs aren't manipulated
	    		// (IE normalizes it by default)
	    		hrefNormalized: ( a.getAttribute("href") === "/a" ),
	    
	    		// Make sure that element opacity exists
	    		// (IE uses filter instead)
	    		// Use a regex to work around a WebKit issue. See #5145
	    		opacity: /^0.55/.test( a.style.opacity ),
	    
	    		// Verify style float existence
	    		// (IE uses styleFloat instead of cssFloat)
	    		cssFloat: !!a.style.cssFloat,
	    
	    		// Make sure that if no value is specified for a checkbox
	    		// that it defaults to "on".
	    		// (WebKit defaults to "" instead)
	    		checkOn: ( input.value === "on" ),
	    
	    		// Make sure that a selected-by-default option has a working selected property.
	    		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	    		optSelected: opt.selected,
	    
	    		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	    		getSetAttribute: div.className !== "t",
	    
	    		// Tests for enctype support on a form(#6743)
	    		enctype: !!document.createElement("form").enctype,
	    
	    		// Makes sure cloning an html5 element does not cause problems
	    		// Where outerHTML is undefined, this still works
	    		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",
	    
	    		// Will be defined later
	    		submitBubbles: true,
	    		changeBubbles: true,
	    		focusinBubbles: false,
	    		deleteExpando: true,
	    		noCloneEvent: true,
	    		inlineBlockNeedsLayout: false,
	    		shrinkWrapBlocks: false,
	    		reliableMarginRight: true
	    	};
	    
	    	// Make sure checked status is properly cloned
	    	input.checked = true;
	    	support.noCloneChecked = input.cloneNode( true ).checked;
	    
	    	// Make sure that the options inside disabled selects aren't marked as disabled
	    	// (WebKit marks them as disabled)
	    	select.disabled = true;
	    	support.optDisabled = !opt.disabled;
	    
	    	// Test to see if it's possible to delete an expando from an element
	    	// Fails in Internet Explorer
	    	try {
	    		delete div.test;
	    	} catch( e ) {
	    		support.deleteExpando = false;
	    	}
	    
	    	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
	    		div.attachEvent( "onclick", function() {
	    			// Cloning a node shouldn't copy over any
	    			// bound event handlers (IE does this)
	    			support.noCloneEvent = false;
	    		});
	    		div.cloneNode( true ).fireEvent( "onclick" );
	    	}
	    
	    	// Check if a radio maintains its value
	    	// after being appended to the DOM
	    	input = document.createElement("input");
	    	input.value = "t";
	    	input.setAttribute("type", "radio");
	    	support.radioValue = input.value === "t";
	    
	    	input.setAttribute("checked", "checked");
	    	div.appendChild( input );
	    	fragment = document.createDocumentFragment();
	    	fragment.appendChild( div.lastChild );
	    
	    	// WebKit doesn't clone checked state correctly in fragments
	    	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;
	    
	    	// Check if a disconnected checkbox will retain its checked
	    	// value of true after appended to the DOM (IE6/7)
	    	support.appendChecked = input.checked;
	    
	    	fragment.removeChild( input );
	    	fragment.appendChild( div );
	    
	    	div.innerHTML = "";
	    
	    	// Check if div with explicit width and no margin-right incorrectly
	    	// gets computed margin-right based on width of container. For more
	    	// info see bug #3333
	    	// Fails in WebKit before Feb 2011 nightlies
	    	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	    	if ( window.getComputedStyle ) {
	    		marginDiv = document.createElement( "div" );
	    		marginDiv.style.width = "0";
	    		marginDiv.style.marginRight = "0";
	    		div.style.width = "2px";
	    		div.appendChild( marginDiv );
	    		support.reliableMarginRight =
	    			( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
	    	}
	    
	    	// Technique from Juriy Zaytsev
	    	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	    	// We only care about the case where non-standard event systems
	    	// are used, namely in IE. Short-circuiting here helps us to
	    	// avoid an eval call (in setAttribute) which can cause CSP
	    	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	    	if ( div.attachEvent ) {
	    		for( i in {
	    			submit: 1,
	    			change: 1,
	    			focusin: 1
	    		}) {
	    			eventName = "on" + i;
	    			isSupported = ( eventName in div );
	    			if ( !isSupported ) {
	    				div.setAttribute( eventName, "return;" );
	    				isSupported = ( typeof div[ eventName ] === "function" );
	    			}
	    			support[ i + "Bubbles" ] = isSupported;
	    		}
	    	}
	    
	    	fragment.removeChild( div );
	    
	    	// Null elements to avoid leaks in IE
	    	fragment = select = opt = marginDiv = div = input = null;
	    
	    	// Run tests that need a body at doc ready
	    	jQuery(function() {
	    		var container, outer, inner, table, td, offsetSupport,
	    			conMarginTop, ptlm, vb, style, html,
	    			body = document.getElementsByTagName("body")[0];
	    
	    		if ( !body ) {
	    			// Return for frameset docs that don't have a body
	    			return;
	    		}
	    
	    		conMarginTop = 1;
	    		ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
	    		vb = "visibility:hidden;border:0;";
	    		style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
	    		html = "<div " + style + "><div></div></div>" +
	    			"<table " + style + " cellpadding='0' cellspacing='0'>" +
	    			"<tr><td></td></tr></table>";
	    
	    		container = document.createElement("div");
	    		container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
	    		body.insertBefore( container, body.firstChild );
	    
	    		// Construct the test element
	    		div = document.createElement("div");
	    		container.appendChild( div );
	    
	    		// Check if table cells still have offsetWidth/Height when they are set
	    		// to display:none and there are still other visible table cells in a
	    		// table row; if so, offsetWidth/Height are not reliable for use when
	    		// determining if an element has been hidden directly using
	    		// display:none (it is still safe to use offsets if a parent element is
	    		// hidden; don safety goggles and see bug #4512 for more information).
	    		// (only IE 8 fails this test)
	    		div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
	    		tds = div.getElementsByTagName( "td" );
	    		isSupported = ( tds[ 0 ].offsetHeight === 0 );
	    
	    		tds[ 0 ].style.display = "";
	    		tds[ 1 ].style.display = "none";
	    
	    		// Check if empty table cells still have offsetWidth/Height
	    		// (IE <= 8 fail this test)
	    		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );
	    
	    		// Figure out if the W3C box model works as expected
	    		div.innerHTML = "";
	    		div.style.width = div.style.paddingLeft = "1px";
	    		jQuery.boxModel = support.boxModel = div.offsetWidth === 2;
	    
	    		if ( typeof div.style.zoom !== "undefined" ) {
	    			// Check if natively block-level elements act like inline-block
	    			// elements when setting their display to 'inline' and giving
	    			// them layout
	    			// (IE < 8 does this)
	    			div.style.display = "inline";
	    			div.style.zoom = 1;
	    			support.inlineBlockNeedsLayout = ( div.offsetWidth === 2 );
	    
	    			// Check if elements with layout shrink-wrap their children
	    			// (IE 6 does this)
	    			div.style.display = "";
	    			div.innerHTML = "<div style='width:4px;'></div>";
	    			support.shrinkWrapBlocks = ( div.offsetWidth !== 2 );
	    		}
	    
	    		div.style.cssText = ptlm + vb;
	    		div.innerHTML = html;
	    
	    		outer = div.firstChild;
	    		inner = outer.firstChild;
	    		td = outer.nextSibling.firstChild.firstChild;
	    
	    		offsetSupport = {
	    			doesNotAddBorder: ( inner.offsetTop !== 5 ),
	    			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
	    		};
	    
	    		inner.style.position = "fixed";
	    		inner.style.top = "20px";
	    
	    		// safari subtracts parent border width here which is 5px
	    		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
	    		inner.style.position = inner.style.top = "";
	    
	    		outer.style.overflow = "hidden";
	    		outer.style.position = "relative";
	    
	    		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
	    		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );
	    
	    		body.removeChild( container );
	    		div  = container = null;
	    
	    		jQuery.extend( support, offsetSupport );
	    	});
	    
	    	return support;
	    })();
	    
	    
	    
	    
	    var rbrace = /^(?:\{.*\}|\[.*\])$/,
	    	rmultiDash = /([A-Z])/g;
	    
	    jQuery.extend({
	    	cache: {},
	    
	    	// Please use with caution
	    	uuid: 0,
	    
	    	// Unique for each copy of jQuery on the page
	    	// Non-digits removed to match rinlinejQuery
	    	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),
	    
	    	// The following elements throw uncatchable exceptions if you
	    	// attempt to add expando properties to them.
	    	noData: {
	    		"embed": true,
	    		// Ban all objects except for Flash (which handle expandos)
	    		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
	    		"applet": true
	    	},
	    
	    	hasData: function( elem ) {
	    		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
	    		return !!elem && !isEmptyDataObject( elem );
	    	},
	    
	    	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
	    		if ( !jQuery.acceptData( elem ) ) {
	    			return;
	    		}
	    
	    		var privateCache, thisCache, ret,
	    			internalKey = jQuery.expando,
	    			getByName = typeof name === "string",
	    
	    			// We have to handle DOM nodes and JS objects differently because IE6-7
	    			// can't GC object references properly across the DOM-JS boundary
	    			isNode = elem.nodeType,
	    
	    			// Only DOM nodes need the global jQuery cache; JS object data is
	    			// attached directly to the object so GC can occur automatically
	    			cache = isNode ? jQuery.cache : elem,
	    
	    			// Only defining an ID for JS objects if its cache already exists allows
	    			// the code to shortcut on the same path as a DOM node with no cache
	    			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
	    			isEvents = name === "events";
	    
	    		// Avoid doing any more work than we need to when trying to get data on an
	    		// object that has no data at all
	    		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
	    			return;
	    		}
	    
	    		if ( !id ) {
	    			// Only DOM nodes need a new unique ID for each element since their data
	    			// ends up in the global cache
	    			if ( isNode ) {
	    				elem[ internalKey ] = id = ++jQuery.uuid;
	    			} else {
	    				id = internalKey;
	    			}
	    		}
	    
	    		if ( !cache[ id ] ) {
	    			cache[ id ] = {};
	    
	    			// Avoids exposing jQuery metadata on plain JS objects when the object
	    			// is serialized using JSON.stringify
	    			if ( !isNode ) {
	    				cache[ id ].toJSON = jQuery.noop;
	    			}
	    		}
	    
	    		// An object can be passed to jQuery.data instead of a key/value pair; this gets
	    		// shallow copied over onto the existing cache
	    		if ( typeof name === "object" || typeof name === "function" ) {
	    			if ( pvt ) {
	    				cache[ id ] = jQuery.extend( cache[ id ], name );
	    			} else {
	    				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
	    			}
	    		}
	    
	    		privateCache = thisCache = cache[ id ];
	    
	    		// jQuery data() is stored in a separate object inside the object's internal data
	    		// cache in order to avoid key collisions between internal data and user-defined
	    		// data.
	    		if ( !pvt ) {
	    			if ( !thisCache.data ) {
	    				thisCache.data = {};
	    			}
	    
	    			thisCache = thisCache.data;
	    		}
	    
	    		if ( data !== undefined ) {
	    			thisCache[ jQuery.camelCase( name ) ] = data;
	    		}
	    
	    		// Users should not attempt to inspect the internal events object using jQuery.data,
	    		// it is undocumented and subject to change. But does anyone listen? No.
	    		if ( isEvents && !thisCache[ name ] ) {
	    			return privateCache.events;
	    		}
	    
	    		// Check for both converted-to-camel and non-converted data property names
	    		// If a data property was specified
	    		if ( getByName ) {
	    
	    			// First Try to find as-is property data
	    			ret = thisCache[ name ];
	    
	    			// Test for null|undefined property data
	    			if ( ret == null ) {
	    
	    				// Try to find the camelCased property
	    				ret = thisCache[ jQuery.camelCase( name ) ];
	    			}
	    		} else {
	    			ret = thisCache;
	    		}
	    
	    		return ret;
	    	},
	    
	    	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
	    		if ( !jQuery.acceptData( elem ) ) {
	    			return;
	    		}
	    
	    		var thisCache, i, l,
	    
	    			// Reference to internal data cache key
	    			internalKey = jQuery.expando,
	    
	    			isNode = elem.nodeType,
	    
	    			// See jQuery.data for more information
	    			cache = isNode ? jQuery.cache : elem,
	    
	    			// See jQuery.data for more information
	    			id = isNode ? elem[ internalKey ] : internalKey;
	    
	    		// If there is already no cache entry for this object, there is no
	    		// purpose in continuing
	    		if ( !cache[ id ] ) {
	    			return;
	    		}
	    
	    		if ( name ) {
	    
	    			thisCache = pvt ? cache[ id ] : cache[ id ].data;
	    
	    			if ( thisCache ) {
	    
	    				// Support array or space separated string names for data keys
	    				if ( !jQuery.isArray( name ) ) {
	    
	    					// try the string as a key before any manipulation
	    					if ( name in thisCache ) {
	    						name = [ name ];
	    					} else {
	    
	    						// split the camel cased version by spaces unless a key with the spaces exists
	    						name = jQuery.camelCase( name );
	    						if ( name in thisCache ) {
	    							name = [ name ];
	    						} else {
	    							name = name.split( " " );
	    						}
	    					}
	    				}
	    
	    				for ( i = 0, l = name.length; i < l; i++ ) {
	    					delete thisCache[ name[i] ];
	    				}
	    
	    				// If there is no data left in the cache, we want to continue
	    				// and let the cache object itself get destroyed
	    				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
	    					return;
	    				}
	    			}
	    		}
	    
	    		// See jQuery.data for more information
	    		if ( !pvt ) {
	    			delete cache[ id ].data;
	    
	    			// Don't destroy the parent cache unless the internal data object
	    			// had been the only thing left in it
	    			if ( !isEmptyDataObject(cache[ id ]) ) {
	    				return;
	    			}
	    		}
	    
	    		// Browsers that fail expando deletion also refuse to delete expandos on
	    		// the window, but it will allow it on all other JS objects; other browsers
	    		// don't care
	    		// Ensure that `cache` is not a window object #10080
	    		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
	    			delete cache[ id ];
	    		} else {
	    			cache[ id ] = null;
	    		}
	    
	    		// We destroyed the cache and need to eliminate the expando on the node to avoid
	    		// false lookups in the cache for entries that no longer exist
	    		if ( isNode ) {
	    			// IE does not allow us to delete expando properties from nodes,
	    			// nor does it have a removeAttribute function on Document nodes;
	    			// we must handle all of these cases
	    			if ( jQuery.support.deleteExpando ) {
	    				delete elem[ internalKey ];
	    			} else if ( elem.removeAttribute ) {
	    				elem.removeAttribute( internalKey );
	    			} else {
	    				elem[ internalKey ] = null;
	    			}
	    		}
	    	},
	    
	    	// For internal use only.
	    	_data: function( elem, name, data ) {
	    		return jQuery.data( elem, name, data, true );
	    	},
	    
	    	// A method for determining if a DOM node can handle the data expando
	    	acceptData: function( elem ) {
	    		if ( elem.nodeName ) {
	    			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];
	    
	    			if ( match ) {
	    				return !(match === true || elem.getAttribute("classid") !== match);
	    			}
	    		}
	    
	    		return true;
	    	}
	    });
	    
	    jQuery.fn.extend({
	    	data: function( key, value ) {
	    		var parts, attr, name,
	    			data = null;
	    
	    		if ( typeof key === "undefined" ) {
	    			if ( this.length ) {
	    				data = jQuery.data( this[0] );
	    
	    				if ( this[0].nodeType === 1 && !jQuery._data( this[0], "parsedAttrs" ) ) {
	    					attr = this[0].attributes;
	    					for ( var i = 0, l = attr.length; i < l; i++ ) {
	    						name = attr[i].name;
	    
	    						if ( name.indexOf( "data-" ) === 0 ) {
	    							name = jQuery.camelCase( name.substring(5) );
	    
	    							dataAttr( this[0], name, data[ name ] );
	    						}
	    					}
	    					jQuery._data( this[0], "parsedAttrs", true );
	    				}
	    			}
	    
	    			return data;
	    
	    		} else if ( typeof key === "object" ) {
	    			return this.each(function() {
	    				jQuery.data( this, key );
	    			});
	    		}
	    
	    		parts = key.split(".");
	    		parts[1] = parts[1] ? "." + parts[1] : "";
	    
	    		if ( value === undefined ) {
	    			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
	    
	    			// Try to fetch any internally stored data first
	    			if ( data === undefined && this.length ) {
	    				data = jQuery.data( this[0], key );
	    				data = dataAttr( this[0], key, data );
	    			}
	    
	    			return data === undefined && parts[1] ?
	    				this.data( parts[0] ) :
	    				data;
	    
	    		} else {
	    			return this.each(function() {
	    				var self = jQuery( this ),
	    					args = [ parts[0], value ];
	    
	    				self.triggerHandler( "setData" + parts[1] + "!", args );
	    				jQuery.data( this, key, value );
	    				self.triggerHandler( "changeData" + parts[1] + "!", args );
	    			});
	    		}
	    	},
	    
	    	removeData: function( key ) {
	    		return this.each(function() {
	    			jQuery.removeData( this, key );
	    		});
	    	}
	    });
	    
	    function dataAttr( elem, key, data ) {
	    	// If nothing was found internally, try to fetch any
	    	// data from the HTML5 data-* attribute
	    	if ( data === undefined && elem.nodeType === 1 ) {
	    
	    		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
	    
	    		data = elem.getAttribute( name );
	    
	    		if ( typeof data === "string" ) {
	    			try {
	    				data = data === "true" ? true :
	    				data === "false" ? false :
	    				data === "null" ? null :
	    				jQuery.isNumeric( data ) ? parseFloat( data ) :
	    					rbrace.test( data ) ? jQuery.parseJSON( data ) :
	    					data;
	    			} catch( e ) {}
	    
	    			// Make sure we set the data so it isn't changed later
	    			jQuery.data( elem, key, data );
	    
	    		} else {
	    			data = undefined;
	    		}
	    	}
	    
	    	return data;
	    }
	    
	    // checks a cache object for emptiness
	    function isEmptyDataObject( obj ) {
	    	for ( var name in obj ) {
	    
	    		// if the public data object is empty, the private is still empty
	    		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
	    			continue;
	    		}
	    		if ( name !== "toJSON" ) {
	    			return false;
	    		}
	    	}
	    
	    	return true;
	    }
	    
	    
	    
	    
	    function handleQueueMarkDefer( elem, type, src ) {
	    	var deferDataKey = type + "defer",
	    		queueDataKey = type + "queue",
	    		markDataKey = type + "mark",
	    		defer = jQuery._data( elem, deferDataKey );
	    	if ( defer &&
	    		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
	    		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
	    		// Give room for hard-coded callbacks to fire first
	    		// and eventually mark/queue something else on the element
	    		setTimeout( function() {
	    			if ( !jQuery._data( elem, queueDataKey ) &&
	    				!jQuery._data( elem, markDataKey ) ) {
	    				jQuery.removeData( elem, deferDataKey, true );
	    				defer.fire();
	    			}
	    		}, 0 );
	    	}
	    }
	    
	    jQuery.extend({
	    
	    	_mark: function( elem, type ) {
	    		if ( elem ) {
	    			type = ( type || "fx" ) + "mark";
	    			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
	    		}
	    	},
	    
	    	_unmark: function( force, elem, type ) {
	    		if ( force !== true ) {
	    			type = elem;
	    			elem = force;
	    			force = false;
	    		}
	    		if ( elem ) {
	    			type = type || "fx";
	    			var key = type + "mark",
	    				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
	    			if ( count ) {
	    				jQuery._data( elem, key, count );
	    			} else {
	    				jQuery.removeData( elem, key, true );
	    				handleQueueMarkDefer( elem, type, "mark" );
	    			}
	    		}
	    	},
	    
	    	queue: function( elem, type, data ) {
	    		var q;
	    		if ( elem ) {
	    			type = ( type || "fx" ) + "queue";
	    			q = jQuery._data( elem, type );
	    
	    			// Speed up dequeue by getting out quickly if this is just a lookup
	    			if ( data ) {
	    				if ( !q || jQuery.isArray(data) ) {
	    					q = jQuery._data( elem, type, jQuery.makeArray(data) );
	    				} else {
	    					q.push( data );
	    				}
	    			}
	    			return q || [];
	    		}
	    	},
	    
	    	dequeue: function( elem, type ) {
	    		type = type || "fx";
	    
	    		var queue = jQuery.queue( elem, type ),
	    			fn = queue.shift(),
	    			hooks = {};
	    
	    		// If the fx queue is dequeued, always remove the progress sentinel
	    		if ( fn === "inprogress" ) {
	    			fn = queue.shift();
	    		}
	    
	    		if ( fn ) {
	    			// Add a progress sentinel to prevent the fx queue from being
	    			// automatically dequeued
	    			if ( type === "fx" ) {
	    				queue.unshift( "inprogress" );
	    			}
	    
	    			jQuery._data( elem, type + ".run", hooks );
	    			fn.call( elem, function() {
	    				jQuery.dequeue( elem, type );
	    			}, hooks );
	    		}
	    
	    		if ( !queue.length ) {
	    			jQuery.removeData( elem, type + "queue " + type + ".run", true );
	    			handleQueueMarkDefer( elem, type, "queue" );
	    		}
	    	}
	    });
	    
	    jQuery.fn.extend({
	    	queue: function( type, data ) {
	    		if ( typeof type !== "string" ) {
	    			data = type;
	    			type = "fx";
	    		}
	    
	    		if ( data === undefined ) {
	    			return jQuery.queue( this[0], type );
	    		}
	    		return this.each(function() {
	    			var queue = jQuery.queue( this, type, data );
	    
	    			if ( type === "fx" && queue[0] !== "inprogress" ) {
	    				jQuery.dequeue( this, type );
	    			}
	    		});
	    	},
	    	dequeue: function( type ) {
	    		return this.each(function() {
	    			jQuery.dequeue( this, type );
	    		});
	    	},
	    	// Based off of the plugin by Clint Helfers, with permission.
	    	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	    	delay: function( time, type ) {
	    		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	    		type = type || "fx";
	    
	    		return this.queue( type, function( next, hooks ) {
	    			var timeout = setTimeout( next, time );
	    			hooks.stop = function() {
	    				clearTimeout( timeout );
	    			};
	    		});
	    	},
	    	clearQueue: function( type ) {
	    		return this.queue( type || "fx", [] );
	    	},
	    	// Get a promise resolved when queues of a certain type
	    	// are emptied (fx is the type by default)
	    	promise: function( type, object ) {
	    		if ( typeof type !== "string" ) {
	    			object = type;
	    			type = undefined;
	    		}
	    		type = type || "fx";
	    		var defer = jQuery.Deferred(),
	    			elements = this,
	    			i = elements.length,
	    			count = 1,
	    			deferDataKey = type + "defer",
	    			queueDataKey = type + "queue",
	    			markDataKey = type + "mark",
	    			tmp;
	    		function resolve() {
	    			if ( !( --count ) ) {
	    				defer.resolveWith( elements, [ elements ] );
	    			}
	    		}
	    		while( i-- ) {
	    			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
	    					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
	    						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
	    					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
	    				count++;
	    				tmp.add( resolve );
	    			}
	    		}
	    		resolve();
	    		return defer.promise();
	    	}
	    });
	    
	    
	    
	    
	    var rclass = /[\n\t\r]/g,
	    	rspace = /\s+/,
	    	rreturn = /\r/g,
	    	rtype = /^(?:button|input)$/i,
	    	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	    	rclickable = /^a(?:rea)?$/i,
	    	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	    	getSetAttribute = jQuery.support.getSetAttribute,
	    	nodeHook, boolHook, fixSpecified;
	    
	    jQuery.fn.extend({
	    	attr: function( name, value ) {
	    		return jQuery.access( this, name, value, true, jQuery.attr );
	    	},
	    
	    	removeAttr: function( name ) {
	    		return this.each(function() {
	    			jQuery.removeAttr( this, name );
	    		});
	    	},
	    
	    	prop: function( name, value ) {
	    		return jQuery.access( this, name, value, true, jQuery.prop );
	    	},
	    
	    	removeProp: function( name ) {
	    		name = jQuery.propFix[ name ] || name;
	    		return this.each(function() {
	    			// try/catch handles cases where IE balks (such as removing a property on window)
	    			try {
	    				this[ name ] = undefined;
	    				delete this[ name ];
	    			} catch( e ) {}
	    		});
	    	},
	    
	    	addClass: function( value ) {
	    		var classNames, i, l, elem,
	    			setClass, c, cl;
	    
	    		if ( jQuery.isFunction( value ) ) {
	    			return this.each(function( j ) {
	    				jQuery( this ).addClass( value.call(this, j, this.className) );
	    			});
	    		}
	    
	    		if ( value && typeof value === "string" ) {
	    			classNames = value.split( rspace );
	    
	    			for ( i = 0, l = this.length; i < l; i++ ) {
	    				elem = this[ i ];
	    
	    				if ( elem.nodeType === 1 ) {
	    					if ( !elem.className && classNames.length === 1 ) {
	    						elem.className = value;
	    
	    					} else {
	    						setClass = " " + elem.className + " ";
	    
	    						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
	    							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
	    								setClass += classNames[ c ] + " ";
	    							}
	    						}
	    						elem.className = jQuery.trim( setClass );
	    					}
	    				}
	    			}
	    		}
	    
	    		return this;
	    	},
	    
	    	removeClass: function( value ) {
	    		var classNames, i, l, elem, className, c, cl;
	    
	    		if ( jQuery.isFunction( value ) ) {
	    			return this.each(function( j ) {
	    				jQuery( this ).removeClass( value.call(this, j, this.className) );
	    			});
	    		}
	    
	    		if ( (value && typeof value === "string") || value === undefined ) {
	    			classNames = ( value || "" ).split( rspace );
	    
	    			for ( i = 0, l = this.length; i < l; i++ ) {
	    				elem = this[ i ];
	    
	    				if ( elem.nodeType === 1 && elem.className ) {
	    					if ( value ) {
	    						className = (" " + elem.className + " ").replace( rclass, " " );
	    						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
	    							className = className.replace(" " + classNames[ c ] + " ", " ");
	    						}
	    						elem.className = jQuery.trim( className );
	    
	    					} else {
	    						elem.className = "";
	    					}
	    				}
	    			}
	    		}
	    
	    		return this;
	    	},
	    
	    	toggleClass: function( value, stateVal ) {
	    		var type = typeof value,
	    			isBool = typeof stateVal === "boolean";
	    
	    		if ( jQuery.isFunction( value ) ) {
	    			return this.each(function( i ) {
	    				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
	    			});
	    		}
	    
	    		return this.each(function() {
	    			if ( type === "string" ) {
	    				// toggle individual class names
	    				var className,
	    					i = 0,
	    					self = jQuery( this ),
	    					state = stateVal,
	    					classNames = value.split( rspace );
	    
	    				while ( (className = classNames[ i++ ]) ) {
	    					// check each className given, space seperated list
	    					state = isBool ? state : !self.hasClass( className );
	    					self[ state ? "addClass" : "removeClass" ]( className );
	    				}
	    
	    			} else if ( type === "undefined" || type === "boolean" ) {
	    				if ( this.className ) {
	    					// store className if set
	    					jQuery._data( this, "__className__", this.className );
	    				}
	    
	    				// toggle whole className
	    				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
	    			}
	    		});
	    	},
	    
	    	hasClass: function( selector ) {
	    		var className = " " + selector + " ",
	    			i = 0,
	    			l = this.length;
	    		for ( ; i < l; i++ ) {
	    			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
	    				return true;
	    			}
	    		}
	    
	    		return false;
	    	},
	    
	    	val: function( value ) {
	    		var hooks, ret, isFunction,
	    			elem = this[0];
	    
	    		if ( !arguments.length ) {
	    			if ( elem ) {
	    				hooks = jQuery.valHooks[ elem.nodeName.toLowerCase() ] || jQuery.valHooks[ elem.type ];
	    
	    				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
	    					return ret;
	    				}
	    
	    				ret = elem.value;
	    
	    				return typeof ret === "string" ?
	    					// handle most common string cases
	    					ret.replace(rreturn, "") :
	    					// handle cases where value is null/undef or number
	    					ret == null ? "" : ret;
	    			}
	    
	    			return;
	    		}
	    
	    		isFunction = jQuery.isFunction( value );
	    
	    		return this.each(function( i ) {
	    			var self = jQuery(this), val;
	    
	    			if ( this.nodeType !== 1 ) {
	    				return;
	    			}
	    
	    			if ( isFunction ) {
	    				val = value.call( this, i, self.val() );
	    			} else {
	    				val = value;
	    			}
	    
	    			// Treat null/undefined as ""; convert numbers to string
	    			if ( val == null ) {
	    				val = "";
	    			} else if ( typeof val === "number" ) {
	    				val += "";
	    			} else if ( jQuery.isArray( val ) ) {
	    				val = jQuery.map(val, function ( value ) {
	    					return value == null ? "" : value + "";
	    				});
	    			}
	    
	    			hooks = jQuery.valHooks[ this.nodeName.toLowerCase() ] || jQuery.valHooks[ this.type ];
	    
	    			// If set returns undefined, fall back to normal setting
	    			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
	    				this.value = val;
	    			}
	    		});
	    	}
	    });
	    
	    jQuery.extend({
	    	valHooks: {
	    		option: {
	    			get: function( elem ) {
	    				// attributes.value is undefined in Blackberry 4.7 but
	    				// uses .value. See #6932
	    				var val = elem.attributes.value;
	    				return !val || val.specified ? elem.value : elem.text;
	    			}
	    		},
	    		select: {
	    			get: function( elem ) {
	    				var value, i, max, option,
	    					index = elem.selectedIndex,
	    					values = [],
	    					options = elem.options,
	    					one = elem.type === "select-one";
	    
	    				// Nothing was selected
	    				if ( index < 0 ) {
	    					return null;
	    				}
	    
	    				// Loop through all the selected options
	    				i = one ? index : 0;
	    				max = one ? index + 1 : options.length;
	    				for ( ; i < max; i++ ) {
	    					option = options[ i ];
	    
	    					// Don't return options that are disabled or in a disabled optgroup
	    					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
	    							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {
	    
	    						// Get the specific value for the option
	    						value = jQuery( option ).val();
	    
	    						// We don't need an array for one selects
	    						if ( one ) {
	    							return value;
	    						}
	    
	    						// Multi-Selects return an array
	    						values.push( value );
	    					}
	    				}
	    
	    				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
	    				if ( one && !values.length && options.length ) {
	    					return jQuery( options[ index ] ).val();
	    				}
	    
	    				return values;
	    			},
	    
	    			set: function( elem, value ) {
	    				var values = jQuery.makeArray( value );
	    
	    				jQuery(elem).find("option").each(function() {
	    					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
	    				});
	    
	    				if ( !values.length ) {
	    					elem.selectedIndex = -1;
	    				}
	    				return values;
	    			}
	    		}
	    	},
	    
	    	attrFn: {
	    		val: true,
	    		css: true,
	    		html: true,
	    		text: true,
	    		data: true,
	    		width: true,
	    		height: true,
	    		offset: true
	    	},
	    
	    	attr: function( elem, name, value, pass ) {
	    		var ret, hooks, notxml,
	    			nType = elem.nodeType;
	    
	    		// don't get/set attributes on text, comment and attribute nodes
	    		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
	    			return;
	    		}
	    
	    		if ( pass && name in jQuery.attrFn ) {
	    			return jQuery( elem )[ name ]( value );
	    		}
	    
	    		// Fallback to prop when attributes are not supported
	    		if ( typeof elem.getAttribute === "undefined" ) {
	    			return jQuery.prop( elem, name, value );
	    		}
	    
	    		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
	    
	    		// All attributes are lowercase
	    		// Grab necessary hook if one is defined
	    		if ( notxml ) {
	    			name = name.toLowerCase();
	    			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
	    		}
	    
	    		if ( value !== undefined ) {
	    
	    			if ( value === null ) {
	    				jQuery.removeAttr( elem, name );
	    				return;
	    
	    			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
	    				return ret;
	    
	    			} else {
	    				elem.setAttribute( name, "" + value );
	    				return value;
	    			}
	    
	    		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
	    			return ret;
	    
	    		} else {
	    
	    			ret = elem.getAttribute( name );
	    
	    			// Non-existent attributes return null, we normalize to undefined
	    			return ret === null ?
	    				undefined :
	    				ret;
	    		}
	    	},
	    
	    	removeAttr: function( elem, value ) {
	    		var propName, attrNames, name, l,
	    			i = 0;
	    
	    		if ( value && elem.nodeType === 1 ) {
	    			attrNames = value.toLowerCase().split( rspace );
	    			l = attrNames.length;
	    
	    			for ( ; i < l; i++ ) {
	    				name = attrNames[ i ];
	    
	    				if ( name ) {
	    					propName = jQuery.propFix[ name ] || name;
	    
	    					// See #9699 for explanation of this approach (setting first, then removal)
	    					jQuery.attr( elem, name, "" );
	    					elem.removeAttribute( getSetAttribute ? name : propName );
	    
	    					// Set corresponding property to false for boolean attributes
	    					if ( rboolean.test( name ) && propName in elem ) {
	    						elem[ propName ] = false;
	    					}
	    				}
	    			}
	    		}
	    	},
	    
	    	attrHooks: {
	    		type: {
	    			set: function( elem, value ) {
	    				// We can't allow the type property to be changed (since it causes problems in IE)
	    				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
	    					jQuery.error( "type property can't be changed" );
	    				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
	    					// Setting the type on a radio button after the value resets the value in IE6-9
	    					// Reset value to it's default in case type is set after value
	    					// This is for element creation
	    					var val = elem.value;
	    					elem.setAttribute( "type", value );
	    					if ( val ) {
	    						elem.value = val;
	    					}
	    					return value;
	    				}
	    			}
	    		},
	    		// Use the value property for back compat
	    		// Use the nodeHook for button elements in IE6/7 (#1954)
	    		value: {
	    			get: function( elem, name ) {
	    				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
	    					return nodeHook.get( elem, name );
	    				}
	    				return name in elem ?
	    					elem.value :
	    					null;
	    			},
	    			set: function( elem, value, name ) {
	    				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
	    					return nodeHook.set( elem, value, name );
	    				}
	    				// Does not return so that setAttribute is also used
	    				elem.value = value;
	    			}
	    		}
	    	},
	    
	    	propFix: {
	    		tabindex: "tabIndex",
	    		readonly: "readOnly",
	    		"for": "htmlFor",
	    		"class": "className",
	    		maxlength: "maxLength",
	    		cellspacing: "cellSpacing",
	    		cellpadding: "cellPadding",
	    		rowspan: "rowSpan",
	    		colspan: "colSpan",
	    		usemap: "useMap",
	    		frameborder: "frameBorder",
	    		contenteditable: "contentEditable"
	    	},
	    
	    	prop: function( elem, name, value ) {
	    		var ret, hooks, notxml,
	    			nType = elem.nodeType;
	    
	    		// don't get/set properties on text, comment and attribute nodes
	    		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
	    			return;
	    		}
	    
	    		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
	    
	    		if ( notxml ) {
	    			// Fix name and attach hooks
	    			name = jQuery.propFix[ name ] || name;
	    			hooks = jQuery.propHooks[ name ];
	    		}
	    
	    		if ( value !== undefined ) {
	    			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
	    				return ret;
	    
	    			} else {
	    				return ( elem[ name ] = value );
	    			}
	    
	    		} else {
	    			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
	    				return ret;
	    
	    			} else {
	    				return elem[ name ];
	    			}
	    		}
	    	},
	    
	    	propHooks: {
	    		tabIndex: {
	    			get: function( elem ) {
	    				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
	    				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
	    				var attributeNode = elem.getAttributeNode("tabindex");
	    
	    				return attributeNode && attributeNode.specified ?
	    					parseInt( attributeNode.value, 10 ) :
	    					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
	    						0 :
	    						undefined;
	    			}
	    		}
	    	}
	    });
	    
	    // Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
	    jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;
	    
	    // Hook for boolean attributes
	    boolHook = {
	    	get: function( elem, name ) {
	    		// Align boolean attributes with corresponding properties
	    		// Fall back to attribute presence where some booleans are not supported
	    		var attrNode,
	    			property = jQuery.prop( elem, name );
	    		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
	    			name.toLowerCase() :
	    			undefined;
	    	},
	    	set: function( elem, value, name ) {
	    		var propName;
	    		if ( value === false ) {
	    			// Remove boolean attributes when set to false
	    			jQuery.removeAttr( elem, name );
	    		} else {
	    			// value is true since we know at this point it's type boolean and not false
	    			// Set boolean attributes to the same name and set the DOM property
	    			propName = jQuery.propFix[ name ] || name;
	    			if ( propName in elem ) {
	    				// Only set the IDL specifically if it already exists on the element
	    				elem[ propName ] = true;
	    			}
	    
	    			elem.setAttribute( name, name.toLowerCase() );
	    		}
	    		return name;
	    	}
	    };
	    
	    // IE6/7 do not support getting/setting some attributes with get/setAttribute
	    if ( !getSetAttribute ) {
	    
	    	fixSpecified = {
	    		name: true,
	    		id: true
	    	};
	    
	    	// Use this for any attribute in IE6/7
	    	// This fixes almost every IE6/7 issue
	    	nodeHook = jQuery.valHooks.button = {
	    		get: function( elem, name ) {
	    			var ret;
	    			ret = elem.getAttributeNode( name );
	    			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
	    				ret.nodeValue :
	    				undefined;
	    		},
	    		set: function( elem, value, name ) {
	    			// Set the existing or create a new attribute node
	    			var ret = elem.getAttributeNode( name );
	    			if ( !ret ) {
	    				ret = document.createAttribute( name );
	    				elem.setAttributeNode( ret );
	    			}
	    			return ( ret.nodeValue = value + "" );
	    		}
	    	};
	    
	    	// Apply the nodeHook to tabindex
	    	jQuery.attrHooks.tabindex.set = nodeHook.set;
	    
	    	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	    	// This is for removals
	    	jQuery.each([ "width", "height" ], function( i, name ) {
	    		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
	    			set: function( elem, value ) {
	    				if ( value === "" ) {
	    					elem.setAttribute( name, "auto" );
	    					return value;
	    				}
	    			}
	    		});
	    	});
	    
	    	// Set contenteditable to false on removals(#10429)
	    	// Setting to empty string throws an error as an invalid value
	    	jQuery.attrHooks.contenteditable = {
	    		get: nodeHook.get,
	    		set: function( elem, value, name ) {
	    			if ( value === "" ) {
	    				value = "false";
	    			}
	    			nodeHook.set( elem, value, name );
	    		}
	    	};
	    }
	    
	    
	    // Some attributes require a special call on IE
	    if ( !jQuery.support.hrefNormalized ) {
	    	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
	    		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
	    			get: function( elem ) {
	    				var ret = elem.getAttribute( name, 2 );
	    				return ret === null ? undefined : ret;
	    			}
	    		});
	    	});
	    }
	    
	    if ( !jQuery.support.style ) {
	    	jQuery.attrHooks.style = {
	    		get: function( elem ) {
	    			// Return undefined in the case of empty string
	    			// Normalize to lowercase since IE uppercases css property names
	    			return elem.style.cssText.toLowerCase() || undefined;
	    		},
	    		set: function( elem, value ) {
	    			return ( elem.style.cssText = "" + value );
	    		}
	    	};
	    }
	    
	    // Safari mis-reports the default selected property of an option
	    // Accessing the parent's selectedIndex property fixes it
	    if ( !jQuery.support.optSelected ) {
	    	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
	    		get: function( elem ) {
	    			var parent = elem.parentNode;
	    
	    			if ( parent ) {
	    				parent.selectedIndex;
	    
	    				// Make sure that it also works with optgroups, see #5701
	    				if ( parent.parentNode ) {
	    					parent.parentNode.selectedIndex;
	    				}
	    			}
	    			return null;
	    		}
	    	});
	    }
	    
	    // IE6/7 call enctype encoding
	    if ( !jQuery.support.enctype ) {
	    	jQuery.propFix.enctype = "encoding";
	    }
	    
	    // Radios and checkboxes getter/setter
	    if ( !jQuery.support.checkOn ) {
	    	jQuery.each([ "radio", "checkbox" ], function() {
	    		jQuery.valHooks[ this ] = {
	    			get: function( elem ) {
	    				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
	    				return elem.getAttribute("value") === null ? "on" : elem.value;
	    			}
	    		};
	    	});
	    }
	    jQuery.each([ "radio", "checkbox" ], function() {
	    	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
	    		set: function( elem, value ) {
	    			if ( jQuery.isArray( value ) ) {
	    				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
	    			}
	    		}
	    	});
	    });
	    
	    
	    
	    
	    var rformElems = /^(?:textarea|input|select)$/i,
	    	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	    	rhoverHack = /\bhover(\.\S+)?\b/,
	    	rkeyEvent = /^key/,
	    	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	    	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	    	quickParse = function( selector ) {
	    		var quick = rquickIs.exec( selector );
	    		if ( quick ) {
	    			//   0  1    2   3
	    			// [ _, tag, id, class ]
	    			quick[1] = ( quick[1] || "" ).toLowerCase();
	    			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
	    		}
	    		return quick;
	    	},
	    	quickIs = function( elem, m ) {
	    		var attrs = elem.attributes || {};
	    		return (
	    			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
	    			(!m[2] || (attrs.id || {}).value === m[2]) &&
	    			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
	    		);
	    	},
	    	hoverHack = function( events ) {
	    		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	    	};
	    
	    /*
	     * Helper functions for managing events -- not part of the public interface.
	     * Props to Dean Edwards' addEvent library for many of the ideas.
	     */
	    jQuery.event = {
	    
	    	add: function( elem, types, handler, data, selector ) {
	    
	    		var elemData, eventHandle, events,
	    			t, tns, type, namespaces, handleObj,
	    			handleObjIn, quick, handlers, special;
	    
	    		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
	    		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
	    			return;
	    		}
	    
	    		// Caller can pass in an object of custom data in lieu of the handler
	    		if ( handler.handler ) {
	    			handleObjIn = handler;
	    			handler = handleObjIn.handler;
	    		}
	    
	    		// Make sure that the handler has a unique ID, used to find/remove it later
	    		if ( !handler.guid ) {
	    			handler.guid = jQuery.guid++;
	    		}
	    
	    		// Init the element's event structure and main handler, if this is the first
	    		events = elemData.events;
	    		if ( !events ) {
	    			elemData.events = events = {};
	    		}
	    		eventHandle = elemData.handle;
	    		if ( !eventHandle ) {
	    			elemData.handle = eventHandle = function( e ) {
	    				// Discard the second event of a jQuery.event.trigger() and
	    				// when an event is called after a page has unloaded
	    				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
	    					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
	    					undefined;
	    			};
	    			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
	    			eventHandle.elem = elem;
	    		}
	    
	    		// Handle multiple events separated by a space
	    		// jQuery(...).bind("mouseover mouseout", fn);
	    		types = jQuery.trim( hoverHack(types) ).split( " " );
	    		for ( t = 0; t < types.length; t++ ) {
	    
	    			tns = rtypenamespace.exec( types[t] ) || [];
	    			type = tns[1];
	    			namespaces = ( tns[2] || "" ).split( "." ).sort();
	    
	    			// If event changes its type, use the special event handlers for the changed type
	    			special = jQuery.event.special[ type ] || {};
	    
	    			// If selector defined, determine special event api type, otherwise given type
	    			type = ( selector ? special.delegateType : special.bindType ) || type;
	    
	    			// Update special based on newly reset type
	    			special = jQuery.event.special[ type ] || {};
	    
	    			// handleObj is passed to all event handlers
	    			handleObj = jQuery.extend({
	    				type: type,
	    				origType: tns[1],
	    				data: data,
	    				handler: handler,
	    				guid: handler.guid,
	    				selector: selector,
	    				quick: quickParse( selector ),
	    				namespace: namespaces.join(".")
	    			}, handleObjIn );
	    
	    			// Init the event handler queue if we're the first
	    			handlers = events[ type ];
	    			if ( !handlers ) {
	    				handlers = events[ type ] = [];
	    				handlers.delegateCount = 0;
	    
	    				// Only use addEventListener/attachEvent if the special events handler returns false
	    				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	    					// Bind the global event handler to the element
	    					if ( elem.addEventListener ) {
	    						elem.addEventListener( type, eventHandle, false );
	    
	    					} else if ( elem.attachEvent ) {
	    						elem.attachEvent( "on" + type, eventHandle );
	    					}
	    				}
	    			}
	    
	    			if ( special.add ) {
	    				special.add.call( elem, handleObj );
	    
	    				if ( !handleObj.handler.guid ) {
	    					handleObj.handler.guid = handler.guid;
	    				}
	    			}
	    
	    			// Add to the element's handler list, delegates in front
	    			if ( selector ) {
	    				handlers.splice( handlers.delegateCount++, 0, handleObj );
	    			} else {
	    				handlers.push( handleObj );
	    			}
	    
	    			// Keep track of which events have ever been used, for event optimization
	    			jQuery.event.global[ type ] = true;
	    		}
	    
	    		// Nullify elem to prevent memory leaks in IE
	    		elem = null;
	    	},
	    
	    	global: {},
	    
	    	// Detach an event or set of events from an element
	    	remove: function( elem, types, handler, selector, mappedTypes ) {
	    
	    		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
	    			t, tns, type, origType, namespaces, origCount,
	    			j, events, special, handle, eventType, handleObj;
	    
	    		if ( !elemData || !(events = elemData.events) ) {
	    			return;
	    		}
	    
	    		// Once for each type.namespace in types; type may be omitted
	    		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
	    		for ( t = 0; t < types.length; t++ ) {
	    			tns = rtypenamespace.exec( types[t] ) || [];
	    			type = origType = tns[1];
	    			namespaces = tns[2];
	    
	    			// Unbind all events (on this namespace, if provided) for the element
	    			if ( !type ) {
	    				for ( type in events ) {
	    					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
	    				}
	    				continue;
	    			}
	    
	    			special = jQuery.event.special[ type ] || {};
	    			type = ( selector? special.delegateType : special.bindType ) || type;
	    			eventType = events[ type ] || [];
	    			origCount = eventType.length;
	    			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
	    
	    			// Remove matching events
	    			for ( j = 0; j < eventType.length; j++ ) {
	    				handleObj = eventType[ j ];
	    
	    				if ( ( mappedTypes || origType === handleObj.origType ) &&
	    					 ( !handler || handler.guid === handleObj.guid ) &&
	    					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
	    					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
	    					eventType.splice( j--, 1 );
	    
	    					if ( handleObj.selector ) {
	    						eventType.delegateCount--;
	    					}
	    					if ( special.remove ) {
	    						special.remove.call( elem, handleObj );
	    					}
	    				}
	    			}
	    
	    			// Remove generic event handler if we removed something and no more handlers exist
	    			// (avoids potential for endless recursion during removal of special event handlers)
	    			if ( eventType.length === 0 && origCount !== eventType.length ) {
	    				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
	    					jQuery.removeEvent( elem, type, elemData.handle );
	    				}
	    
	    				delete events[ type ];
	    			}
	    		}
	    
	    		// Remove the expando if it's no longer used
	    		if ( jQuery.isEmptyObject( events ) ) {
	    			handle = elemData.handle;
	    			if ( handle ) {
	    				handle.elem = null;
	    			}
	    
	    			// removeData also checks for emptiness and clears the expando if empty
	    			// so use it instead of delete
	    			jQuery.removeData( elem, [ "events", "handle" ], true );
	    		}
	    	},
	    
	    	// Events that are safe to short-circuit if no handlers are attached.
	    	// Native DOM events should not be added, they may have inline handlers.
	    	customEvent: {
	    		"getData": true,
	    		"setData": true,
	    		"changeData": true
	    	},
	    
	    	trigger: function( event, data, elem, onlyHandlers ) {
	    		// Don't do events on text and comment nodes
	    		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
	    			return;
	    		}
	    
	    		// Event object or event type
	    		var type = event.type || event,
	    			namespaces = [],
	    			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;
	    
	    		// focus/blur morphs to focusin/out; ensure we're not firing them right now
	    		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
	    			return;
	    		}
	    
	    		if ( type.indexOf( "!" ) >= 0 ) {
	    			// Exclusive events trigger only for the exact event (no namespaces)
	    			type = type.slice(0, -1);
	    			exclusive = true;
	    		}
	    
	    		if ( type.indexOf( "." ) >= 0 ) {
	    			// Namespaced trigger; create a regexp to match event type in handle()
	    			namespaces = type.split(".");
	    			type = namespaces.shift();
	    			namespaces.sort();
	    		}
	    
	    		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
	    			// No jQuery handlers for this event type, and it can't have inline handlers
	    			return;
	    		}
	    
	    		// Caller can pass in an Event, Object, or just an event type string
	    		event = typeof event === "object" ?
	    			// jQuery.Event object
	    			event[ jQuery.expando ] ? event :
	    			// Object literal
	    			new jQuery.Event( type, event ) :
	    			// Just the event type (string)
	    			new jQuery.Event( type );
	    
	    		event.type = type;
	    		event.isTrigger = true;
	    		event.exclusive = exclusive;
	    		event.namespace = namespaces.join( "." );
	    		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
	    		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";
	    
	    		// Handle a global trigger
	    		if ( !elem ) {
	    
	    			// TODO: Stop taunting the data cache; remove global events and always attach to document
	    			cache = jQuery.cache;
	    			for ( i in cache ) {
	    				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
	    					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
	    				}
	    			}
	    			return;
	    		}
	    
	    		// Clean up the event in case it is being reused
	    		event.result = undefined;
	    		if ( !event.target ) {
	    			event.target = elem;
	    		}
	    
	    		// Clone any incoming data and prepend the event, creating the handler arg list
	    		data = data != null ? jQuery.makeArray( data ) : [];
	    		data.unshift( event );
	    
	    		// Allow special events to draw outside the lines
	    		special = jQuery.event.special[ type ] || {};
	    		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
	    			return;
	    		}
	    
	    		// Determine event propagation path in advance, per W3C events spec (#9951)
	    		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
	    		eventPath = [[ elem, special.bindType || type ]];
	    		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	    
	    			bubbleType = special.delegateType || type;
	    			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
	    			old = null;
	    			for ( ; cur; cur = cur.parentNode ) {
	    				eventPath.push([ cur, bubbleType ]);
	    				old = cur;
	    			}
	    
	    			// Only add window if we got to document (e.g., not plain obj or detached DOM)
	    			if ( old && old === elem.ownerDocument ) {
	    				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
	    			}
	    		}
	    
	    		// Fire handlers on the event path
	    		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {
	    
	    			cur = eventPath[i][0];
	    			event.type = eventPath[i][1];
	    
	    			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
	    			if ( handle ) {
	    				handle.apply( cur, data );
	    			}
	    			// Note that this is a bare JS function and not a jQuery handler
	    			handle = ontype && cur[ ontype ];
	    			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
	    				event.preventDefault();
	    			}
	    		}
	    		event.type = type;
	    
	    		// If nobody prevented the default action, do it now
	    		if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	    
	    			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
	    				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {
	    
	    				// Call a native DOM method on the target with the same name name as the event.
	    				// Can't use an .isFunction() check here because IE6/7 fails that test.
	    				// Don't do default actions on window, that's where global variables be (#6170)
	    				// IE<9 dies on focus/blur to hidden element (#1486)
	    				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {
	    
	    					// Don't re-trigger an onFOO event when we call its FOO() method
	    					old = elem[ ontype ];
	    
	    					if ( old ) {
	    						elem[ ontype ] = null;
	    					}
	    
	    					// Prevent re-triggering of the same event, since we already bubbled it above
	    					jQuery.event.triggered = type;
	    					elem[ type ]();
	    					jQuery.event.triggered = undefined;
	    
	    					if ( old ) {
	    						elem[ ontype ] = old;
	    					}
	    				}
	    			}
	    		}
	    
	    		return event.result;
	    	},
	    
	    	dispatch: function( event ) {
	    
	    		// Make a writable jQuery.Event from the native event object
	    		event = jQuery.event.fix( event || window.event );
	    
	    		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
	    			delegateCount = handlers.delegateCount,
	    			args = [].slice.call( arguments, 0 ),
	    			run_all = !event.exclusive && !event.namespace,
	    			handlerQueue = [],
	    			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;
	    
	    		// Use the fix-ed jQuery.Event rather than the (read-only) native event
	    		args[0] = event;
	    		event.delegateTarget = this;
	    
	    		// Determine handlers that should run if there are delegated events
	    		// Avoid disabled elements in IE (#6911) and non-left-click bubbling in Firefox (#3861)
	    		if ( delegateCount && !event.target.disabled && !(event.button && event.type === "click") ) {
	    
	    			// Pregenerate a single jQuery object for reuse with .is()
	    			jqcur = jQuery(this);
	    			jqcur.context = this.ownerDocument || this;
	    
	    			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
	    				selMatch = {};
	    				matches = [];
	    				jqcur[0] = cur;
	    				for ( i = 0; i < delegateCount; i++ ) {
	    					handleObj = handlers[ i ];
	    					sel = handleObj.selector;
	    
	    					if ( selMatch[ sel ] === undefined ) {
	    						selMatch[ sel ] = (
	    							handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
	    						);
	    					}
	    					if ( selMatch[ sel ] ) {
	    						matches.push( handleObj );
	    					}
	    				}
	    				if ( matches.length ) {
	    					handlerQueue.push({ elem: cur, matches: matches });
	    				}
	    			}
	    		}
	    
	    		// Add the remaining (directly-bound) handlers
	    		if ( handlers.length > delegateCount ) {
	    			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
	    		}
	    
	    		// Run delegates first; they may want to stop propagation beneath us
	    		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
	    			matched = handlerQueue[ i ];
	    			event.currentTarget = matched.elem;
	    
	    			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
	    				handleObj = matched.matches[ j ];
	    
	    				// Triggered event must either 1) be non-exclusive and have no namespace, or
	    				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
	    				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {
	    
	    					event.data = handleObj.data;
	    					event.handleObj = handleObj;
	    
	    					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
	    							.apply( matched.elem, args );
	    
	    					if ( ret !== undefined ) {
	    						event.result = ret;
	    						if ( ret === false ) {
	    							event.preventDefault();
	    							event.stopPropagation();
	    						}
	    					}
	    				}
	    			}
	    		}
	    
	    		return event.result;
	    	},
	    
	    	// Includes some event props shared by KeyEvent and MouseEvent
	    	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	    	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
	    
	    	fixHooks: {},
	    
	    	keyHooks: {
	    		props: "char charCode key keyCode".split(" "),
	    		filter: function( event, original ) {
	    
	    			// Add which for key events
	    			if ( event.which == null ) {
	    				event.which = original.charCode != null ? original.charCode : original.keyCode;
	    			}
	    
	    			return event;
	    		}
	    	},
	    
	    	mouseHooks: {
	    		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
	    		filter: function( event, original ) {
	    			var eventDoc, doc, body,
	    				button = original.button,
	    				fromElement = original.fromElement;
	    
	    			// Calculate pageX/Y if missing and clientX/Y available
	    			if ( event.pageX == null && original.clientX != null ) {
	    				eventDoc = event.target.ownerDocument || document;
	    				doc = eventDoc.documentElement;
	    				body = eventDoc.body;
	    
	    				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
	    				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
	    			}
	    
	    			// Add relatedTarget, if necessary
	    			if ( !event.relatedTarget && fromElement ) {
	    				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
	    			}
	    
	    			// Add which for click: 1 === left; 2 === middle; 3 === right
	    			// Note: button is not normalized, so don't use it
	    			if ( !event.which && button !== undefined ) {
	    				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
	    			}
	    
	    			return event;
	    		}
	    	},
	    
	    	fix: function( event ) {
	    		if ( event[ jQuery.expando ] ) {
	    			return event;
	    		}
	    
	    		// Create a writable copy of the event object and normalize some properties
	    		var i, prop,
	    			originalEvent = event,
	    			fixHook = jQuery.event.fixHooks[ event.type ] || {},
	    			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	    
	    		event = jQuery.Event( originalEvent );
	    
	    		for ( i = copy.length; i; ) {
	    			prop = copy[ --i ];
	    			event[ prop ] = originalEvent[ prop ];
	    		}
	    
	    		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
	    		if ( !event.target ) {
	    			event.target = originalEvent.srcElement || document;
	    		}
	    
	    		// Target should not be a text node (#504, Safari)
	    		if ( event.target.nodeType === 3 ) {
	    			event.target = event.target.parentNode;
	    		}
	    
	    		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
	    		if ( event.metaKey === undefined ) {
	    			event.metaKey = event.ctrlKey;
	    		}
	    
	    		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	    	},
	    
	    	special: {
	    		ready: {
	    			// Make sure the ready event is setup
	    			setup: jQuery.bindReady
	    		},
	    
	    		load: {
	    			// Prevent triggered image.load events from bubbling to window.load
	    			noBubble: true
	    		},
	    
	    		focus: {
	    			delegateType: "focusin"
	    		},
	    		blur: {
	    			delegateType: "focusout"
	    		},
	    
	    		beforeunload: {
	    			setup: function( data, namespaces, eventHandle ) {
	    				// We only want to do this special case on windows
	    				if ( jQuery.isWindow( this ) ) {
	    					this.onbeforeunload = eventHandle;
	    				}
	    			},
	    
	    			teardown: function( namespaces, eventHandle ) {
	    				if ( this.onbeforeunload === eventHandle ) {
	    					this.onbeforeunload = null;
	    				}
	    			}
	    		}
	    	},
	    
	    	simulate: function( type, elem, event, bubble ) {
	    		// Piggyback on a donor event to simulate a different one.
	    		// Fake originalEvent to avoid donor's stopPropagation, but if the
	    		// simulated event prevents default then we do the same on the donor.
	    		var e = jQuery.extend(
	    			new jQuery.Event(),
	    			event,
	    			{ type: type,
	    				isSimulated: true,
	    				originalEvent: {}
	    			}
	    		);
	    		if ( bubble ) {
	    			jQuery.event.trigger( e, null, elem );
	    		} else {
	    			jQuery.event.dispatch.call( elem, e );
	    		}
	    		if ( e.isDefaultPrevented() ) {
	    			event.preventDefault();
	    		}
	    	}
	    };
	    
	    // Some plugins are using, but it's undocumented/deprecated and will be removed.
	    // The 1.7 special event interface should provide all the hooks needed now.
	    jQuery.event.handle = jQuery.event.dispatch;
	    
	    jQuery.removeEvent = document.removeEventListener ?
	    	function( elem, type, handle ) {
	    		if ( elem.removeEventListener ) {
	    			elem.removeEventListener( type, handle, false );
	    		}
	    	} :
	    	function( elem, type, handle ) {
	    		if ( elem.detachEvent ) {
	    			elem.detachEvent( "on" + type, handle );
	    		}
	    	};
	    
	    jQuery.Event = function( src, props ) {
	    	// Allow instantiation without the 'new' keyword
	    	if ( !(this instanceof jQuery.Event) ) {
	    		return new jQuery.Event( src, props );
	    	}
	    
	    	// Event object
	    	if ( src && src.type ) {
	    		this.originalEvent = src;
	    		this.type = src.type;
	    
	    		// Events bubbling up the document may have been marked as prevented
	    		// by a handler lower down the tree; reflect the correct value.
	    		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
	    			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;
	    
	    	// Event type
	    	} else {
	    		this.type = src;
	    	}
	    
	    	// Put explicitly provided properties onto the event object
	    	if ( props ) {
	    		jQuery.extend( this, props );
	    	}
	    
	    	// Create a timestamp if incoming event doesn't have one
	    	this.timeStamp = src && src.timeStamp || jQuery.now();
	    
	    	// Mark it as fixed
	    	this[ jQuery.expando ] = true;
	    };
	    
	    function returnFalse() {
	    	return false;
	    }
	    function returnTrue() {
	    	return true;
	    }
	    
	    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	    jQuery.Event.prototype = {
	    	preventDefault: function() {
	    		this.isDefaultPrevented = returnTrue;
	    
	    		var e = this.originalEvent;
	    		if ( !e ) {
	    			return;
	    		}
	    
	    		// if preventDefault exists run it on the original event
	    		if ( e.preventDefault ) {
	    			e.preventDefault();
	    
	    		// otherwise set the returnValue property of the original event to false (IE)
	    		} else {
	    			e.returnValue = false;
	    		}
	    	},
	    	stopPropagation: function() {
	    		this.isPropagationStopped = returnTrue;
	    
	    		var e = this.originalEvent;
	    		if ( !e ) {
	    			return;
	    		}
	    		// if stopPropagation exists run it on the original event
	    		if ( e.stopPropagation ) {
	    			e.stopPropagation();
	    		}
	    		// otherwise set the cancelBubble property of the original event to true (IE)
	    		e.cancelBubble = true;
	    	},
	    	stopImmediatePropagation: function() {
	    		this.isImmediatePropagationStopped = returnTrue;
	    		this.stopPropagation();
	    	},
	    	isDefaultPrevented: returnFalse,
	    	isPropagationStopped: returnFalse,
	    	isImmediatePropagationStopped: returnFalse
	    };
	    
	    // Create mouseenter/leave events using mouseover/out and event-time checks
	    jQuery.each({
	    	mouseenter: "mouseover",
	    	mouseleave: "mouseout"
	    }, function( orig, fix ) {
	    	jQuery.event.special[ orig ] = {
	    		delegateType: fix,
	    		bindType: fix,
	    
	    		handle: function( event ) {
	    			var target = this,
	    				related = event.relatedTarget,
	    				handleObj = event.handleObj,
	    				selector = handleObj.selector,
	    				ret;
	    
	    			// For mousenter/leave call the handler if related is outside the target.
	    			// NB: No relatedTarget if the mouse left/entered the browser window
	    			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
	    				event.type = handleObj.origType;
	    				ret = handleObj.handler.apply( this, arguments );
	    				event.type = fix;
	    			}
	    			return ret;
	    		}
	    	};
	    });
	    
	    // IE submit delegation
	    if ( !jQuery.support.submitBubbles ) {
	    
	    	jQuery.event.special.submit = {
	    		setup: function() {
	    			// Only need this for delegated form submit events
	    			if ( jQuery.nodeName( this, "form" ) ) {
	    				return false;
	    			}
	    
	    			// Lazy-add a submit handler when a descendant form may potentially be submitted
	    			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
	    				// Node name check avoids a VML-related crash in IE (#9807)
	    				var elem = e.target,
	    					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
	    				if ( form && !form._submit_attached ) {
	    					jQuery.event.add( form, "submit._submit", function( event ) {
	    						// If form was submitted by the user, bubble the event up the tree
	    						if ( this.parentNode && !event.isTrigger ) {
	    							jQuery.event.simulate( "submit", this.parentNode, event, true );
	    						}
	    					});
	    					form._submit_attached = true;
	    				}
	    			});
	    			// return undefined since we don't need an event listener
	    		},
	    
	    		teardown: function() {
	    			// Only need this for delegated form submit events
	    			if ( jQuery.nodeName( this, "form" ) ) {
	    				return false;
	    			}
	    
	    			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
	    			jQuery.event.remove( this, "._submit" );
	    		}
	    	};
	    }
	    
	    // IE change delegation and checkbox/radio fix
	    if ( !jQuery.support.changeBubbles ) {
	    
	    	jQuery.event.special.change = {
	    
	    		setup: function() {
	    
	    			if ( rformElems.test( this.nodeName ) ) {
	    				// IE doesn't fire change on a check/radio until blur; trigger it on click
	    				// after a propertychange. Eat the blur-change in special.change.handle.
	    				// This still fires onchange a second time for check/radio after blur.
	    				if ( this.type === "checkbox" || this.type === "radio" ) {
	    					jQuery.event.add( this, "propertychange._change", function( event ) {
	    						if ( event.originalEvent.propertyName === "checked" ) {
	    							this._just_changed = true;
	    						}
	    					});
	    					jQuery.event.add( this, "click._change", function( event ) {
	    						if ( this._just_changed && !event.isTrigger ) {
	    							this._just_changed = false;
	    							jQuery.event.simulate( "change", this, event, true );
	    						}
	    					});
	    				}
	    				return false;
	    			}
	    			// Delegated event; lazy-add a change handler on descendant inputs
	    			jQuery.event.add( this, "beforeactivate._change", function( e ) {
	    				var elem = e.target;
	    
	    				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
	    					jQuery.event.add( elem, "change._change", function( event ) {
	    						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
	    							jQuery.event.simulate( "change", this.parentNode, event, true );
	    						}
	    					});
	    					elem._change_attached = true;
	    				}
	    			});
	    		},
	    
	    		handle: function( event ) {
	    			var elem = event.target;
	    
	    			// Swallow native change events from checkbox/radio, we already triggered them above
	    			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
	    				return event.handleObj.handler.apply( this, arguments );
	    			}
	    		},
	    
	    		teardown: function() {
	    			jQuery.event.remove( this, "._change" );
	    
	    			return rformElems.test( this.nodeName );
	    		}
	    	};
	    }
	    
	    // Create "bubbling" focus and blur events
	    if ( !jQuery.support.focusinBubbles ) {
	    	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	    
	    		// Attach a single capturing handler while someone wants focusin/focusout
	    		var attaches = 0,
	    			handler = function( event ) {
	    				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
	    			};
	    
	    		jQuery.event.special[ fix ] = {
	    			setup: function() {
	    				if ( attaches++ === 0 ) {
	    					document.addEventListener( orig, handler, true );
	    				}
	    			},
	    			teardown: function() {
	    				if ( --attaches === 0 ) {
	    					document.removeEventListener( orig, handler, true );
	    				}
	    			}
	    		};
	    	});
	    }
	    
	    jQuery.fn.extend({
	    
	    	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
	    		var origFn, type;
	    
	    		// Types can be a map of types/handlers
	    		if ( typeof types === "object" ) {
	    			// ( types-Object, selector, data )
	    			if ( typeof selector !== "string" ) {
	    				// ( types-Object, data )
	    				data = selector;
	    				selector = undefined;
	    			}
	    			for ( type in types ) {
	    				this.on( type, selector, data, types[ type ], one );
	    			}
	    			return this;
	    		}
	    
	    		if ( data == null && fn == null ) {
	    			// ( types, fn )
	    			fn = selector;
	    			data = selector = undefined;
	    		} else if ( fn == null ) {
	    			if ( typeof selector === "string" ) {
	    				// ( types, selector, fn )
	    				fn = data;
	    				data = undefined;
	    			} else {
	    				// ( types, data, fn )
	    				fn = data;
	    				data = selector;
	    				selector = undefined;
	    			}
	    		}
	    		if ( fn === false ) {
	    			fn = returnFalse;
	    		} else if ( !fn ) {
	    			return this;
	    		}
	    
	    		if ( one === 1 ) {
	    			origFn = fn;
	    			fn = function( event ) {
	    				// Can use an empty set, since event contains the info
	    				jQuery().off( event );
	    				return origFn.apply( this, arguments );
	    			};
	    			// Use same guid so caller can remove using origFn
	    			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	    		}
	    		return this.each( function() {
	    			jQuery.event.add( this, types, fn, data, selector );
	    		});
	    	},
	    	one: function( types, selector, data, fn ) {
	    		return this.on.call( this, types, selector, data, fn, 1 );
	    	},
	    	off: function( types, selector, fn ) {
	    		if ( types && types.preventDefault && types.handleObj ) {
	    			// ( event )  dispatched jQuery.Event
	    			var handleObj = types.handleObj;
	    			jQuery( types.delegateTarget ).off(
	    				handleObj.namespace? handleObj.type + "." + handleObj.namespace : handleObj.type,
	    				handleObj.selector,
	    				handleObj.handler
	    			);
	    			return this;
	    		}
	    		if ( typeof types === "object" ) {
	    			// ( types-object [, selector] )
	    			for ( var type in types ) {
	    				this.off( type, selector, types[ type ] );
	    			}
	    			return this;
	    		}
	    		if ( selector === false || typeof selector === "function" ) {
	    			// ( types [, fn] )
	    			fn = selector;
	    			selector = undefined;
	    		}
	    		if ( fn === false ) {
	    			fn = returnFalse;
	    		}
	    		return this.each(function() {
	    			jQuery.event.remove( this, types, fn, selector );
	    		});
	    	},
	    
	    	bind: function( types, data, fn ) {
	    		return this.on( types, null, data, fn );
	    	},
	    	unbind: function( types, fn ) {
	    		return this.off( types, null, fn );
	    	},
	    
	    	live: function( types, data, fn ) {
	    		jQuery( this.context ).on( types, this.selector, data, fn );
	    		return this;
	    	},
	    	die: function( types, fn ) {
	    		jQuery( this.context ).off( types, this.selector || "**", fn );
	    		return this;
	    	},
	    
	    	delegate: function( selector, types, data, fn ) {
	    		return this.on( types, selector, data, fn );
	    	},
	    	undelegate: function( selector, types, fn ) {
	    		// ( namespace ) or ( selector, types [, fn] )
	    		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	    	},
	    
	    	trigger: function( type, data ) {
	    		return this.each(function() {
	    			jQuery.event.trigger( type, data, this );
	    		});
	    	},
	    	triggerHandler: function( type, data ) {
	    		if ( this[0] ) {
	    			return jQuery.event.trigger( type, data, this[0], true );
	    		}
	    	},
	    
	    	toggle: function( fn ) {
	    		// Save reference to arguments for access in closure
	    		var args = arguments,
	    			guid = fn.guid || jQuery.guid++,
	    			i = 0,
	    			toggler = function( event ) {
	    				// Figure out which function to execute
	    				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
	    				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );
	    
	    				// Make sure that clicks stop
	    				event.preventDefault();
	    
	    				// and execute the function
	    				return args[ lastToggle ].apply( this, arguments ) || false;
	    			};
	    
	    		// link all the functions, so any of them can unbind this click handler
	    		toggler.guid = guid;
	    		while ( i < args.length ) {
	    			args[ i++ ].guid = guid;
	    		}
	    
	    		return this.click( toggler );
	    	},
	    
	    	hover: function( fnOver, fnOut ) {
	    		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	    	}
	    });
	    
	    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	    	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	    	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
	    
	    	// Handle event binding
	    	jQuery.fn[ name ] = function( data, fn ) {
	    		if ( fn == null ) {
	    			fn = data;
	    			data = null;
	    		}
	    
	    		return arguments.length > 0 ?
	    			this.on( name, null, data, fn ) :
	    			this.trigger( name );
	    	};
	    
	    	if ( jQuery.attrFn ) {
	    		jQuery.attrFn[ name ] = true;
	    	}
	    
	    	if ( rkeyEvent.test( name ) ) {
	    		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	    	}
	    
	    	if ( rmouseEvent.test( name ) ) {
	    		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	    	}
	    });
	    
	    
	    
	    /*!
	     * Sizzle CSS Selector Engine
	     *  Copyright 2011, The Dojo Foundation
	     *  Released under the MIT, BSD, and GPL Licenses.
	     *  More information: http://sizzlejs.com/
	     */
	    (function(){
	    
	    var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	    	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	    	done = 0,
	    	toString = Object.prototype.toString,
	    	hasDuplicate = false,
	    	baseHasDuplicate = true,
	    	rBackslash = /\\/g,
	    	rReturn = /\r\n/g,
	    	rNonWord = /\W/;
	    
	    // Here we check if the JavaScript engine is using some sort of
	    // optimization where it does not always call our comparision
	    // function. If that is the case, discard the hasDuplicate value.
	    //   Thus far that includes Google Chrome.
	    [0, 0].sort(function() {
	    	baseHasDuplicate = false;
	    	return 0;
	    });
	    
	    var Sizzle = function( selector, context, results, seed ) {
	    	results = results || [];
	    	context = context || document;
	    
	    	var origContext = context;
	    
	    	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
	    		return [];
	    	}
	    	
	    	if ( !selector || typeof selector !== "string" ) {
	    		return results;
	    	}
	    
	    	var m, set, checkSet, extra, ret, cur, pop, i,
	    		prune = true,
	    		contextXML = Sizzle.isXML( context ),
	    		parts = [],
	    		soFar = selector;
	    	
	    	// Reset the position of the chunker regexp (start from head)
	    	do {
	    		chunker.exec( "" );
	    		m = chunker.exec( soFar );
	    
	    		if ( m ) {
	    			soFar = m[3];
	    		
	    			parts.push( m[1] );
	    		
	    			if ( m[2] ) {
	    				extra = m[3];
	    				break;
	    			}
	    		}
	    	} while ( m );
	    
	    	if ( parts.length > 1 && origPOS.exec( selector ) ) {
	    
	    		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
	    			set = posProcess( parts[0] + parts[1], context, seed );
	    
	    		} else {
	    			set = Expr.relative[ parts[0] ] ?
	    				[ context ] :
	    				Sizzle( parts.shift(), context );
	    
	    			while ( parts.length ) {
	    				selector = parts.shift();
	    
	    				if ( Expr.relative[ selector ] ) {
	    					selector += parts.shift();
	    				}
	    				
	    				set = posProcess( selector, set, seed );
	    			}
	    		}
	    
	    	} else {
	    		// Take a shortcut and set the context if the root selector is an ID
	    		// (but not if it'll be faster if the inner selector is an ID)
	    		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
	    				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
	    
	    			ret = Sizzle.find( parts.shift(), context, contextXML );
	    			context = ret.expr ?
	    				Sizzle.filter( ret.expr, ret.set )[0] :
	    				ret.set[0];
	    		}
	    
	    		if ( context ) {
	    			ret = seed ?
	    				{ expr: parts.pop(), set: makeArray(seed) } :
	    				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
	    
	    			set = ret.expr ?
	    				Sizzle.filter( ret.expr, ret.set ) :
	    				ret.set;
	    
	    			if ( parts.length > 0 ) {
	    				checkSet = makeArray( set );
	    
	    			} else {
	    				prune = false;
	    			}
	    
	    			while ( parts.length ) {
	    				cur = parts.pop();
	    				pop = cur;
	    
	    				if ( !Expr.relative[ cur ] ) {
	    					cur = "";
	    				} else {
	    					pop = parts.pop();
	    				}
	    
	    				if ( pop == null ) {
	    					pop = context;
	    				}
	    
	    				Expr.relative[ cur ]( checkSet, pop, contextXML );
	    			}
	    
	    		} else {
	    			checkSet = parts = [];
	    		}
	    	}
	    
	    	if ( !checkSet ) {
	    		checkSet = set;
	    	}
	    
	    	if ( !checkSet ) {
	    		Sizzle.error( cur || selector );
	    	}
	    
	    	if ( toString.call(checkSet) === "[object Array]" ) {
	    		if ( !prune ) {
	    			results.push.apply( results, checkSet );
	    
	    		} else if ( context && context.nodeType === 1 ) {
	    			for ( i = 0; checkSet[i] != null; i++ ) {
	    				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
	    					results.push( set[i] );
	    				}
	    			}
	    
	    		} else {
	    			for ( i = 0; checkSet[i] != null; i++ ) {
	    				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
	    					results.push( set[i] );
	    				}
	    			}
	    		}
	    
	    	} else {
	    		makeArray( checkSet, results );
	    	}
	    
	    	if ( extra ) {
	    		Sizzle( extra, origContext, results, seed );
	    		Sizzle.uniqueSort( results );
	    	}
	    
	    	return results;
	    };
	    
	    Sizzle.uniqueSort = function( results ) {
	    	if ( sortOrder ) {
	    		hasDuplicate = baseHasDuplicate;
	    		results.sort( sortOrder );
	    
	    		if ( hasDuplicate ) {
	    			for ( var i = 1; i < results.length; i++ ) {
	    				if ( results[i] === results[ i - 1 ] ) {
	    					results.splice( i--, 1 );
	    				}
	    			}
	    		}
	    	}
	    
	    	return results;
	    };
	    
	    Sizzle.matches = function( expr, set ) {
	    	return Sizzle( expr, null, null, set );
	    };
	    
	    Sizzle.matchesSelector = function( node, expr ) {
	    	return Sizzle( expr, null, null, [node] ).length > 0;
	    };
	    
	    Sizzle.find = function( expr, context, isXML ) {
	    	var set, i, len, match, type, left;
	    
	    	if ( !expr ) {
	    		return [];
	    	}
	    
	    	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
	    		type = Expr.order[i];
	    		
	    		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
	    			left = match[1];
	    			match.splice( 1, 1 );
	    
	    			if ( left.substr( left.length - 1 ) !== "\\" ) {
	    				match[1] = (match[1] || "").replace( rBackslash, "" );
	    				set = Expr.find[ type ]( match, context, isXML );
	    
	    				if ( set != null ) {
	    					expr = expr.replace( Expr.match[ type ], "" );
	    					break;
	    				}
	    			}
	    		}
	    	}
	    
	    	if ( !set ) {
	    		set = typeof context.getElementsByTagName !== "undefined" ?
	    			context.getElementsByTagName( "*" ) :
	    			[];
	    	}
	    
	    	return { set: set, expr: expr };
	    };
	    
	    Sizzle.filter = function( expr, set, inplace, not ) {
	    	var match, anyFound,
	    		type, found, item, filter, left,
	    		i, pass,
	    		old = expr,
	    		result = [],
	    		curLoop = set,
	    		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );
	    
	    	while ( expr && set.length ) {
	    		for ( type in Expr.filter ) {
	    			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
	    				filter = Expr.filter[ type ];
	    				left = match[1];
	    
	    				anyFound = false;
	    
	    				match.splice(1,1);
	    
	    				if ( left.substr( left.length - 1 ) === "\\" ) {
	    					continue;
	    				}
	    
	    				if ( curLoop === result ) {
	    					result = [];
	    				}
	    
	    				if ( Expr.preFilter[ type ] ) {
	    					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );
	    
	    					if ( !match ) {
	    						anyFound = found = true;
	    
	    					} else if ( match === true ) {
	    						continue;
	    					}
	    				}
	    
	    				if ( match ) {
	    					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
	    						if ( item ) {
	    							found = filter( item, match, i, curLoop );
	    							pass = not ^ found;
	    
	    							if ( inplace && found != null ) {
	    								if ( pass ) {
	    									anyFound = true;
	    
	    								} else {
	    									curLoop[i] = false;
	    								}
	    
	    							} else if ( pass ) {
	    								result.push( item );
	    								anyFound = true;
	    							}
	    						}
	    					}
	    				}
	    
	    				if ( found !== undefined ) {
	    					if ( !inplace ) {
	    						curLoop = result;
	    					}
	    
	    					expr = expr.replace( Expr.match[ type ], "" );
	    
	    					if ( !anyFound ) {
	    						return [];
	    					}
	    
	    					break;
	    				}
	    			}
	    		}
	    
	    		// Improper expression
	    		if ( expr === old ) {
	    			if ( anyFound == null ) {
	    				Sizzle.error( expr );
	    
	    			} else {
	    				break;
	    			}
	    		}
	    
	    		old = expr;
	    	}
	    
	    	return curLoop;
	    };
	    
	    Sizzle.error = function( msg ) {
	    	throw new Error( "Syntax error, unrecognized expression: " + msg );
	    };
	    
	    /**
	     * Utility function for retreiving the text value of an array of DOM nodes
	     * @param {Array|Element} elem
	     */
	    var getText = Sizzle.getText = function( elem ) {
	        var i, node,
	    		nodeType = elem.nodeType,
	    		ret = "";
	    
	    	if ( nodeType ) {
	    		if ( nodeType === 1 || nodeType === 9 ) {
	    			// Use textContent || innerText for elements
	    			if ( typeof elem.textContent === 'string' ) {
	    				return elem.textContent;
	    			} else if ( typeof elem.innerText === 'string' ) {
	    				// Replace IE's carriage returns
	    				return elem.innerText.replace( rReturn, '' );
	    			} else {
	    				// Traverse it's children
	    				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
	    					ret += getText( elem );
	    				}
	    			}
	    		} else if ( nodeType === 3 || nodeType === 4 ) {
	    			return elem.nodeValue;
	    		}
	    	} else {
	    
	    		// If no nodeType, this is expected to be an array
	    		for ( i = 0; (node = elem[i]); i++ ) {
	    			// Do not traverse comment nodes
	    			if ( node.nodeType !== 8 ) {
	    				ret += getText( node );
	    			}
	    		}
	    	}
	    	return ret;
	    };
	    
	    var Expr = Sizzle.selectors = {
	    	order: [ "ID", "NAME", "TAG" ],
	    
	    	match: {
	    		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
	    		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
	    		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
	    		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
	    		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
	    		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
	    		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
	    		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	    	},
	    
	    	leftMatch: {},
	    
	    	attrMap: {
	    		"class": "className",
	    		"for": "htmlFor"
	    	},
	    
	    	attrHandle: {
	    		href: function( elem ) {
	    			return elem.getAttribute( "href" );
	    		},
	    		type: function( elem ) {
	    			return elem.getAttribute( "type" );
	    		}
	    	},
	    
	    	relative: {
	    		"+": function(checkSet, part){
	    			var isPartStr = typeof part === "string",
	    				isTag = isPartStr && !rNonWord.test( part ),
	    				isPartStrNotTag = isPartStr && !isTag;
	    
	    			if ( isTag ) {
	    				part = part.toLowerCase();
	    			}
	    
	    			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
	    				if ( (elem = checkSet[i]) ) {
	    					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}
	    
	    					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
	    						elem || false :
	    						elem === part;
	    				}
	    			}
	    
	    			if ( isPartStrNotTag ) {
	    				Sizzle.filter( part, checkSet, true );
	    			}
	    		},
	    
	    		">": function( checkSet, part ) {
	    			var elem,
	    				isPartStr = typeof part === "string",
	    				i = 0,
	    				l = checkSet.length;
	    
	    			if ( isPartStr && !rNonWord.test( part ) ) {
	    				part = part.toLowerCase();
	    
	    				for ( ; i < l; i++ ) {
	    					elem = checkSet[i];
	    
	    					if ( elem ) {
	    						var parent = elem.parentNode;
	    						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
	    					}
	    				}
	    
	    			} else {
	    				for ( ; i < l; i++ ) {
	    					elem = checkSet[i];
	    
	    					if ( elem ) {
	    						checkSet[i] = isPartStr ?
	    							elem.parentNode :
	    							elem.parentNode === part;
	    					}
	    				}
	    
	    				if ( isPartStr ) {
	    					Sizzle.filter( part, checkSet, true );
	    				}
	    			}
	    		},
	    
	    		"": function(checkSet, part, isXML){
	    			var nodeCheck,
	    				doneName = done++,
	    				checkFn = dirCheck;
	    
	    			if ( typeof part === "string" && !rNonWord.test( part ) ) {
	    				part = part.toLowerCase();
	    				nodeCheck = part;
	    				checkFn = dirNodeCheck;
	    			}
	    
	    			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
	    		},
	    
	    		"~": function( checkSet, part, isXML ) {
	    			var nodeCheck,
	    				doneName = done++,
	    				checkFn = dirCheck;
	    
	    			if ( typeof part === "string" && !rNonWord.test( part ) ) {
	    				part = part.toLowerCase();
	    				nodeCheck = part;
	    				checkFn = dirNodeCheck;
	    			}
	    
	    			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
	    		}
	    	},
	    
	    	find: {
	    		ID: function( match, context, isXML ) {
	    			if ( typeof context.getElementById !== "undefined" && !isXML ) {
	    				var m = context.getElementById(match[1]);
	    				// Check parentNode to catch when Blackberry 4.6 returns
	    				// nodes that are no longer in the document #6963
	    				return m && m.parentNode ? [m] : [];
	    			}
	    		},
	    
	    		NAME: function( match, context ) {
	    			if ( typeof context.getElementsByName !== "undefined" ) {
	    				var ret = [],
	    					results = context.getElementsByName( match[1] );
	    
	    				for ( var i = 0, l = results.length; i < l; i++ ) {
	    					if ( results[i].getAttribute("name") === match[1] ) {
	    						ret.push( results[i] );
	    					}
	    				}
	    
	    				return ret.length === 0 ? null : ret;
	    			}
	    		},
	    
	    		TAG: function( match, context ) {
	    			if ( typeof context.getElementsByTagName !== "undefined" ) {
	    				return context.getElementsByTagName( match[1] );
	    			}
	    		}
	    	},
	    	preFilter: {
	    		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
	    			match = " " + match[1].replace( rBackslash, "" ) + " ";
	    
	    			if ( isXML ) {
	    				return match;
	    			}
	    
	    			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
	    				if ( elem ) {
	    					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
	    						if ( !inplace ) {
	    							result.push( elem );
	    						}
	    
	    					} else if ( inplace ) {
	    						curLoop[i] = false;
	    					}
	    				}
	    			}
	    
	    			return false;
	    		},
	    
	    		ID: function( match ) {
	    			return match[1].replace( rBackslash, "" );
	    		},
	    
	    		TAG: function( match, curLoop ) {
	    			return match[1].replace( rBackslash, "" ).toLowerCase();
	    		},
	    
	    		CHILD: function( match ) {
	    			if ( match[1] === "nth" ) {
	    				if ( !match[2] ) {
	    					Sizzle.error( match[0] );
	    				}
	    
	    				match[2] = match[2].replace(/^\+|\s*/g, '');
	    
	    				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
	    				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
	    					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
	    					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);
	    
	    				// calculate the numbers (first)n+(last) including if they are negative
	    				match[2] = (test[1] + (test[2] || 1)) - 0;
	    				match[3] = test[3] - 0;
	    			}
	    			else if ( match[2] ) {
	    				Sizzle.error( match[0] );
	    			}
	    
	    			// TODO: Move to normal caching system
	    			match[0] = done++;
	    
	    			return match;
	    		},
	    
	    		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
	    			var name = match[1] = match[1].replace( rBackslash, "" );
	    			
	    			if ( !isXML && Expr.attrMap[name] ) {
	    				match[1] = Expr.attrMap[name];
	    			}
	    
	    			// Handle if an un-quoted value was used
	    			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );
	    
	    			if ( match[2] === "~=" ) {
	    				match[4] = " " + match[4] + " ";
	    			}
	    
	    			return match;
	    		},
	    
	    		PSEUDO: function( match, curLoop, inplace, result, not ) {
	    			if ( match[1] === "not" ) {
	    				// If we're dealing with a complex expression, or a simple one
	    				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
	    					match[3] = Sizzle(match[3], null, null, curLoop);
	    
	    				} else {
	    					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
	    
	    					if ( !inplace ) {
	    						result.push.apply( result, ret );
	    					}
	    
	    					return false;
	    				}
	    
	    			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
	    				return true;
	    			}
	    			
	    			return match;
	    		},
	    
	    		POS: function( match ) {
	    			match.unshift( true );
	    
	    			return match;
	    		}
	    	},
	    	
	    	filters: {
	    		enabled: function( elem ) {
	    			return elem.disabled === false && elem.type !== "hidden";
	    		},
	    
	    		disabled: function( elem ) {
	    			return elem.disabled === true;
	    		},
	    
	    		checked: function( elem ) {
	    			return elem.checked === true;
	    		},
	    		
	    		selected: function( elem ) {
	    			// Accessing this property makes selected-by-default
	    			// options in Safari work properly
	    			if ( elem.parentNode ) {
	    				elem.parentNode.selectedIndex;
	    			}
	    			
	    			return elem.selected === true;
	    		},
	    
	    		parent: function( elem ) {
	    			return !!elem.firstChild;
	    		},
	    
	    		empty: function( elem ) {
	    			return !elem.firstChild;
	    		},
	    
	    		has: function( elem, i, match ) {
	    			return !!Sizzle( match[3], elem ).length;
	    		},
	    
	    		header: function( elem ) {
	    			return (/h\d/i).test( elem.nodeName );
	    		},
	    
	    		text: function( elem ) {
	    			var attr = elem.getAttribute( "type" ), type = elem.type;
	    			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
	    			// use getAttribute instead to test this case
	    			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
	    		},
	    
	    		radio: function( elem ) {
	    			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
	    		},
	    
	    		checkbox: function( elem ) {
	    			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
	    		},
	    
	    		file: function( elem ) {
	    			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
	    		},
	    
	    		password: function( elem ) {
	    			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
	    		},
	    
	    		submit: function( elem ) {
	    			var name = elem.nodeName.toLowerCase();
	    			return (name === "input" || name === "button") && "submit" === elem.type;
	    		},
	    
	    		image: function( elem ) {
	    			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
	    		},
	    
	    		reset: function( elem ) {
	    			var name = elem.nodeName.toLowerCase();
	    			return (name === "input" || name === "button") && "reset" === elem.type;
	    		},
	    
	    		button: function( elem ) {
	    			var name = elem.nodeName.toLowerCase();
	    			return name === "input" && "button" === elem.type || name === "button";
	    		},
	    
	    		input: function( elem ) {
	    			return (/input|select|textarea|button/i).test( elem.nodeName );
	    		},
	    
	    		focus: function( elem ) {
	    			return elem === elem.ownerDocument.activeElement;
	    		}
	    	},
	    	setFilters: {
	    		first: function( elem, i ) {
	    			return i === 0;
	    		},
	    
	    		last: function( elem, i, match, array ) {
	    			return i === array.length - 1;
	    		},
	    
	    		even: function( elem, i ) {
	    			return i % 2 === 0;
	    		},
	    
	    		odd: function( elem, i ) {
	    			return i % 2 === 1;
	    		},
	    
	    		lt: function( elem, i, match ) {
	    			return i < match[3] - 0;
	    		},
	    
	    		gt: function( elem, i, match ) {
	    			return i > match[3] - 0;
	    		},
	    
	    		nth: function( elem, i, match ) {
	    			return match[3] - 0 === i;
	    		},
	    
	    		eq: function( elem, i, match ) {
	    			return match[3] - 0 === i;
	    		}
	    	},
	    	filter: {
	    		PSEUDO: function( elem, match, i, array ) {
	    			var name = match[1],
	    				filter = Expr.filters[ name ];
	    
	    			if ( filter ) {
	    				return filter( elem, i, match, array );
	    
	    			} else if ( name === "contains" ) {
	    				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;
	    
	    			} else if ( name === "not" ) {
	    				var not = match[3];
	    
	    				for ( var j = 0, l = not.length; j < l; j++ ) {
	    					if ( not[j] === elem ) {
	    						return false;
	    					}
	    				}
	    
	    				return true;
	    
	    			} else {
	    				Sizzle.error( name );
	    			}
	    		},
	    
	    		CHILD: function( elem, match ) {
	    			var first, last,
	    				doneName, parent, cache,
	    				count, diff,
	    				type = match[1],
	    				node = elem;
	    
	    			switch ( type ) {
	    				case "only":
	    				case "first":
	    					while ( (node = node.previousSibling) )	 {
	    						if ( node.nodeType === 1 ) { 
	    							return false; 
	    						}
	    					}
	    
	    					if ( type === "first" ) { 
	    						return true; 
	    					}
	    
	    					node = elem;
	    
	    				case "last":
	    					while ( (node = node.nextSibling) )	 {
	    						if ( node.nodeType === 1 ) { 
	    							return false; 
	    						}
	    					}
	    
	    					return true;
	    
	    				case "nth":
	    					first = match[2];
	    					last = match[3];
	    
	    					if ( first === 1 && last === 0 ) {
	    						return true;
	    					}
	    					
	    					doneName = match[0];
	    					parent = elem.parentNode;
	    	
	    					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
	    						count = 0;
	    						
	    						for ( node = parent.firstChild; node; node = node.nextSibling ) {
	    							if ( node.nodeType === 1 ) {
	    								node.nodeIndex = ++count;
	    							}
	    						} 
	    
	    						parent[ expando ] = doneName;
	    					}
	    					
	    					diff = elem.nodeIndex - last;
	    
	    					if ( first === 0 ) {
	    						return diff === 0;
	    
	    					} else {
	    						return ( diff % first === 0 && diff / first >= 0 );
	    					}
	    			}
	    		},
	    
	    		ID: function( elem, match ) {
	    			return elem.nodeType === 1 && elem.getAttribute("id") === match;
	    		},
	    
	    		TAG: function( elem, match ) {
	    			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
	    		},
	    		
	    		CLASS: function( elem, match ) {
	    			return (" " + (elem.className || elem.getAttribute("class")) + " ")
	    				.indexOf( match ) > -1;
	    		},
	    
	    		ATTR: function( elem, match ) {
	    			var name = match[1],
	    				result = Sizzle.attr ?
	    					Sizzle.attr( elem, name ) :
	    					Expr.attrHandle[ name ] ?
	    					Expr.attrHandle[ name ]( elem ) :
	    					elem[ name ] != null ?
	    						elem[ name ] :
	    						elem.getAttribute( name ),
	    				value = result + "",
	    				type = match[2],
	    				check = match[4];
	    
	    			return result == null ?
	    				type === "!=" :
	    				!type && Sizzle.attr ?
	    				result != null :
	    				type === "=" ?
	    				value === check :
	    				type === "*=" ?
	    				value.indexOf(check) >= 0 :
	    				type === "~=" ?
	    				(" " + value + " ").indexOf(check) >= 0 :
	    				!check ?
	    				value && result !== false :
	    				type === "!=" ?
	    				value !== check :
	    				type === "^=" ?
	    				value.indexOf(check) === 0 :
	    				type === "$=" ?
	    				value.substr(value.length - check.length) === check :
	    				type === "|=" ?
	    				value === check || value.substr(0, check.length + 1) === check + "-" :
	    				false;
	    		},
	    
	    		POS: function( elem, match, i, array ) {
	    			var name = match[2],
	    				filter = Expr.setFilters[ name ];
	    
	    			if ( filter ) {
	    				return filter( elem, i, match, array );
	    			}
	    		}
	    	}
	    };
	    
	    var origPOS = Expr.match.POS,
	    	fescape = function(all, num){
	    		return "\\" + (num - 0 + 1);
	    	};
	    
	    for ( var type in Expr.match ) {
	    	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	    	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
	    }
	    
	    var makeArray = function( array, results ) {
	    	array = Array.prototype.slice.call( array, 0 );
	    
	    	if ( results ) {
	    		results.push.apply( results, array );
	    		return results;
	    	}
	    	
	    	return array;
	    };
	    
	    // Perform a simple check to determine if the browser is capable of
	    // converting a NodeList to an array using builtin methods.
	    // Also verifies that the returned array holds DOM nodes
	    // (which is not the case in the Blackberry browser)
	    try {
	    	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;
	    
	    // Provide a fallback method if it does not work
	    } catch( e ) {
	    	makeArray = function( array, results ) {
	    		var i = 0,
	    			ret = results || [];
	    
	    		if ( toString.call(array) === "[object Array]" ) {
	    			Array.prototype.push.apply( ret, array );
	    
	    		} else {
	    			if ( typeof array.length === "number" ) {
	    				for ( var l = array.length; i < l; i++ ) {
	    					ret.push( array[i] );
	    				}
	    
	    			} else {
	    				for ( ; array[i]; i++ ) {
	    					ret.push( array[i] );
	    				}
	    			}
	    		}
	    
	    		return ret;
	    	};
	    }
	    
	    var sortOrder, siblingCheck;
	    
	    if ( document.documentElement.compareDocumentPosition ) {
	    	sortOrder = function( a, b ) {
	    		if ( a === b ) {
	    			hasDuplicate = true;
	    			return 0;
	    		}
	    
	    		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
	    			return a.compareDocumentPosition ? -1 : 1;
	    		}
	    
	    		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	    	};
	    
	    } else {
	    	sortOrder = function( a, b ) {
	    		// The nodes are identical, we can exit early
	    		if ( a === b ) {
	    			hasDuplicate = true;
	    			return 0;
	    
	    		// Fallback to using sourceIndex (in IE) if it's available on both nodes
	    		} else if ( a.sourceIndex && b.sourceIndex ) {
	    			return a.sourceIndex - b.sourceIndex;
	    		}
	    
	    		var al, bl,
	    			ap = [],
	    			bp = [],
	    			aup = a.parentNode,
	    			bup = b.parentNode,
	    			cur = aup;
	    
	    		// If the nodes are siblings (or identical) we can do a quick check
	    		if ( aup === bup ) {
	    			return siblingCheck( a, b );
	    
	    		// If no parents were found then the nodes are disconnected
	    		} else if ( !aup ) {
	    			return -1;
	    
	    		} else if ( !bup ) {
	    			return 1;
	    		}
	    
	    		// Otherwise they're somewhere else in the tree so we need
	    		// to build up a full list of the parentNodes for comparison
	    		while ( cur ) {
	    			ap.unshift( cur );
	    			cur = cur.parentNode;
	    		}
	    
	    		cur = bup;
	    
	    		while ( cur ) {
	    			bp.unshift( cur );
	    			cur = cur.parentNode;
	    		}
	    
	    		al = ap.length;
	    		bl = bp.length;
	    
	    		// Start walking down the tree looking for a discrepancy
	    		for ( var i = 0; i < al && i < bl; i++ ) {
	    			if ( ap[i] !== bp[i] ) {
	    				return siblingCheck( ap[i], bp[i] );
	    			}
	    		}
	    
	    		// We ended someplace up the tree so do a sibling check
	    		return i === al ?
	    			siblingCheck( a, bp[i], -1 ) :
	    			siblingCheck( ap[i], b, 1 );
	    	};
	    
	    	siblingCheck = function( a, b, ret ) {
	    		if ( a === b ) {
	    			return ret;
	    		}
	    
	    		var cur = a.nextSibling;
	    
	    		while ( cur ) {
	    			if ( cur === b ) {
	    				return -1;
	    			}
	    
	    			cur = cur.nextSibling;
	    		}
	    
	    		return 1;
	    	};
	    }
	    
	    // Check to see if the browser returns elements by name when
	    // querying by getElementById (and provide a workaround)
	    (function(){
	    	// We're going to inject a fake input element with a specified name
	    	var form = document.createElement("div"),
	    		id = "script" + (new Date()).getTime(),
	    		root = document.documentElement;
	    
	    	form.innerHTML = "<a name='" + id + "'/>";
	    
	    	// Inject it into the root element, check its status, and remove it quickly
	    	root.insertBefore( form, root.firstChild );
	    
	    	// The workaround has to do additional checks after a getElementById
	    	// Which slows things down for other browsers (hence the branching)
	    	if ( document.getElementById( id ) ) {
	    		Expr.find.ID = function( match, context, isXML ) {
	    			if ( typeof context.getElementById !== "undefined" && !isXML ) {
	    				var m = context.getElementById(match[1]);
	    
	    				return m ?
	    					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
	    						[m] :
	    						undefined :
	    					[];
	    			}
	    		};
	    
	    		Expr.filter.ID = function( elem, match ) {
	    			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
	    
	    			return elem.nodeType === 1 && node && node.nodeValue === match;
	    		};
	    	}
	    
	    	root.removeChild( form );
	    
	    	// release memory in IE
	    	root = form = null;
	    })();
	    
	    (function(){
	    	// Check to see if the browser returns only elements
	    	// when doing getElementsByTagName("*")
	    
	    	// Create a fake element
	    	var div = document.createElement("div");
	    	div.appendChild( document.createComment("") );
	    
	    	// Make sure no comments are found
	    	if ( div.getElementsByTagName("*").length > 0 ) {
	    		Expr.find.TAG = function( match, context ) {
	    			var results = context.getElementsByTagName( match[1] );
	    
	    			// Filter out possible comments
	    			if ( match[1] === "*" ) {
	    				var tmp = [];
	    
	    				for ( var i = 0; results[i]; i++ ) {
	    					if ( results[i].nodeType === 1 ) {
	    						tmp.push( results[i] );
	    					}
	    				}
	    
	    				results = tmp;
	    			}
	    
	    			return results;
	    		};
	    	}
	    
	    	// Check to see if an attribute returns normalized href attributes
	    	div.innerHTML = "<a href='#'></a>";
	    
	    	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
	    			div.firstChild.getAttribute("href") !== "#" ) {
	    
	    		Expr.attrHandle.href = function( elem ) {
	    			return elem.getAttribute( "href", 2 );
	    		};
	    	}
	    
	    	// release memory in IE
	    	div = null;
	    })();
	    
	    if ( document.querySelectorAll ) {
	    	(function(){
	    		var oldSizzle = Sizzle,
	    			div = document.createElement("div"),
	    			id = "__sizzle__";
	    
	    		div.innerHTML = "<p class='TEST'></p>";
	    
	    		// Safari can't handle uppercase or unicode characters when
	    		// in quirks mode.
	    		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
	    			return;
	    		}
	    	
	    		Sizzle = function( query, context, extra, seed ) {
	    			context = context || document;
	    
	    			// Only use querySelectorAll on non-XML documents
	    			// (ID selectors don't work in non-HTML documents)
	    			if ( !seed && !Sizzle.isXML(context) ) {
	    				// See if we find a selector to speed up
	    				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
	    				
	    				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
	    					// Speed-up: Sizzle("TAG")
	    					if ( match[1] ) {
	    						return makeArray( context.getElementsByTagName( query ), extra );
	    					
	    					// Speed-up: Sizzle(".CLASS")
	    					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
	    						return makeArray( context.getElementsByClassName( match[2] ), extra );
	    					}
	    				}
	    				
	    				if ( context.nodeType === 9 ) {
	    					// Speed-up: Sizzle("body")
	    					// The body element only exists once, optimize finding it
	    					if ( query === "body" && context.body ) {
	    						return makeArray( [ context.body ], extra );
	    						
	    					// Speed-up: Sizzle("#ID")
	    					} else if ( match && match[3] ) {
	    						var elem = context.getElementById( match[3] );
	    
	    						// Check parentNode to catch when Blackberry 4.6 returns
	    						// nodes that are no longer in the document #6963
	    						if ( elem && elem.parentNode ) {
	    							// Handle the case where IE and Opera return items
	    							// by name instead of ID
	    							if ( elem.id === match[3] ) {
	    								return makeArray( [ elem ], extra );
	    							}
	    							
	    						} else {
	    							return makeArray( [], extra );
	    						}
	    					}
	    					
	    					try {
	    						return makeArray( context.querySelectorAll(query), extra );
	    					} catch(qsaError) {}
	    
	    				// qSA works strangely on Element-rooted queries
	    				// We can work around this by specifying an extra ID on the root
	    				// and working up from there (Thanks to Andrew Dupont for the technique)
	    				// IE 8 doesn't work on object elements
	    				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
	    					var oldContext = context,
	    						old = context.getAttribute( "id" ),
	    						nid = old || id,
	    						hasParent = context.parentNode,
	    						relativeHierarchySelector = /^\s*[+~]/.test( query );
	    
	    					if ( !old ) {
	    						context.setAttribute( "id", nid );
	    					} else {
	    						nid = nid.replace( /'/g, "\\$&" );
	    					}
	    					if ( relativeHierarchySelector && hasParent ) {
	    						context = context.parentNode;
	    					}
	    
	    					try {
	    						if ( !relativeHierarchySelector || hasParent ) {
	    							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
	    						}
	    
	    					} catch(pseudoError) {
	    					} finally {
	    						if ( !old ) {
	    							oldContext.removeAttribute( "id" );
	    						}
	    					}
	    				}
	    			}
	    		
	    			return oldSizzle(query, context, extra, seed);
	    		};
	    
	    		for ( var prop in oldSizzle ) {
	    			Sizzle[ prop ] = oldSizzle[ prop ];
	    		}
	    
	    		// release memory in IE
	    		div = null;
	    	})();
	    }
	    
	    (function(){
	    	var html = document.documentElement,
	    		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;
	    
	    	if ( matches ) {
	    		// Check to see if it's possible to do matchesSelector
	    		// on a disconnected node (IE 9 fails this)
	    		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
	    			pseudoWorks = false;
	    
	    		try {
	    			// This should fail with an exception
	    			// Gecko does not error, returns false instead
	    			matches.call( document.documentElement, "[test!='']:sizzle" );
	    	
	    		} catch( pseudoError ) {
	    			pseudoWorks = true;
	    		}
	    
	    		Sizzle.matchesSelector = function( node, expr ) {
	    			// Make sure that attribute selectors are quoted
	    			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
	    
	    			if ( !Sizzle.isXML( node ) ) {
	    				try { 
	    					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
	    						var ret = matches.call( node, expr );
	    
	    						// IE 9's matchesSelector returns false on disconnected nodes
	    						if ( ret || !disconnectedMatch ||
	    								// As well, disconnected nodes are said to be in a document
	    								// fragment in IE 9, so check for that
	    								node.document && node.document.nodeType !== 11 ) {
	    							return ret;
	    						}
	    					}
	    				} catch(e) {}
	    			}
	    
	    			return Sizzle(expr, null, null, [node]).length > 0;
	    		};
	    	}
	    })();
	    
	    (function(){
	    	var div = document.createElement("div");
	    
	    	div.innerHTML = "<div class='test e'></div><div class='test'></div>";
	    
	    	// Opera can't find a second classname (in 9.6)
	    	// Also, make sure that getElementsByClassName actually exists
	    	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
	    		return;
	    	}
	    
	    	// Safari caches class attributes, doesn't catch changes (in 3.2)
	    	div.lastChild.className = "e";
	    
	    	if ( div.getElementsByClassName("e").length === 1 ) {
	    		return;
	    	}
	    	
	    	Expr.order.splice(1, 0, "CLASS");
	    	Expr.find.CLASS = function( match, context, isXML ) {
	    		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
	    			return context.getElementsByClassName(match[1]);
	    		}
	    	};
	    
	    	// release memory in IE
	    	div = null;
	    })();
	    
	    function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	    	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
	    		var elem = checkSet[i];
	    
	    		if ( elem ) {
	    			var match = false;
	    
	    			elem = elem[dir];
	    
	    			while ( elem ) {
	    				if ( elem[ expando ] === doneName ) {
	    					match = checkSet[elem.sizset];
	    					break;
	    				}
	    
	    				if ( elem.nodeType === 1 && !isXML ){
	    					elem[ expando ] = doneName;
	    					elem.sizset = i;
	    				}
	    
	    				if ( elem.nodeName.toLowerCase() === cur ) {
	    					match = elem;
	    					break;
	    				}
	    
	    				elem = elem[dir];
	    			}
	    
	    			checkSet[i] = match;
	    		}
	    	}
	    }
	    
	    function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	    	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
	    		var elem = checkSet[i];
	    
	    		if ( elem ) {
	    			var match = false;
	    			
	    			elem = elem[dir];
	    
	    			while ( elem ) {
	    				if ( elem[ expando ] === doneName ) {
	    					match = checkSet[elem.sizset];
	    					break;
	    				}
	    
	    				if ( elem.nodeType === 1 ) {
	    					if ( !isXML ) {
	    						elem[ expando ] = doneName;
	    						elem.sizset = i;
	    					}
	    
	    					if ( typeof cur !== "string" ) {
	    						if ( elem === cur ) {
	    							match = true;
	    							break;
	    						}
	    
	    					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
	    						match = elem;
	    						break;
	    					}
	    				}
	    
	    				elem = elem[dir];
	    			}
	    
	    			checkSet[i] = match;
	    		}
	    	}
	    }
	    
	    if ( document.documentElement.contains ) {
	    	Sizzle.contains = function( a, b ) {
	    		return a !== b && (a.contains ? a.contains(b) : true);
	    	};
	    
	    } else if ( document.documentElement.compareDocumentPosition ) {
	    	Sizzle.contains = function( a, b ) {
	    		return !!(a.compareDocumentPosition(b) & 16);
	    	};
	    
	    } else {
	    	Sizzle.contains = function() {
	    		return false;
	    	};
	    }
	    
	    Sizzle.isXML = function( elem ) {
	    	// documentElement is verified for cases where it doesn't yet exist
	    	// (such as loading iframes in IE - #4833) 
	    	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
	    
	    	return documentElement ? documentElement.nodeName !== "HTML" : false;
	    };
	    
	    var posProcess = function( selector, context, seed ) {
	    	var match,
	    		tmpSet = [],
	    		later = "",
	    		root = context.nodeType ? [context] : context;
	    
	    	// Position selectors must be done after the filter
	    	// And so must :not(positional) so we move all PSEUDOs to the end
	    	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
	    		later += match[0];
	    		selector = selector.replace( Expr.match.PSEUDO, "" );
	    	}
	    
	    	selector = Expr.relative[selector] ? selector + "*" : selector;
	    
	    	for ( var i = 0, l = root.length; i < l; i++ ) {
	    		Sizzle( selector, root[i], tmpSet, seed );
	    	}
	    
	    	return Sizzle.filter( later, tmpSet );
	    };
	    
	    // EXPOSE
	    // Override sizzle attribute retrieval
	    Sizzle.attr = jQuery.attr;
	    Sizzle.selectors.attrMap = {};
	    jQuery.find = Sizzle;
	    jQuery.expr = Sizzle.selectors;
	    jQuery.expr[":"] = jQuery.expr.filters;
	    jQuery.unique = Sizzle.uniqueSort;
	    jQuery.text = Sizzle.getText;
	    jQuery.isXMLDoc = Sizzle.isXML;
	    jQuery.contains = Sizzle.contains;
	    
	    
	    })();
	    
	    
	    var runtil = /Until$/,
	    	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	    	// Note: This RegExp should be improved, or likely pulled from Sizzle
	    	rmultiselector = /,/,
	    	isSimple = /^.[^:#\[\.,]*$/,
	    	slice = Array.prototype.slice,
	    	POS = jQuery.expr.match.POS,
	    	// methods guaranteed to produce a unique set when starting from a unique set
	    	guaranteedUnique = {
	    		children: true,
	    		contents: true,
	    		next: true,
	    		prev: true
	    	};
	    
	    jQuery.fn.extend({
	    	find: function( selector ) {
	    		var self = this,
	    			i, l;
	    
	    		if ( typeof selector !== "string" ) {
	    			return jQuery( selector ).filter(function() {
	    				for ( i = 0, l = self.length; i < l; i++ ) {
	    					if ( jQuery.contains( self[ i ], this ) ) {
	    						return true;
	    					}
	    				}
	    			});
	    		}
	    
	    		var ret = this.pushStack( "", "find", selector ),
	    			length, n, r;
	    
	    		for ( i = 0, l = this.length; i < l; i++ ) {
	    			length = ret.length;
	    			jQuery.find( selector, this[i], ret );
	    
	    			if ( i > 0 ) {
	    				// Make sure that the results are unique
	    				for ( n = length; n < ret.length; n++ ) {
	    					for ( r = 0; r < length; r++ ) {
	    						if ( ret[r] === ret[n] ) {
	    							ret.splice(n--, 1);
	    							break;
	    						}
	    					}
	    				}
	    			}
	    		}
	    
	    		return ret;
	    	},
	    
	    	has: function( target ) {
	    		var targets = jQuery( target );
	    		return this.filter(function() {
	    			for ( var i = 0, l = targets.length; i < l; i++ ) {
	    				if ( jQuery.contains( this, targets[i] ) ) {
	    					return true;
	    				}
	    			}
	    		});
	    	},
	    
	    	not: function( selector ) {
	    		return this.pushStack( winnow(this, selector, false), "not", selector);
	    	},
	    
	    	filter: function( selector ) {
	    		return this.pushStack( winnow(this, selector, true), "filter", selector );
	    	},
	    
	    	is: function( selector ) {
	    		return !!selector && ( 
	    			typeof selector === "string" ?
	    				// If this is a positional selector, check membership in the returned set
	    				// so $("p:first").is("p:last") won't return true for a doc with two "p".
	    				POS.test( selector ) ? 
	    					jQuery( selector, this.context ).index( this[0] ) >= 0 :
	    					jQuery.filter( selector, this ).length > 0 :
	    				this.filter( selector ).length > 0 );
	    	},
	    
	    	closest: function( selectors, context ) {
	    		var ret = [], i, l, cur = this[0];
	    		
	    		// Array (deprecated as of jQuery 1.7)
	    		if ( jQuery.isArray( selectors ) ) {
	    			var level = 1;
	    
	    			while ( cur && cur.ownerDocument && cur !== context ) {
	    				for ( i = 0; i < selectors.length; i++ ) {
	    
	    					if ( jQuery( cur ).is( selectors[ i ] ) ) {
	    						ret.push({ selector: selectors[ i ], elem: cur, level: level });
	    					}
	    				}
	    
	    				cur = cur.parentNode;
	    				level++;
	    			}
	    
	    			return ret;
	    		}
	    
	    		// String
	    		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
	    				jQuery( selectors, context || this.context ) :
	    				0;
	    
	    		for ( i = 0, l = this.length; i < l; i++ ) {
	    			cur = this[i];
	    
	    			while ( cur ) {
	    				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
	    					ret.push( cur );
	    					break;
	    
	    				} else {
	    					cur = cur.parentNode;
	    					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
	    						break;
	    					}
	    				}
	    			}
	    		}
	    
	    		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;
	    
	    		return this.pushStack( ret, "closest", selectors );
	    	},
	    
	    	// Determine the position of an element within
	    	// the matched set of elements
	    	index: function( elem ) {
	    
	    		// No argument, return index in parent
	    		if ( !elem ) {
	    			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
	    		}
	    
	    		// index in selector
	    		if ( typeof elem === "string" ) {
	    			return jQuery.inArray( this[0], jQuery( elem ) );
	    		}
	    
	    		// Locate the position of the desired element
	    		return jQuery.inArray(
	    			// If it receives a jQuery object, the first element is used
	    			elem.jquery ? elem[0] : elem, this );
	    	},
	    
	    	add: function( selector, context ) {
	    		var set = typeof selector === "string" ?
	    				jQuery( selector, context ) :
	    				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
	    			all = jQuery.merge( this.get(), set );
	    
	    		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
	    			all :
	    			jQuery.unique( all ) );
	    	},
	    
	    	andSelf: function() {
	    		return this.add( this.prevObject );
	    	}
	    });
	    
	    // A painfully simple check to see if an element is disconnected
	    // from a document (should be improved, where feasible).
	    function isDisconnected( node ) {
	    	return !node || !node.parentNode || node.parentNode.nodeType === 11;
	    }
	    
	    jQuery.each({
	    	parent: function( elem ) {
	    		var parent = elem.parentNode;
	    		return parent && parent.nodeType !== 11 ? parent : null;
	    	},
	    	parents: function( elem ) {
	    		return jQuery.dir( elem, "parentNode" );
	    	},
	    	parentsUntil: function( elem, i, until ) {
	    		return jQuery.dir( elem, "parentNode", until );
	    	},
	    	next: function( elem ) {
	    		return jQuery.nth( elem, 2, "nextSibling" );
	    	},
	    	prev: function( elem ) {
	    		return jQuery.nth( elem, 2, "previousSibling" );
	    	},
	    	nextAll: function( elem ) {
	    		return jQuery.dir( elem, "nextSibling" );
	    	},
	    	prevAll: function( elem ) {
	    		return jQuery.dir( elem, "previousSibling" );
	    	},
	    	nextUntil: function( elem, i, until ) {
	    		return jQuery.dir( elem, "nextSibling", until );
	    	},
	    	prevUntil: function( elem, i, until ) {
	    		return jQuery.dir( elem, "previousSibling", until );
	    	},
	    	siblings: function( elem ) {
	    		return jQuery.sibling( elem.parentNode.firstChild, elem );
	    	},
	    	children: function( elem ) {
	    		return jQuery.sibling( elem.firstChild );
	    	},
	    	contents: function( elem ) {
	    		return jQuery.nodeName( elem, "iframe" ) ?
	    			elem.contentDocument || elem.contentWindow.document :
	    			jQuery.makeArray( elem.childNodes );
	    	}
	    }, function( name, fn ) {
	    	jQuery.fn[ name ] = function( until, selector ) {
	    		var ret = jQuery.map( this, fn, until );
	    
	    		if ( !runtil.test( name ) ) {
	    			selector = until;
	    		}
	    
	    		if ( selector && typeof selector === "string" ) {
	    			ret = jQuery.filter( selector, ret );
	    		}
	    
	    		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;
	    
	    		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
	    			ret = ret.reverse();
	    		}
	    
	    		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	    	};
	    });
	    
	    jQuery.extend({
	    	filter: function( expr, elems, not ) {
	    		if ( not ) {
	    			expr = ":not(" + expr + ")";
	    		}
	    
	    		return elems.length === 1 ?
	    			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
	    			jQuery.find.matches(expr, elems);
	    	},
	    
	    	dir: function( elem, dir, until ) {
	    		var matched = [],
	    			cur = elem[ dir ];
	    
	    		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
	    			if ( cur.nodeType === 1 ) {
	    				matched.push( cur );
	    			}
	    			cur = cur[dir];
	    		}
	    		return matched;
	    	},
	    
	    	nth: function( cur, result, dir, elem ) {
	    		result = result || 1;
	    		var num = 0;
	    
	    		for ( ; cur; cur = cur[dir] ) {
	    			if ( cur.nodeType === 1 && ++num === result ) {
	    				break;
	    			}
	    		}
	    
	    		return cur;
	    	},
	    
	    	sibling: function( n, elem ) {
	    		var r = [];
	    
	    		for ( ; n; n = n.nextSibling ) {
	    			if ( n.nodeType === 1 && n !== elem ) {
	    				r.push( n );
	    			}
	    		}
	    
	    		return r;
	    	}
	    });
	    
	    // Implement the identical functionality for filter and not
	    function winnow( elements, qualifier, keep ) {
	    
	    	// Can't pass null or undefined to indexOf in Firefox 4
	    	// Set to 0 to skip string check
	    	qualifier = qualifier || 0;
	    
	    	if ( jQuery.isFunction( qualifier ) ) {
	    		return jQuery.grep(elements, function( elem, i ) {
	    			var retVal = !!qualifier.call( elem, i, elem );
	    			return retVal === keep;
	    		});
	    
	    	} else if ( qualifier.nodeType ) {
	    		return jQuery.grep(elements, function( elem, i ) {
	    			return ( elem === qualifier ) === keep;
	    		});
	    
	    	} else if ( typeof qualifier === "string" ) {
	    		var filtered = jQuery.grep(elements, function( elem ) {
	    			return elem.nodeType === 1;
	    		});
	    
	    		if ( isSimple.test( qualifier ) ) {
	    			return jQuery.filter(qualifier, filtered, !keep);
	    		} else {
	    			qualifier = jQuery.filter( qualifier, filtered );
	    		}
	    	}
	    
	    	return jQuery.grep(elements, function( elem, i ) {
	    		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	    	});
	    }
	    
	    
	    
	    
	    function createSafeFragment( document ) {
	    	var list = nodeNames.split( "|" ),
	    	safeFrag = document.createDocumentFragment();
	    
	    	if ( safeFrag.createElement ) {
	    		while ( list.length ) {
	    			safeFrag.createElement(
	    				list.pop()
	    			);
	    		}
	    	}
	    	return safeFrag;
	    }
	    
	    var nodeNames = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|" +
	    		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	    	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	    	rleadingWhitespace = /^\s+/,
	    	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	    	rtagName = /<([\w:]+)/,
	    	rtbody = /<tbody/i,
	    	rhtml = /<|&#?\w+;/,
	    	rnoInnerhtml = /<(?:script|style)/i,
	    	rnocache = /<(?:script|object|embed|option|style)/i,
	    	rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"),
	    	// checked="checked" or checked
	    	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    	rscriptType = /\/(java|ecma)script/i,
	    	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	    	wrapMap = {
	    		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	    		legend: [ 1, "<fieldset>", "</fieldset>" ],
	    		thead: [ 1, "<table>", "</table>" ],
	    		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	    		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	    		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	    		area: [ 1, "<map>", "</map>" ],
	    		_default: [ 0, "", "" ]
	    	},
	    	safeFragment = createSafeFragment( document );
	    
	    wrapMap.optgroup = wrapMap.option;
	    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	    wrapMap.th = wrapMap.td;
	    
	    // IE can't serialize <link> and <script> tags normally
	    if ( !jQuery.support.htmlSerialize ) {
	    	wrapMap._default = [ 1, "div<div>", "</div>" ];
	    }
	    
	    jQuery.fn.extend({
	    	text: function( text ) {
	    		if ( jQuery.isFunction(text) ) {
	    			return this.each(function(i) {
	    				var self = jQuery( this );
	    
	    				self.text( text.call(this, i, self.text()) );
	    			});
	    		}
	    
	    		if ( typeof text !== "object" && text !== undefined ) {
	    			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
	    		}
	    
	    		return jQuery.text( this );
	    	},
	    
	    	wrapAll: function( html ) {
	    		if ( jQuery.isFunction( html ) ) {
	    			return this.each(function(i) {
	    				jQuery(this).wrapAll( html.call(this, i) );
	    			});
	    		}
	    
	    		if ( this[0] ) {
	    			// The elements to wrap the target around
	    			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
	    
	    			if ( this[0].parentNode ) {
	    				wrap.insertBefore( this[0] );
	    			}
	    
	    			wrap.map(function() {
	    				var elem = this;
	    
	    				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
	    					elem = elem.firstChild;
	    				}
	    
	    				return elem;
	    			}).append( this );
	    		}
	    
	    		return this;
	    	},
	    
	    	wrapInner: function( html ) {
	    		if ( jQuery.isFunction( html ) ) {
	    			return this.each(function(i) {
	    				jQuery(this).wrapInner( html.call(this, i) );
	    			});
	    		}
	    
	    		return this.each(function() {
	    			var self = jQuery( this ),
	    				contents = self.contents();
	    
	    			if ( contents.length ) {
	    				contents.wrapAll( html );
	    
	    			} else {
	    				self.append( html );
	    			}
	    		});
	    	},
	    
	    	wrap: function( html ) {
	    		var isFunction = jQuery.isFunction( html );
	    
	    		return this.each(function(i) {
	    			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
	    		});
	    	},
	    
	    	unwrap: function() {
	    		return this.parent().each(function() {
	    			if ( !jQuery.nodeName( this, "body" ) ) {
	    				jQuery( this ).replaceWith( this.childNodes );
	    			}
	    		}).end();
	    	},
	    
	    	append: function() {
	    		return this.domManip(arguments, true, function( elem ) {
	    			if ( this.nodeType === 1 ) {
	    				this.appendChild( elem );
	    			}
	    		});
	    	},
	    
	    	prepend: function() {
	    		return this.domManip(arguments, true, function( elem ) {
	    			if ( this.nodeType === 1 ) {
	    				this.insertBefore( elem, this.firstChild );
	    			}
	    		});
	    	},
	    
	    	before: function() {
	    		if ( this[0] && this[0].parentNode ) {
	    			return this.domManip(arguments, false, function( elem ) {
	    				this.parentNode.insertBefore( elem, this );
	    			});
	    		} else if ( arguments.length ) {
	    			var set = jQuery.clean( arguments );
	    			set.push.apply( set, this.toArray() );
	    			return this.pushStack( set, "before", arguments );
	    		}
	    	},
	    
	    	after: function() {
	    		if ( this[0] && this[0].parentNode ) {
	    			return this.domManip(arguments, false, function( elem ) {
	    				this.parentNode.insertBefore( elem, this.nextSibling );
	    			});
	    		} else if ( arguments.length ) {
	    			var set = this.pushStack( this, "after", arguments );
	    			set.push.apply( set, jQuery.clean(arguments) );
	    			return set;
	    		}
	    	},
	    
	    	// keepData is for internal use only--do not document
	    	remove: function( selector, keepData ) {
	    		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
	    			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
	    				if ( !keepData && elem.nodeType === 1 ) {
	    					jQuery.cleanData( elem.getElementsByTagName("*") );
	    					jQuery.cleanData( [ elem ] );
	    				}
	    
	    				if ( elem.parentNode ) {
	    					elem.parentNode.removeChild( elem );
	    				}
	    			}
	    		}
	    
	    		return this;
	    	},
	    
	    	empty: function() {
	    		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
	    			// Remove element nodes and prevent memory leaks
	    			if ( elem.nodeType === 1 ) {
	    				jQuery.cleanData( elem.getElementsByTagName("*") );
	    			}
	    
	    			// Remove any remaining nodes
	    			while ( elem.firstChild ) {
	    				elem.removeChild( elem.firstChild );
	    			}
	    		}
	    
	    		return this;
	    	},
	    
	    	clone: function( dataAndEvents, deepDataAndEvents ) {
	    		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
	    		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	    
	    		return this.map( function () {
	    			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
	    		});
	    	},
	    
	    	html: function( value ) {
	    		if ( value === undefined ) {
	    			return this[0] && this[0].nodeType === 1 ?
	    				this[0].innerHTML.replace(rinlinejQuery, "") :
	    				null;
	    
	    		// See if we can take a shortcut and just use innerHTML
	    		} else if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
	    			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
	    			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {
	    
	    			value = value.replace(rxhtmlTag, "<$1></$2>");
	    
	    			try {
	    				for ( var i = 0, l = this.length; i < l; i++ ) {
	    					// Remove element nodes and prevent memory leaks
	    					if ( this[i].nodeType === 1 ) {
	    						jQuery.cleanData( this[i].getElementsByTagName("*") );
	    						this[i].innerHTML = value;
	    					}
	    				}
	    
	    			// If using innerHTML throws an exception, use the fallback method
	    			} catch(e) {
	    				this.empty().append( value );
	    			}
	    
	    		} else if ( jQuery.isFunction( value ) ) {
	    			this.each(function(i){
	    				var self = jQuery( this );
	    
	    				self.html( value.call(this, i, self.html()) );
	    			});
	    
	    		} else {
	    			this.empty().append( value );
	    		}
	    
	    		return this;
	    	},
	    
	    	replaceWith: function( value ) {
	    		if ( this[0] && this[0].parentNode ) {
	    			// Make sure that the elements are removed from the DOM before they are inserted
	    			// this can help fix replacing a parent with child elements
	    			if ( jQuery.isFunction( value ) ) {
	    				return this.each(function(i) {
	    					var self = jQuery(this), old = self.html();
	    					self.replaceWith( value.call( this, i, old ) );
	    				});
	    			}
	    
	    			if ( typeof value !== "string" ) {
	    				value = jQuery( value ).detach();
	    			}
	    
	    			return this.each(function() {
	    				var next = this.nextSibling,
	    					parent = this.parentNode;
	    
	    				jQuery( this ).remove();
	    
	    				if ( next ) {
	    					jQuery(next).before( value );
	    				} else {
	    					jQuery(parent).append( value );
	    				}
	    			});
	    		} else {
	    			return this.length ?
	    				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
	    				this;
	    		}
	    	},
	    
	    	detach: function( selector ) {
	    		return this.remove( selector, true );
	    	},
	    
	    	domManip: function( args, table, callback ) {
	    		var results, first, fragment, parent,
	    			value = args[0],
	    			scripts = [];
	    
	    		// We can't cloneNode fragments that contain checked, in WebKit
	    		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
	    			return this.each(function() {
	    				jQuery(this).domManip( args, table, callback, true );
	    			});
	    		}
	    
	    		if ( jQuery.isFunction(value) ) {
	    			return this.each(function(i) {
	    				var self = jQuery(this);
	    				args[0] = value.call(this, i, table ? self.html() : undefined);
	    				self.domManip( args, table, callback );
	    			});
	    		}
	    
	    		if ( this[0] ) {
	    			parent = value && value.parentNode;
	    
	    			// If we're in a fragment, just use that instead of building a new one
	    			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
	    				results = { fragment: parent };
	    
	    			} else {
	    				results = jQuery.buildFragment( args, this, scripts );
	    			}
	    
	    			fragment = results.fragment;
	    
	    			if ( fragment.childNodes.length === 1 ) {
	    				first = fragment = fragment.firstChild;
	    			} else {
	    				first = fragment.firstChild;
	    			}
	    
	    			if ( first ) {
	    				table = table && jQuery.nodeName( first, "tr" );
	    
	    				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
	    					callback.call(
	    						table ?
	    							root(this[i], first) :
	    							this[i],
	    						// Make sure that we do not leak memory by inadvertently discarding
	    						// the original fragment (which might have attached data) instead of
	    						// using it; in addition, use the original fragment object for the last
	    						// item instead of first because it can end up being emptied incorrectly
	    						// in certain situations (Bug #8070).
	    						// Fragments from the fragment cache must always be cloned and never used
	    						// in place.
	    						results.cacheable || ( l > 1 && i < lastIndex ) ?
	    							jQuery.clone( fragment, true, true ) :
	    							fragment
	    					);
	    				}
	    			}
	    
	    			if ( scripts.length ) {
	    				jQuery.each( scripts, evalScript );
	    			}
	    		}
	    
	    		return this;
	    	}
	    });
	    
	    function root( elem, cur ) {
	    	return jQuery.nodeName(elem, "table") ?
	    		(elem.getElementsByTagName("tbody")[0] ||
	    		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
	    		elem;
	    }
	    
	    function cloneCopyEvent( src, dest ) {
	    
	    	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
	    		return;
	    	}
	    
	    	var type, i, l,
	    		oldData = jQuery._data( src ),
	    		curData = jQuery._data( dest, oldData ),
	    		events = oldData.events;
	    
	    	if ( events ) {
	    		delete curData.handle;
	    		curData.events = {};
	    
	    		for ( type in events ) {
	    			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
	    				jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? "." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ type ][ i ].data );
	    			}
	    		}
	    	}
	    
	    	// make the cloned public data object a copy from the original
	    	if ( curData.data ) {
	    		curData.data = jQuery.extend( {}, curData.data );
	    	}
	    }
	    
	    function cloneFixAttributes( src, dest ) {
	    	var nodeName;
	    
	    	// We do not need to do anything for non-Elements
	    	if ( dest.nodeType !== 1 ) {
	    		return;
	    	}
	    
	    	// clearAttributes removes the attributes, which we don't want,
	    	// but also removes the attachEvent events, which we *do* want
	    	if ( dest.clearAttributes ) {
	    		dest.clearAttributes();
	    	}
	    
	    	// mergeAttributes, in contrast, only merges back on the
	    	// original attributes, not the events
	    	if ( dest.mergeAttributes ) {
	    		dest.mergeAttributes( src );
	    	}
	    
	    	nodeName = dest.nodeName.toLowerCase();
	    
	    	// IE6-8 fail to clone children inside object elements that use
	    	// the proprietary classid attribute value (rather than the type
	    	// attribute) to identify the type of content to display
	    	if ( nodeName === "object" ) {
	    		dest.outerHTML = src.outerHTML;
	    
	    	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
	    		// IE6-8 fails to persist the checked state of a cloned checkbox
	    		// or radio button. Worse, IE6-7 fail to give the cloned element
	    		// a checked appearance if the defaultChecked value isn't also set
	    		if ( src.checked ) {
	    			dest.defaultChecked = dest.checked = src.checked;
	    		}
	    
	    		// IE6-7 get confused and end up setting the value of a cloned
	    		// checkbox/radio button to an empty string instead of "on"
	    		if ( dest.value !== src.value ) {
	    			dest.value = src.value;
	    		}
	    
	    	// IE6-8 fails to return the selected option to the default selected
	    	// state when cloning options
	    	} else if ( nodeName === "option" ) {
	    		dest.selected = src.defaultSelected;
	    
	    	// IE6-8 fails to set the defaultValue to the correct value when
	    	// cloning other types of input fields
	    	} else if ( nodeName === "input" || nodeName === "textarea" ) {
	    		dest.defaultValue = src.defaultValue;
	    	}
	    
	    	// Event data gets referenced instead of copied if the expando
	    	// gets copied too
	    	dest.removeAttribute( jQuery.expando );
	    }
	    
	    jQuery.buildFragment = function( args, nodes, scripts ) {
	    	var fragment, cacheable, cacheresults, doc,
	    	first = args[ 0 ];
	    
	    	// nodes may contain either an explicit document object,
	    	// a jQuery collection or context object.
	    	// If nodes[0] contains a valid object to assign to doc
	    	if ( nodes && nodes[0] ) {
	    		doc = nodes[0].ownerDocument || nodes[0];
	    	}
	    
	    	// Ensure that an attr object doesn't incorrectly stand in as a document object
	    	// Chrome and Firefox seem to allow this to occur and will throw exception
	    	// Fixes #8950
	    	if ( !doc.createDocumentFragment ) {
	    		doc = document;
	    	}
	    
	    	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	    	// Cloning options loses the selected state, so don't cache them
	    	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	    	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	    	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	    	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
	    		first.charAt(0) === "<" && !rnocache.test( first ) &&
	    		(jQuery.support.checkClone || !rchecked.test( first )) &&
	    		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {
	    
	    		cacheable = true;
	    
	    		cacheresults = jQuery.fragments[ first ];
	    		if ( cacheresults && cacheresults !== 1 ) {
	    			fragment = cacheresults;
	    		}
	    	}
	    
	    	if ( !fragment ) {
	    		fragment = doc.createDocumentFragment();
	    		jQuery.clean( args, doc, fragment, scripts );
	    	}
	    
	    	if ( cacheable ) {
	    		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	    	}
	    
	    	return { fragment: fragment, cacheable: cacheable };
	    };
	    
	    jQuery.fragments = {};
	    
	    jQuery.each({
	    	appendTo: "append",
	    	prependTo: "prepend",
	    	insertBefore: "before",
	    	insertAfter: "after",
	    	replaceAll: "replaceWith"
	    }, function( name, original ) {
	    	jQuery.fn[ name ] = function( selector ) {
	    		var ret = [],
	    			insert = jQuery( selector ),
	    			parent = this.length === 1 && this[0].parentNode;
	    
	    		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
	    			insert[ original ]( this[0] );
	    			return this;
	    
	    		} else {
	    			for ( var i = 0, l = insert.length; i < l; i++ ) {
	    				var elems = ( i > 0 ? this.clone(true) : this ).get();
	    				jQuery( insert[i] )[ original ]( elems );
	    				ret = ret.concat( elems );
	    			}
	    
	    			return this.pushStack( ret, name, insert.selector );
	    		}
	    	};
	    });
	    
	    function getAll( elem ) {
	    	if ( typeof elem.getElementsByTagName !== "undefined" ) {
	    		return elem.getElementsByTagName( "*" );
	    
	    	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
	    		return elem.querySelectorAll( "*" );
	    
	    	} else {
	    		return [];
	    	}
	    }
	    
	    // Used in clean, fixes the defaultChecked property
	    function fixDefaultChecked( elem ) {
	    	if ( elem.type === "checkbox" || elem.type === "radio" ) {
	    		elem.defaultChecked = elem.checked;
	    	}
	    }
	    // Finds all inputs and passes them to fixDefaultChecked
	    function findInputs( elem ) {
	    	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	    	if ( nodeName === "input" ) {
	    		fixDefaultChecked( elem );
	    	// Skip scripts, get other children
	    	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
	    		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	    	}
	    }
	    
	    // Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
	    function shimCloneNode( elem ) {
	    	var div = document.createElement( "div" );
	    	safeFragment.appendChild( div );
	    
	    	div.innerHTML = elem.outerHTML;
	    	return div.firstChild;
	    }
	    
	    jQuery.extend({
	    	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
	    		var srcElements,
	    			destElements,
	    			i,
	    			// IE<=8 does not properly clone detached, unknown element nodes
	    			clone = jQuery.support.html5Clone || !rnoshimcache.test( "<" + elem.nodeName ) ?
	    				elem.cloneNode( true ) :
	    				shimCloneNode( elem );
	    
	    		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
	    				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
	    			// IE copies events bound via attachEvent when using cloneNode.
	    			// Calling detachEvent on the clone will also remove the events
	    			// from the original. In order to get around this, we use some
	    			// proprietary methods to clear the events. Thanks to MooTools
	    			// guys for this hotness.
	    
	    			cloneFixAttributes( elem, clone );
	    
	    			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
	    			srcElements = getAll( elem );
	    			destElements = getAll( clone );
	    
	    			// Weird iteration because IE will replace the length property
	    			// with an element if you are cloning the body and one of the
	    			// elements on the page has a name or id of "length"
	    			for ( i = 0; srcElements[i]; ++i ) {
	    				// Ensure that the destination node is not null; Fixes #9587
	    				if ( destElements[i] ) {
	    					cloneFixAttributes( srcElements[i], destElements[i] );
	    				}
	    			}
	    		}
	    
	    		// Copy the events from the original to the clone
	    		if ( dataAndEvents ) {
	    			cloneCopyEvent( elem, clone );
	    
	    			if ( deepDataAndEvents ) {
	    				srcElements = getAll( elem );
	    				destElements = getAll( clone );
	    
	    				for ( i = 0; srcElements[i]; ++i ) {
	    					cloneCopyEvent( srcElements[i], destElements[i] );
	    				}
	    			}
	    		}
	    
	    		srcElements = destElements = null;
	    
	    		// Return the cloned set
	    		return clone;
	    	},
	    
	    	clean: function( elems, context, fragment, scripts ) {
	    		var checkScriptType;
	    
	    		context = context || document;
	    
	    		// !context.createElement fails in IE with an error but returns typeof 'object'
	    		if ( typeof context.createElement === "undefined" ) {
	    			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
	    		}
	    
	    		var ret = [], j;
	    
	    		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
	    			if ( typeof elem === "number" ) {
	    				elem += "";
	    			}
	    
	    			if ( !elem ) {
	    				continue;
	    			}
	    
	    			// Convert html string into DOM nodes
	    			if ( typeof elem === "string" ) {
	    				if ( !rhtml.test( elem ) ) {
	    					elem = context.createTextNode( elem );
	    				} else {
	    					// Fix "XHTML"-style tags in all browsers
	    					elem = elem.replace(rxhtmlTag, "<$1></$2>");
	    
	    					// Trim whitespace, otherwise indexOf won't work as expected
	    					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
	    						wrap = wrapMap[ tag ] || wrapMap._default,
	    						depth = wrap[0],
	    						div = context.createElement("div");
	    
	    					// Append wrapper element to unknown element safe doc fragment
	    					if ( context === document ) {
	    						// Use the fragment we've already created for this document
	    						safeFragment.appendChild( div );
	    					} else {
	    						// Use a fragment created with the owner document
	    						createSafeFragment( context ).appendChild( div );
	    					}
	    
	    					// Go to html and back, then peel off extra wrappers
	    					div.innerHTML = wrap[1] + elem + wrap[2];
	    
	    					// Move to the right depth
	    					while ( depth-- ) {
	    						div = div.lastChild;
	    					}
	    
	    					// Remove IE's autoinserted <tbody> from table fragments
	    					if ( !jQuery.support.tbody ) {
	    
	    						// String was a <table>, *may* have spurious <tbody>
	    						var hasBody = rtbody.test(elem),
	    							tbody = tag === "table" && !hasBody ?
	    								div.firstChild && div.firstChild.childNodes :
	    
	    								// String was a bare <thead> or <tfoot>
	    								wrap[1] === "<table>" && !hasBody ?
	    									div.childNodes :
	    									[];
	    
	    						for ( j = tbody.length - 1; j >= 0 ; --j ) {
	    							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
	    								tbody[ j ].parentNode.removeChild( tbody[ j ] );
	    							}
	    						}
	    					}
	    
	    					// IE completely kills leading whitespace when innerHTML is used
	    					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
	    						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
	    					}
	    
	    					elem = div.childNodes;
	    				}
	    			}
	    
	    			// Resets defaultChecked for any radios and checkboxes
	    			// about to be appended to the DOM in IE 6/7 (#8060)
	    			var len;
	    			if ( !jQuery.support.appendChecked ) {
	    				if ( elem[0] && typeof (len = elem.length) === "number" ) {
	    					for ( j = 0; j < len; j++ ) {
	    						findInputs( elem[j] );
	    					}
	    				} else {
	    					findInputs( elem );
	    				}
	    			}
	    
	    			if ( elem.nodeType ) {
	    				ret.push( elem );
	    			} else {
	    				ret = jQuery.merge( ret, elem );
	    			}
	    		}
	    
	    		if ( fragment ) {
	    			checkScriptType = function( elem ) {
	    				return !elem.type || rscriptType.test( elem.type );
	    			};
	    			for ( i = 0; ret[i]; i++ ) {
	    				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
	    					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );
	    
	    				} else {
	    					if ( ret[i].nodeType === 1 ) {
	    						var jsTags = jQuery.grep( ret[i].getElementsByTagName( "script" ), checkScriptType );
	    
	    						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
	    					}
	    					fragment.appendChild( ret[i] );
	    				}
	    			}
	    		}
	    
	    		return ret;
	    	},
	    
	    	cleanData: function( elems ) {
	    		var data, id,
	    			cache = jQuery.cache,
	    			special = jQuery.event.special,
	    			deleteExpando = jQuery.support.deleteExpando;
	    
	    		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
	    			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
	    				continue;
	    			}
	    
	    			id = elem[ jQuery.expando ];
	    
	    			if ( id ) {
	    				data = cache[ id ];
	    
	    				if ( data && data.events ) {
	    					for ( var type in data.events ) {
	    						if ( special[ type ] ) {
	    							jQuery.event.remove( elem, type );
	    
	    						// This is a shortcut to avoid jQuery.event.remove's overhead
	    						} else {
	    							jQuery.removeEvent( elem, type, data.handle );
	    						}
	    					}
	    
	    					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
	    					if ( data.handle ) {
	    						data.handle.elem = null;
	    					}
	    				}
	    
	    				if ( deleteExpando ) {
	    					delete elem[ jQuery.expando ];
	    
	    				} else if ( elem.removeAttribute ) {
	    					elem.removeAttribute( jQuery.expando );
	    				}
	    
	    				delete cache[ id ];
	    			}
	    		}
	    	}
	    });
	    
	    function evalScript( i, elem ) {
	    	if ( elem.src ) {
	    		jQuery.ajax({
	    			url: elem.src,
	    			async: false,
	    			dataType: "script"
	    		});
	    	} else {
	    		jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
	    	}
	    
	    	if ( elem.parentNode ) {
	    		elem.parentNode.removeChild( elem );
	    	}
	    }
	    
	    
	    
	    
	    var ralpha = /alpha\([^)]*\)/i,
	    	ropacity = /opacity=([^)]*)/,
	    	// fixed for IE9, see #8346
	    	rupper = /([A-Z]|^ms)/g,
	    	rnumpx = /^-?\d+(?:px)?$/i,
	    	rnum = /^-?\d/,
	    	rrelNum = /^([\-+])=([\-+.\de]+)/,
	    
	    	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    	cssWidth = [ "Left", "Right" ],
	    	cssHeight = [ "Top", "Bottom" ],
	    	curCSS,
	    
	    	getComputedStyle,
	    	currentStyle;
	    
	    jQuery.fn.css = function( name, value ) {
	    	// Setting 'undefined' is a no-op
	    	if ( arguments.length === 2 && value === undefined ) {
	    		return this;
	    	}
	    
	    	return jQuery.access( this, name, value, true, function( elem, name, value ) {
	    		return value !== undefined ?
	    			jQuery.style( elem, name, value ) :
	    			jQuery.css( elem, name );
	    	});
	    };
	    
	    jQuery.extend({
	    	// Add in style property hooks for overriding the default
	    	// behavior of getting and setting a style property
	    	cssHooks: {
	    		opacity: {
	    			get: function( elem, computed ) {
	    				if ( computed ) {
	    					// We should always get a number back from opacity
	    					var ret = curCSS( elem, "opacity", "opacity" );
	    					return ret === "" ? "1" : ret;
	    
	    				} else {
	    					return elem.style.opacity;
	    				}
	    			}
	    		}
	    	},
	    
	    	// Exclude the following css properties to add px
	    	cssNumber: {
	    		"fillOpacity": true,
	    		"fontWeight": true,
	    		"lineHeight": true,
	    		"opacity": true,
	    		"orphans": true,
	    		"widows": true,
	    		"zIndex": true,
	    		"zoom": true
	    	},
	    
	    	// Add in properties whose names you wish to fix before
	    	// setting or getting the value
	    	cssProps: {
	    		// normalize float css property
	    		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	    	},
	    
	    	// Get and set the style property on a DOM Node
	    	style: function( elem, name, value, extra ) {
	    		// Don't set styles on text and comment nodes
	    		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
	    			return;
	    		}
	    
	    		// Make sure that we're working with the right name
	    		var ret, type, origName = jQuery.camelCase( name ),
	    			style = elem.style, hooks = jQuery.cssHooks[ origName ];
	    
	    		name = jQuery.cssProps[ origName ] || origName;
	    
	    		// Check if we're setting a value
	    		if ( value !== undefined ) {
	    			type = typeof value;
	    
	    			// convert relative number strings (+= or -=) to relative numbers. #7345
	    			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
	    				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
	    				// Fixes bug #9237
	    				type = "number";
	    			}
	    
	    			// Make sure that NaN and null values aren't set. See: #7116
	    			if ( value == null || type === "number" && isNaN( value ) ) {
	    				return;
	    			}
	    
	    			// If a number was passed in, add 'px' to the (except for certain CSS properties)
	    			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
	    				value += "px";
	    			}
	    
	    			// If a hook was provided, use that value, otherwise just set the specified value
	    			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
	    				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
	    				// Fixes bug #5509
	    				try {
	    					style[ name ] = value;
	    				} catch(e) {}
	    			}
	    
	    		} else {
	    			// If a hook was provided get the non-computed value from there
	    			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
	    				return ret;
	    			}
	    
	    			// Otherwise just get the value from the style object
	    			return style[ name ];
	    		}
	    	},
	    
	    	css: function( elem, name, extra ) {
	    		var ret, hooks;
	    
	    		// Make sure that we're working with the right name
	    		name = jQuery.camelCase( name );
	    		hooks = jQuery.cssHooks[ name ];
	    		name = jQuery.cssProps[ name ] || name;
	    
	    		// cssFloat needs a special treatment
	    		if ( name === "cssFloat" ) {
	    			name = "float";
	    		}
	    
	    		// If a hook was provided get the computed value from there
	    		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
	    			return ret;
	    
	    		// Otherwise, if a way to get the computed value exists, use that
	    		} else if ( curCSS ) {
	    			return curCSS( elem, name );
	    		}
	    	},
	    
	    	// A method for quickly swapping in/out CSS properties to get correct calculations
	    	swap: function( elem, options, callback ) {
	    		var old = {};
	    
	    		// Remember the old values, and insert the new ones
	    		for ( var name in options ) {
	    			old[ name ] = elem.style[ name ];
	    			elem.style[ name ] = options[ name ];
	    		}
	    
	    		callback.call( elem );
	    
	    		// Revert the old values
	    		for ( name in options ) {
	    			elem.style[ name ] = old[ name ];
	    		}
	    	}
	    });
	    
	    // DEPRECATED, Use jQuery.css() instead
	    jQuery.curCSS = jQuery.css;
	    
	    jQuery.each(["height", "width"], function( i, name ) {
	    	jQuery.cssHooks[ name ] = {
	    		get: function( elem, computed, extra ) {
	    			var val;
	    
	    			if ( computed ) {
	    				if ( elem.offsetWidth !== 0 ) {
	    					return getWH( elem, name, extra );
	    				} else {
	    					jQuery.swap( elem, cssShow, function() {
	    						val = getWH( elem, name, extra );
	    					});
	    				}
	    
	    				return val;
	    			}
	    		},
	    
	    		set: function( elem, value ) {
	    			if ( rnumpx.test( value ) ) {
	    				// ignore negative width and height values #1599
	    				value = parseFloat( value );
	    
	    				if ( value >= 0 ) {
	    					return value + "px";
	    				}
	    
	    			} else {
	    				return value;
	    			}
	    		}
	    	};
	    });
	    
	    if ( !jQuery.support.opacity ) {
	    	jQuery.cssHooks.opacity = {
	    		get: function( elem, computed ) {
	    			// IE uses filters for opacity
	    			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
	    				( parseFloat( RegExp.$1 ) / 100 ) + "" :
	    				computed ? "1" : "";
	    		},
	    
	    		set: function( elem, value ) {
	    			var style = elem.style,
	    				currentStyle = elem.currentStyle,
	    				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
	    				filter = currentStyle && currentStyle.filter || style.filter || "";
	    
	    			// IE has trouble with opacity if it does not have layout
	    			// Force it by setting the zoom level
	    			style.zoom = 1;
	    
	    			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
	    			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {
	    
	    				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
	    				// if "filter:" is present at all, clearType is disabled, we want to avoid this
	    				// style.removeAttribute is IE Only, but so apparently is this code path...
	    				style.removeAttribute( "filter" );
	    
	    				// if there there is no filter style applied in a css rule, we are done
	    				if ( currentStyle && !currentStyle.filter ) {
	    					return;
	    				}
	    			}
	    
	    			// otherwise, set new filter values
	    			style.filter = ralpha.test( filter ) ?
	    				filter.replace( ralpha, opacity ) :
	    				filter + " " + opacity;
	    		}
	    	};
	    }
	    
	    jQuery(function() {
	    	// This hook cannot be added until DOM ready because the support test
	    	// for it is not run until after DOM ready
	    	if ( !jQuery.support.reliableMarginRight ) {
	    		jQuery.cssHooks.marginRight = {
	    			get: function( elem, computed ) {
	    				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	    				// Work around by temporarily setting element display to inline-block
	    				var ret;
	    				jQuery.swap( elem, { "display": "inline-block" }, function() {
	    					if ( computed ) {
	    						ret = curCSS( elem, "margin-right", "marginRight" );
	    					} else {
	    						ret = elem.style.marginRight;
	    					}
	    				});
	    				return ret;
	    			}
	    		};
	    	}
	    });
	    
	    if ( document.defaultView && document.defaultView.getComputedStyle ) {
	    	getComputedStyle = function( elem, name ) {
	    		var ret, defaultView, computedStyle;
	    
	    		name = name.replace( rupper, "-$1" ).toLowerCase();
	    
	    		if ( (defaultView = elem.ownerDocument.defaultView) &&
	    				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
	    			ret = computedStyle.getPropertyValue( name );
	    			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
	    				ret = jQuery.style( elem, name );
	    			}
	    		}
	    
	    		return ret;
	    	};
	    }
	    
	    if ( document.documentElement.currentStyle ) {
	    	currentStyle = function( elem, name ) {
	    		var left, rsLeft, uncomputed,
	    			ret = elem.currentStyle && elem.currentStyle[ name ],
	    			style = elem.style;
	    
	    		// Avoid setting ret to empty string here
	    		// so we don't default to auto
	    		if ( ret === null && style && (uncomputed = style[ name ]) ) {
	    			ret = uncomputed;
	    		}
	    
	    		// From the awesome hack by Dean Edwards
	    		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	    
	    		// If we're not dealing with a regular pixel number
	    		// but a number that has a weird ending, we need to convert it to pixels
	    		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {
	    
	    			// Remember the original values
	    			left = style.left;
	    			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
	    
	    			// Put in the new values to get a computed value out
	    			if ( rsLeft ) {
	    				elem.runtimeStyle.left = elem.currentStyle.left;
	    			}
	    			style.left = name === "fontSize" ? "1em" : ( ret || 0 );
	    			ret = style.pixelLeft + "px";
	    
	    			// Revert the changed values
	    			style.left = left;
	    			if ( rsLeft ) {
	    				elem.runtimeStyle.left = rsLeft;
	    			}
	    		}
	    
	    		return ret === "" ? "auto" : ret;
	    	};
	    }
	    
	    curCSS = getComputedStyle || currentStyle;
	    
	    function getWH( elem, name, extra ) {
	    
	    	// Start with offset property
	    	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
	    		which = name === "width" ? cssWidth : cssHeight,
	    		i = 0,
	    		len = which.length;
	    
	    	if ( val > 0 ) {
	    		if ( extra !== "border" ) {
	    			for ( ; i < len; i++ ) {
	    				if ( !extra ) {
	    					val -= parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
	    				}
	    				if ( extra === "margin" ) {
	    					val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
	    				} else {
	    					val -= parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
	    				}
	    			}
	    		}
	    
	    		return val + "px";
	    	}
	    
	    	// Fall back to computed then uncomputed css if necessary
	    	val = curCSS( elem, name, name );
	    	if ( val < 0 || val == null ) {
	    		val = elem.style[ name ] || 0;
	    	}
	    	// Normalize "", auto, and prepare for extra
	    	val = parseFloat( val ) || 0;
	    
	    	// Add padding, border, margin
	    	if ( extra ) {
	    		for ( ; i < len; i++ ) {
	    			val += parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
	    			if ( extra !== "padding" ) {
	    				val += parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
	    			}
	    			if ( extra === "margin" ) {
	    				val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
	    			}
	    		}
	    	}
	    
	    	return val + "px";
	    }
	    
	    if ( jQuery.expr && jQuery.expr.filters ) {
	    	jQuery.expr.filters.hidden = function( elem ) {
	    		var width = elem.offsetWidth,
	    			height = elem.offsetHeight;
	    
	    		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	    	};
	    
	    	jQuery.expr.filters.visible = function( elem ) {
	    		return !jQuery.expr.filters.hidden( elem );
	    	};
	    }
	    
	    
	    
	    
	    var r20 = /%20/g,
	    	rbracket = /\[\]$/,
	    	rCRLF = /\r?\n/g,
	    	rhash = /#.*$/,
	    	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	    	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	    	// #7653, #8125, #8152: local protocol detection
	    	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	    	rnoContent = /^(?:GET|HEAD)$/,
	    	rprotocol = /^\/\//,
	    	rquery = /\?/,
	    	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	    	rselectTextarea = /^(?:select|textarea)/i,
	    	rspacesAjax = /\s+/,
	    	rts = /([?&])_=[^&]*/,
	    	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,
	    
	    	// Keep a copy of the old load method
	    	_load = jQuery.fn.load,
	    
	    	/* Prefilters
	    	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	    	 * 2) These are called:
	    	 *    - BEFORE asking for a transport
	    	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	    	 * 3) key is the dataType
	    	 * 4) the catchall symbol "*" can be used
	    	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	    	 */
	    	prefilters = {},
	    
	    	/* Transports bindings
	    	 * 1) key is the dataType
	    	 * 2) the catchall symbol "*" can be used
	    	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	    	 */
	    	transports = {},
	    
	    	// Document location
	    	ajaxLocation,
	    
	    	// Document location segments
	    	ajaxLocParts,
	    
	    	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	    	allTypes = ["*/"] + ["*"];
	    
	    // #8138, IE may throw an exception when accessing
	    // a field from window.location if document.domain has been set
	    try {
	    	ajaxLocation = location.href;
	    } catch( e ) {
	    	// Use the href attribute of an A element
	    	// since IE will modify it given document.location
	    	ajaxLocation = document.createElement( "a" );
	    	ajaxLocation.href = "";
	    	ajaxLocation = ajaxLocation.href;
	    }
	    
	    // Segment location into parts
	    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
	    
	    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	    function addToPrefiltersOrTransports( structure ) {
	    
	    	// dataTypeExpression is optional and defaults to "*"
	    	return function( dataTypeExpression, func ) {
	    
	    		if ( typeof dataTypeExpression !== "string" ) {
	    			func = dataTypeExpression;
	    			dataTypeExpression = "*";
	    		}
	    
	    		if ( jQuery.isFunction( func ) ) {
	    			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
	    				i = 0,
	    				length = dataTypes.length,
	    				dataType,
	    				list,
	    				placeBefore;
	    
	    			// For each dataType in the dataTypeExpression
	    			for ( ; i < length; i++ ) {
	    				dataType = dataTypes[ i ];
	    				// We control if we're asked to add before
	    				// any existing element
	    				placeBefore = /^\+/.test( dataType );
	    				if ( placeBefore ) {
	    					dataType = dataType.substr( 1 ) || "*";
	    				}
	    				list = structure[ dataType ] = structure[ dataType ] || [];
	    				// then we add to the structure accordingly
	    				list[ placeBefore ? "unshift" : "push" ]( func );
	    			}
	    		}
	    	};
	    }
	    
	    // Base inspection function for prefilters and transports
	    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
	    		dataType /* internal */, inspected /* internal */ ) {
	    
	    	dataType = dataType || options.dataTypes[ 0 ];
	    	inspected = inspected || {};
	    
	    	inspected[ dataType ] = true;
	    
	    	var list = structure[ dataType ],
	    		i = 0,
	    		length = list ? list.length : 0,
	    		executeOnly = ( structure === prefilters ),
	    		selection;
	    
	    	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
	    		selection = list[ i ]( options, originalOptions, jqXHR );
	    		// If we got redirected to another dataType
	    		// we try there if executing only and not done already
	    		if ( typeof selection === "string" ) {
	    			if ( !executeOnly || inspected[ selection ] ) {
	    				selection = undefined;
	    			} else {
	    				options.dataTypes.unshift( selection );
	    				selection = inspectPrefiltersOrTransports(
	    						structure, options, originalOptions, jqXHR, selection, inspected );
	    			}
	    		}
	    	}
	    	// If we're only executing or nothing was selected
	    	// we try the catchall dataType if not done already
	    	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
	    		selection = inspectPrefiltersOrTransports(
	    				structure, options, originalOptions, jqXHR, "*", inspected );
	    	}
	    	// unnecessary when only executing (prefilters)
	    	// but it'll be ignored by the caller in that case
	    	return selection;
	    }
	    
	    // A special extend for ajax options
	    // that takes "flat" options (not to be deep extended)
	    // Fixes #9887
	    function ajaxExtend( target, src ) {
	    	var key, deep,
	    		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	    	for ( key in src ) {
	    		if ( src[ key ] !== undefined ) {
	    			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
	    		}
	    	}
	    	if ( deep ) {
	    		jQuery.extend( true, target, deep );
	    	}
	    }
	    
	    jQuery.fn.extend({
	    	load: function( url, params, callback ) {
	    		if ( typeof url !== "string" && _load ) {
	    			return _load.apply( this, arguments );
	    
	    		// Don't do a request if no elements are being requested
	    		} else if ( !this.length ) {
	    			return this;
	    		}
	    
	    		var off = url.indexOf( " " );
	    		if ( off >= 0 ) {
	    			var selector = url.slice( off, url.length );
	    			url = url.slice( 0, off );
	    		}
	    
	    		// Default to a GET request
	    		var type = "GET";
	    
	    		// If the second parameter was provided
	    		if ( params ) {
	    			// If it's a function
	    			if ( jQuery.isFunction( params ) ) {
	    				// We assume that it's the callback
	    				callback = params;
	    				params = undefined;
	    
	    			// Otherwise, build a param string
	    			} else if ( typeof params === "object" ) {
	    				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
	    				type = "POST";
	    			}
	    		}
	    
	    		var self = this;
	    
	    		// Request the remote document
	    		jQuery.ajax({
	    			url: url,
	    			type: type,
	    			dataType: "html",
	    			data: params,
	    			// Complete callback (responseText is used internally)
	    			complete: function( jqXHR, status, responseText ) {
	    				// Store the response as specified by the jqXHR object
	    				responseText = jqXHR.responseText;
	    				// If successful, inject the HTML into all the matched elements
	    				if ( jqXHR.isResolved() ) {
	    					// #4825: Get the actual response in case
	    					// a dataFilter is present in ajaxSettings
	    					jqXHR.done(function( r ) {
	    						responseText = r;
	    					});
	    					// See if a selector was specified
	    					self.html( selector ?
	    						// Create a dummy div to hold the results
	    						jQuery("<div>")
	    							// inject the contents of the document in, removing the scripts
	    							// to avoid any 'Permission Denied' errors in IE
	    							.append(responseText.replace(rscript, ""))
	    
	    							// Locate the specified elements
	    							.find(selector) :
	    
	    						// If not, just inject the full result
	    						responseText );
	    				}
	    
	    				if ( callback ) {
	    					self.each( callback, [ responseText, status, jqXHR ] );
	    				}
	    			}
	    		});
	    
	    		return this;
	    	},
	    
	    	serialize: function() {
	    		return jQuery.param( this.serializeArray() );
	    	},
	    
	    	serializeArray: function() {
	    		return this.map(function(){
	    			return this.elements ? jQuery.makeArray( this.elements ) : this;
	    		})
	    		.filter(function(){
	    			return this.name && !this.disabled &&
	    				( this.checked || rselectTextarea.test( this.nodeName ) ||
	    					rinput.test( this.type ) );
	    		})
	    		.map(function( i, elem ){
	    			var val = jQuery( this ).val();
	    
	    			return val == null ?
	    				null :
	    				jQuery.isArray( val ) ?
	    					jQuery.map( val, function( val, i ){
	    						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
	    					}) :
	    					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
	    		}).get();
	    	}
	    });
	    
	    // Attach a bunch of functions for handling common AJAX events
	    jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	    	jQuery.fn[ o ] = function( f ){
	    		return this.on( o, f );
	    	};
	    });
	    
	    jQuery.each( [ "get", "post" ], function( i, method ) {
	    	jQuery[ method ] = function( url, data, callback, type ) {
	    		// shift arguments if data argument was omitted
	    		if ( jQuery.isFunction( data ) ) {
	    			type = type || callback;
	    			callback = data;
	    			data = undefined;
	    		}
	    
	    		return jQuery.ajax({
	    			type: method,
	    			url: url,
	    			data: data,
	    			success: callback,
	    			dataType: type
	    		});
	    	};
	    });
	    
	    jQuery.extend({
	    
	    	getScript: function( url, callback ) {
	    		return jQuery.get( url, undefined, callback, "script" );
	    	},
	    
	    	getJSON: function( url, data, callback ) {
	    		return jQuery.get( url, data, callback, "json" );
	    	},
	    
	    	// Creates a full fledged settings object into target
	    	// with both ajaxSettings and settings fields.
	    	// If target is omitted, writes into ajaxSettings.
	    	ajaxSetup: function( target, settings ) {
	    		if ( settings ) {
	    			// Building a settings object
	    			ajaxExtend( target, jQuery.ajaxSettings );
	    		} else {
	    			// Extending ajaxSettings
	    			settings = target;
	    			target = jQuery.ajaxSettings;
	    		}
	    		ajaxExtend( target, settings );
	    		return target;
	    	},
	    
	    	ajaxSettings: {
	    		url: ajaxLocation,
	    		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
	    		global: true,
	    		type: "GET",
	    		contentType: "application/x-www-form-urlencoded",
	    		processData: true,
	    		async: true,
	    		/*
	    		timeout: 0,
	    		data: null,
	    		dataType: null,
	    		username: null,
	    		password: null,
	    		cache: null,
	    		traditional: false,
	    		headers: {},
	    		*/
	    
	    		accepts: {
	    			xml: "application/xml, text/xml",
	    			html: "text/html",
	    			text: "text/plain",
	    			json: "application/json, text/javascript",
	    			"*": allTypes
	    		},
	    
	    		contents: {
	    			xml: /xml/,
	    			html: /html/,
	    			json: /json/
	    		},
	    
	    		responseFields: {
	    			xml: "responseXML",
	    			text: "responseText"
	    		},
	    
	    		// List of data converters
	    		// 1) key format is "source_type destination_type" (a single space in-between)
	    		// 2) the catchall symbol "*" can be used for source_type
	    		converters: {
	    
	    			// Convert anything to text
	    			"* text": window.String,
	    
	    			// Text to html (true = no transformation)
	    			"text html": true,
	    
	    			// Evaluate text as a json expression
	    			"text json": jQuery.parseJSON,
	    
	    			// Parse text as xml
	    			"text xml": jQuery.parseXML
	    		},
	    
	    		// For options that shouldn't be deep extended:
	    		// you can add your own custom options here if
	    		// and when you create one that shouldn't be
	    		// deep extended (see ajaxExtend)
	    		flatOptions: {
	    			context: true,
	    			url: true
	    		}
	    	},
	    
	    	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	    	ajaxTransport: addToPrefiltersOrTransports( transports ),
	    
	    	// Main method
	    	ajax: function( url, options ) {
	    
	    		// If url is an object, simulate pre-1.5 signature
	    		if ( typeof url === "object" ) {
	    			options = url;
	    			url = undefined;
	    		}
	    
	    		// Force options to be an object
	    		options = options || {};
	    
	    		var // Create the final options object
	    			s = jQuery.ajaxSetup( {}, options ),
	    			// Callbacks context
	    			callbackContext = s.context || s,
	    			// Context for global events
	    			// It's the callbackContext if one was provided in the options
	    			// and if it's a DOM node or a jQuery collection
	    			globalEventContext = callbackContext !== s &&
	    				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
	    						jQuery( callbackContext ) : jQuery.event,
	    			// Deferreds
	    			deferred = jQuery.Deferred(),
	    			completeDeferred = jQuery.Callbacks( "once memory" ),
	    			// Status-dependent callbacks
	    			statusCode = s.statusCode || {},
	    			// ifModified key
	    			ifModifiedKey,
	    			// Headers (they are sent all at once)
	    			requestHeaders = {},
	    			requestHeadersNames = {},
	    			// Response headers
	    			responseHeadersString,
	    			responseHeaders,
	    			// transport
	    			transport,
	    			// timeout handle
	    			timeoutTimer,
	    			// Cross-domain detection vars
	    			parts,
	    			// The jqXHR state
	    			state = 0,
	    			// To know if global events are to be dispatched
	    			fireGlobals,
	    			// Loop variable
	    			i,
	    			// Fake xhr
	    			jqXHR = {
	    
	    				readyState: 0,
	    
	    				// Caches the header
	    				setRequestHeader: function( name, value ) {
	    					if ( !state ) {
	    						var lname = name.toLowerCase();
	    						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
	    						requestHeaders[ name ] = value;
	    					}
	    					return this;
	    				},
	    
	    				// Raw string
	    				getAllResponseHeaders: function() {
	    					return state === 2 ? responseHeadersString : null;
	    				},
	    
	    				// Builds headers hashtable if needed
	    				getResponseHeader: function( key ) {
	    					var match;
	    					if ( state === 2 ) {
	    						if ( !responseHeaders ) {
	    							responseHeaders = {};
	    							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
	    								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
	    							}
	    						}
	    						match = responseHeaders[ key.toLowerCase() ];
	    					}
	    					return match === undefined ? null : match;
	    				},
	    
	    				// Overrides response content-type header
	    				overrideMimeType: function( type ) {
	    					if ( !state ) {
	    						s.mimeType = type;
	    					}
	    					return this;
	    				},
	    
	    				// Cancel the request
	    				abort: function( statusText ) {
	    					statusText = statusText || "abort";
	    					if ( transport ) {
	    						transport.abort( statusText );
	    					}
	    					done( 0, statusText );
	    					return this;
	    				}
	    			};
	    
	    		// Callback for when everything is done
	    		// It is defined here because jslint complains if it is declared
	    		// at the end of the function (which would be more logical and readable)
	    		function done( status, nativeStatusText, responses, headers ) {
	    
	    			// Called once
	    			if ( state === 2 ) {
	    				return;
	    			}
	    
	    			// State is "done" now
	    			state = 2;
	    
	    			// Clear timeout if it exists
	    			if ( timeoutTimer ) {
	    				clearTimeout( timeoutTimer );
	    			}
	    
	    			// Dereference transport for early garbage collection
	    			// (no matter how long the jqXHR object will be used)
	    			transport = undefined;
	    
	    			// Cache response headers
	    			responseHeadersString = headers || "";
	    
	    			// Set readyState
	    			jqXHR.readyState = status > 0 ? 4 : 0;
	    
	    			var isSuccess,
	    				success,
	    				error,
	    				statusText = nativeStatusText,
	    				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
	    				lastModified,
	    				etag;
	    
	    			// If successful, handle type chaining
	    			if ( status >= 200 && status < 300 || status === 304 ) {
	    
	    				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
	    				if ( s.ifModified ) {
	    
	    					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
	    						jQuery.lastModified[ ifModifiedKey ] = lastModified;
	    					}
	    					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
	    						jQuery.etag[ ifModifiedKey ] = etag;
	    					}
	    				}
	    
	    				// If not modified
	    				if ( status === 304 ) {
	    
	    					statusText = "notmodified";
	    					isSuccess = true;
	    
	    				// If we have data
	    				} else {
	    
	    					try {
	    						success = ajaxConvert( s, response );
	    						statusText = "success";
	    						isSuccess = true;
	    					} catch(e) {
	    						// We have a parsererror
	    						statusText = "parsererror";
	    						error = e;
	    					}
	    				}
	    			} else {
	    				// We extract error from statusText
	    				// then normalize statusText and status for non-aborts
	    				error = statusText;
	    				if ( !statusText || status ) {
	    					statusText = "error";
	    					if ( status < 0 ) {
	    						status = 0;
	    					}
	    				}
	    			}
	    
	    			// Set data for the fake xhr object
	    			jqXHR.status = status;
	    			jqXHR.statusText = "" + ( nativeStatusText || statusText );
	    
	    			// Success/Error
	    			if ( isSuccess ) {
	    				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
	    			} else {
	    				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
	    			}
	    
	    			// Status-dependent callbacks
	    			jqXHR.statusCode( statusCode );
	    			statusCode = undefined;
	    
	    			if ( fireGlobals ) {
	    				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
	    						[ jqXHR, s, isSuccess ? success : error ] );
	    			}
	    
	    			// Complete
	    			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	    
	    			if ( fireGlobals ) {
	    				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	    				// Handle the global AJAX counter
	    				if ( !( --jQuery.active ) ) {
	    					jQuery.event.trigger( "ajaxStop" );
	    				}
	    			}
	    		}
	    
	    		// Attach deferreds
	    		deferred.promise( jqXHR );
	    		jqXHR.success = jqXHR.done;
	    		jqXHR.error = jqXHR.fail;
	    		jqXHR.complete = completeDeferred.add;
	    
	    		// Status-dependent callbacks
	    		jqXHR.statusCode = function( map ) {
	    			if ( map ) {
	    				var tmp;
	    				if ( state < 2 ) {
	    					for ( tmp in map ) {
	    						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
	    					}
	    				} else {
	    					tmp = map[ jqXHR.status ];
	    					jqXHR.then( tmp, tmp );
	    				}
	    			}
	    			return this;
	    		};
	    
	    		// Remove hash character (#7531: and string promotion)
	    		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
	    		// We also use the url parameter if available
	    		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
	    
	    		// Extract dataTypes list
	    		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );
	    
	    		// Determine if a cross-domain request is in order
	    		if ( s.crossDomain == null ) {
	    			parts = rurl.exec( s.url.toLowerCase() );
	    			s.crossDomain = !!( parts &&
	    				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
	    					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
	    						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
	    			);
	    		}
	    
	    		// Convert data if not already a string
	    		if ( s.data && s.processData && typeof s.data !== "string" ) {
	    			s.data = jQuery.param( s.data, s.traditional );
	    		}
	    
	    		// Apply prefilters
	    		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	    
	    		// If request was aborted inside a prefiler, stop there
	    		if ( state === 2 ) {
	    			return false;
	    		}
	    
	    		// We can fire global events as of now if asked to
	    		fireGlobals = s.global;
	    
	    		// Uppercase the type
	    		s.type = s.type.toUpperCase();
	    
	    		// Determine if request has content
	    		s.hasContent = !rnoContent.test( s.type );
	    
	    		// Watch for a new set of requests
	    		if ( fireGlobals && jQuery.active++ === 0 ) {
	    			jQuery.event.trigger( "ajaxStart" );
	    		}
	    
	    		// More options handling for requests with no content
	    		if ( !s.hasContent ) {
	    
	    			// If data is available, append data to url
	    			if ( s.data ) {
	    				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
	    				// #9682: remove data so that it's not used in an eventual retry
	    				delete s.data;
	    			}
	    
	    			// Get ifModifiedKey before adding the anti-cache parameter
	    			ifModifiedKey = s.url;
	    
	    			// Add anti-cache in url if needed
	    			if ( s.cache === false ) {
	    
	    				var ts = jQuery.now(),
	    					// try replacing _= if it is there
	    					ret = s.url.replace( rts, "$1_=" + ts );
	    
	    				// if nothing was replaced, add timestamp to the end
	    				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
	    			}
	    		}
	    
	    		// Set the correct header, if data is being sent
	    		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
	    			jqXHR.setRequestHeader( "Content-Type", s.contentType );
	    		}
	    
	    		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
	    		if ( s.ifModified ) {
	    			ifModifiedKey = ifModifiedKey || s.url;
	    			if ( jQuery.lastModified[ ifModifiedKey ] ) {
	    				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
	    			}
	    			if ( jQuery.etag[ ifModifiedKey ] ) {
	    				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
	    			}
	    		}
	    
	    		// Set the Accepts header for the server, depending on the dataType
	    		jqXHR.setRequestHeader(
	    			"Accept",
	    			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
	    				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
	    				s.accepts[ "*" ]
	    		);
	    
	    		// Check for headers option
	    		for ( i in s.headers ) {
	    			jqXHR.setRequestHeader( i, s.headers[ i ] );
	    		}
	    
	    		// Allow custom headers/mimetypes and early abort
	    		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	    				// Abort if not done already
	    				jqXHR.abort();
	    				return false;
	    
	    		}
	    
	    		// Install callbacks on deferreds
	    		for ( i in { success: 1, error: 1, complete: 1 } ) {
	    			jqXHR[ i ]( s[ i ] );
	    		}
	    
	    		// Get transport
	    		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	    
	    		// If no transport, we auto-abort
	    		if ( !transport ) {
	    			done( -1, "No Transport" );
	    		} else {
	    			jqXHR.readyState = 1;
	    			// Send global event
	    			if ( fireGlobals ) {
	    				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
	    			}
	    			// Timeout
	    			if ( s.async && s.timeout > 0 ) {
	    				timeoutTimer = setTimeout( function(){
	    					jqXHR.abort( "timeout" );
	    				}, s.timeout );
	    			}
	    
	    			try {
	    				state = 1;
	    				transport.send( requestHeaders, done );
	    			} catch (e) {
	    				// Propagate exception as error if not done
	    				if ( state < 2 ) {
	    					done( -1, e );
	    				// Simply rethrow otherwise
	    				} else {
	    					throw e;
	    				}
	    			}
	    		}
	    
	    		return jqXHR;
	    	},
	    
	    	// Serialize an array of form elements or a set of
	    	// key/values into a query string
	    	param: function( a, traditional ) {
	    		var s = [],
	    			add = function( key, value ) {
	    				// If value is a function, invoke it and return its value
	    				value = jQuery.isFunction( value ) ? value() : value;
	    				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
	    			};
	    
	    		// Set traditional to true for jQuery <= 1.3.2 behavior.
	    		if ( traditional === undefined ) {
	    			traditional = jQuery.ajaxSettings.traditional;
	    		}
	    
	    		// If an array was passed in, assume that it is an array of form elements.
	    		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	    			// Serialize the form elements
	    			jQuery.each( a, function() {
	    				add( this.name, this.value );
	    			});
	    
	    		} else {
	    			// If traditional, encode the "old" way (the way 1.3.2 or older
	    			// did it), otherwise encode params recursively.
	    			for ( var prefix in a ) {
	    				buildParams( prefix, a[ prefix ], traditional, add );
	    			}
	    		}
	    
	    		// Return the resulting serialization
	    		return s.join( "&" ).replace( r20, "+" );
	    	}
	    });
	    
	    function buildParams( prefix, obj, traditional, add ) {
	    	if ( jQuery.isArray( obj ) ) {
	    		// Serialize array item.
	    		jQuery.each( obj, function( i, v ) {
	    			if ( traditional || rbracket.test( prefix ) ) {
	    				// Treat each array item as a scalar.
	    				add( prefix, v );
	    
	    			} else {
	    				// If array item is non-scalar (array or object), encode its
	    				// numeric index to resolve deserialization ambiguity issues.
	    				// Note that rack (as of 1.0.0) can't currently deserialize
	    				// nested arrays properly, and attempting to do so may cause
	    				// a server error. Possible fixes are to modify rack's
	    				// deserialization algorithm or to provide an option or flag
	    				// to force array serialization to be shallow.
	    				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
	    			}
	    		});
	    
	    	} else if ( !traditional && obj != null && typeof obj === "object" ) {
	    		// Serialize object item.
	    		for ( var name in obj ) {
	    			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
	    		}
	    
	    	} else {
	    		// Serialize scalar item.
	    		add( prefix, obj );
	    	}
	    }
	    
	    // This is still on the jQuery object... for now
	    // Want to move this to jQuery.ajax some day
	    jQuery.extend({
	    
	    	// Counter for holding the number of active queries
	    	active: 0,
	    
	    	// Last-Modified header cache for next request
	    	lastModified: {},
	    	etag: {}
	    
	    });
	    
	    /* Handles responses to an ajax request:
	     * - sets all responseXXX fields accordingly
	     * - finds the right dataType (mediates between content-type and expected dataType)
	     * - returns the corresponding response
	     */
	    function ajaxHandleResponses( s, jqXHR, responses ) {
	    
	    	var contents = s.contents,
	    		dataTypes = s.dataTypes,
	    		responseFields = s.responseFields,
	    		ct,
	    		type,
	    		finalDataType,
	    		firstDataType;
	    
	    	// Fill responseXXX fields
	    	for ( type in responseFields ) {
	    		if ( type in responses ) {
	    			jqXHR[ responseFields[type] ] = responses[ type ];
	    		}
	    	}
	    
	    	// Remove auto dataType and get content-type in the process
	    	while( dataTypes[ 0 ] === "*" ) {
	    		dataTypes.shift();
	    		if ( ct === undefined ) {
	    			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
	    		}
	    	}
	    
	    	// Check if we're dealing with a known content-type
	    	if ( ct ) {
	    		for ( type in contents ) {
	    			if ( contents[ type ] && contents[ type ].test( ct ) ) {
	    				dataTypes.unshift( type );
	    				break;
	    			}
	    		}
	    	}
	    
	    	// Check to see if we have a response for the expected dataType
	    	if ( dataTypes[ 0 ] in responses ) {
	    		finalDataType = dataTypes[ 0 ];
	    	} else {
	    		// Try convertible dataTypes
	    		for ( type in responses ) {
	    			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
	    				finalDataType = type;
	    				break;
	    			}
	    			if ( !firstDataType ) {
	    				firstDataType = type;
	    			}
	    		}
	    		// Or just use first one
	    		finalDataType = finalDataType || firstDataType;
	    	}
	    
	    	// If we found a dataType
	    	// We add the dataType to the list if needed
	    	// and return the corresponding response
	    	if ( finalDataType ) {
	    		if ( finalDataType !== dataTypes[ 0 ] ) {
	    			dataTypes.unshift( finalDataType );
	    		}
	    		return responses[ finalDataType ];
	    	}
	    }
	    
	    // Chain conversions given the request and the original response
	    function ajaxConvert( s, response ) {
	    
	    	// Apply the dataFilter if provided
	    	if ( s.dataFilter ) {
	    		response = s.dataFilter( response, s.dataType );
	    	}
	    
	    	var dataTypes = s.dataTypes,
	    		converters = {},
	    		i,
	    		key,
	    		length = dataTypes.length,
	    		tmp,
	    		// Current and previous dataTypes
	    		current = dataTypes[ 0 ],
	    		prev,
	    		// Conversion expression
	    		conversion,
	    		// Conversion function
	    		conv,
	    		// Conversion functions (transitive conversion)
	    		conv1,
	    		conv2;
	    
	    	// For each dataType in the chain
	    	for ( i = 1; i < length; i++ ) {
	    
	    		// Create converters map
	    		// with lowercased keys
	    		if ( i === 1 ) {
	    			for ( key in s.converters ) {
	    				if ( typeof key === "string" ) {
	    					converters[ key.toLowerCase() ] = s.converters[ key ];
	    				}
	    			}
	    		}
	    
	    		// Get the dataTypes
	    		prev = current;
	    		current = dataTypes[ i ];
	    
	    		// If current is auto dataType, update it to prev
	    		if ( current === "*" ) {
	    			current = prev;
	    		// If no auto and dataTypes are actually different
	    		} else if ( prev !== "*" && prev !== current ) {
	    
	    			// Get the converter
	    			conversion = prev + " " + current;
	    			conv = converters[ conversion ] || converters[ "* " + current ];
	    
	    			// If there is no direct converter, search transitively
	    			if ( !conv ) {
	    				conv2 = undefined;
	    				for ( conv1 in converters ) {
	    					tmp = conv1.split( " " );
	    					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
	    						conv2 = converters[ tmp[1] + " " + current ];
	    						if ( conv2 ) {
	    							conv1 = converters[ conv1 ];
	    							if ( conv1 === true ) {
	    								conv = conv2;
	    							} else if ( conv2 === true ) {
	    								conv = conv1;
	    							}
	    							break;
	    						}
	    					}
	    				}
	    			}
	    			// If we found no converter, dispatch an error
	    			if ( !( conv || conv2 ) ) {
	    				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
	    			}
	    			// If found converter is not an equivalence
	    			if ( conv !== true ) {
	    				// Convert with 1 or 2 converters accordingly
	    				response = conv ? conv( response ) : conv2( conv1(response) );
	    			}
	    		}
	    	}
	    	return response;
	    }
	    
	    
	    
	    
	    var jsc = jQuery.now(),
	    	jsre = /(\=)\?(&|$)|\?\?/i;
	    
	    // Default jsonp settings
	    jQuery.ajaxSetup({
	    	jsonp: "callback",
	    	jsonpCallback: function() {
	    		return jQuery.expando + "_" + ( jsc++ );
	    	}
	    });
	    
	    // Detect, normalize options and install callbacks for jsonp requests
	    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	    
	    	var inspectData = s.contentType === "application/x-www-form-urlencoded" &&
	    		( typeof s.data === "string" );
	    
	    	if ( s.dataTypes[ 0 ] === "jsonp" ||
	    		s.jsonp !== false && ( jsre.test( s.url ) ||
	    				inspectData && jsre.test( s.data ) ) ) {
	    
	    		var responseContainer,
	    			jsonpCallback = s.jsonpCallback =
	    				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
	    			previous = window[ jsonpCallback ],
	    			url = s.url,
	    			data = s.data,
	    			replace = "$1" + jsonpCallback + "$2";
	    
	    		if ( s.jsonp !== false ) {
	    			url = url.replace( jsre, replace );
	    			if ( s.url === url ) {
	    				if ( inspectData ) {
	    					data = data.replace( jsre, replace );
	    				}
	    				if ( s.data === data ) {
	    					// Add callback manually
	    					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
	    				}
	    			}
	    		}
	    
	    		s.url = url;
	    		s.data = data;
	    
	    		// Install callback
	    		window[ jsonpCallback ] = function( response ) {
	    			responseContainer = [ response ];
	    		};
	    
	    		// Clean-up function
	    		jqXHR.always(function() {
	    			// Set callback back to previous value
	    			window[ jsonpCallback ] = previous;
	    			// Call if it was a function and we have a response
	    			if ( responseContainer && jQuery.isFunction( previous ) ) {
	    				window[ jsonpCallback ]( responseContainer[ 0 ] );
	    			}
	    		});
	    
	    		// Use data converter to retrieve json after script execution
	    		s.converters["script json"] = function() {
	    			if ( !responseContainer ) {
	    				jQuery.error( jsonpCallback + " was not called" );
	    			}
	    			return responseContainer[ 0 ];
	    		};
	    
	    		// force json dataType
	    		s.dataTypes[ 0 ] = "json";
	    
	    		// Delegate to script
	    		return "script";
	    	}
	    });
	    
	    
	    
	    
	    // Install script dataType
	    jQuery.ajaxSetup({
	    	accepts: {
	    		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	    	},
	    	contents: {
	    		script: /javascript|ecmascript/
	    	},
	    	converters: {
	    		"text script": function( text ) {
	    			jQuery.globalEval( text );
	    			return text;
	    		}
	    	}
	    });
	    
	    // Handle cache's special case and global
	    jQuery.ajaxPrefilter( "script", function( s ) {
	    	if ( s.cache === undefined ) {
	    		s.cache = false;
	    	}
	    	if ( s.crossDomain ) {
	    		s.type = "GET";
	    		s.global = false;
	    	}
	    });
	    
	    // Bind script tag hack transport
	    jQuery.ajaxTransport( "script", function(s) {
	    
	    	// This transport only deals with cross domain requests
	    	if ( s.crossDomain ) {
	    
	    		var script,
	    			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;
	    
	    		return {
	    
	    			send: function( _, callback ) {
	    
	    				script = document.createElement( "script" );
	    
	    				script.async = "async";
	    
	    				if ( s.scriptCharset ) {
	    					script.charset = s.scriptCharset;
	    				}
	    
	    				script.src = s.url;
	    
	    				// Attach handlers for all browsers
	    				script.onload = script.onreadystatechange = function( _, isAbort ) {
	    
	    					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
	    
	    						// Handle memory leak in IE
	    						script.onload = script.onreadystatechange = null;
	    
	    						// Remove the script
	    						if ( head && script.parentNode ) {
	    							head.removeChild( script );
	    						}
	    
	    						// Dereference the script
	    						script = undefined;
	    
	    						// Callback if not abort
	    						if ( !isAbort ) {
	    							callback( 200, "success" );
	    						}
	    					}
	    				};
	    				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
	    				// This arises when a base node is used (#2709 and #4378).
	    				head.insertBefore( script, head.firstChild );
	    			},
	    
	    			abort: function() {
	    				if ( script ) {
	    					script.onload( 0, 1 );
	    				}
	    			}
	    		};
	    	}
	    });
	    
	    
	    
	    
	    var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	    	xhrOnUnloadAbort = window.ActiveXObject ? function() {
	    		// Abort all pending requests
	    		for ( var key in xhrCallbacks ) {
	    			xhrCallbacks[ key ]( 0, 1 );
	    		}
	    	} : false,
	    	xhrId = 0,
	    	xhrCallbacks;
	    
	    // Functions to create xhrs
	    function createStandardXHR() {
	    	try {
	    		return new window.XMLHttpRequest();
	    	} catch( e ) {}
	    }
	    
	    function createActiveXHR() {
	    	try {
	    		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	    	} catch( e ) {}
	    }
	    
	    // Create the request object
	    // (This is still attached to ajaxSettings for backward compatibility)
	    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	    	/* Microsoft failed to properly
	    	 * implement the XMLHttpRequest in IE7 (can't request local files),
	    	 * so we use the ActiveXObject when it is available
	    	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	    	 * we need a fallback.
	    	 */
	    	function() {
	    		return !this.isLocal && createStandardXHR() || createActiveXHR();
	    	} :
	    	// For all other browsers, use the standard XMLHttpRequest object
	    	createStandardXHR;
	    
	    // Determine support properties
	    (function( xhr ) {
	    	jQuery.extend( jQuery.support, {
	    		ajax: !!xhr,
	    		cors: !!xhr && ( "withCredentials" in xhr )
	    	});
	    })( jQuery.ajaxSettings.xhr() );
	    
	    // Create transport if the browser can provide an xhr
	    if ( jQuery.support.ajax ) {
	    
	    	jQuery.ajaxTransport(function( s ) {
	    		// Cross domain only allowed if supported through XMLHttpRequest
	    		if ( !s.crossDomain || jQuery.support.cors ) {
	    
	    			var callback;
	    
	    			return {
	    				send: function( headers, complete ) {
	    
	    					// Get a new xhr
	    					var xhr = s.xhr(),
	    						handle,
	    						i;
	    
	    					// Open the socket
	    					// Passing null username, generates a login popup on Opera (#2865)
	    					if ( s.username ) {
	    						xhr.open( s.type, s.url, s.async, s.username, s.password );
	    					} else {
	    						xhr.open( s.type, s.url, s.async );
	    					}
	    
	    					// Apply custom fields if provided
	    					if ( s.xhrFields ) {
	    						for ( i in s.xhrFields ) {
	    							xhr[ i ] = s.xhrFields[ i ];
	    						}
	    					}
	    
	    					// Override mime type if needed
	    					if ( s.mimeType && xhr.overrideMimeType ) {
	    						xhr.overrideMimeType( s.mimeType );
	    					}
	    
	    					// X-Requested-With header
	    					// For cross-domain requests, seeing as conditions for a preflight are
	    					// akin to a jigsaw puzzle, we simply never set it to be sure.
	    					// (it can always be set on a per-request basis or even using ajaxSetup)
	    					// For same-domain requests, won't change header if already provided.
	    					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
	    						headers[ "X-Requested-With" ] = "XMLHttpRequest";
	    					}
	    
	    					// Need an extra try/catch for cross domain requests in Firefox 3
	    					try {
	    						for ( i in headers ) {
	    							xhr.setRequestHeader( i, headers[ i ] );
	    						}
	    					} catch( _ ) {}
	    
	    					// Do send the request
	    					// This may raise an exception which is actually
	    					// handled in jQuery.ajax (so no try/catch here)
	    					xhr.send( ( s.hasContent && s.data ) || null );
	    
	    					// Listener
	    					callback = function( _, isAbort ) {
	    
	    						var status,
	    							statusText,
	    							responseHeaders,
	    							responses,
	    							xml;
	    
	    						// Firefox throws exceptions when accessing properties
	    						// of an xhr when a network error occured
	    						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
	    						try {
	    
	    							// Was never called and is aborted or complete
	    							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
	    
	    								// Only called once
	    								callback = undefined;
	    
	    								// Do not keep as active anymore
	    								if ( handle ) {
	    									xhr.onreadystatechange = jQuery.noop;
	    									if ( xhrOnUnloadAbort ) {
	    										delete xhrCallbacks[ handle ];
	    									}
	    								}
	    
	    								// If it's an abort
	    								if ( isAbort ) {
	    									// Abort it manually if needed
	    									if ( xhr.readyState !== 4 ) {
	    										xhr.abort();
	    									}
	    								} else {
	    									status = xhr.status;
	    									responseHeaders = xhr.getAllResponseHeaders();
	    									responses = {};
	    									xml = xhr.responseXML;
	    
	    									// Construct response list
	    									if ( xml && xml.documentElement /* #4958 */ ) {
	    										responses.xml = xml;
	    									}
	    									responses.text = xhr.responseText;
	    
	    									// Firefox throws an exception when accessing
	    									// statusText for faulty cross-domain requests
	    									try {
	    										statusText = xhr.statusText;
	    									} catch( e ) {
	    										// We normalize with Webkit giving an empty statusText
	    										statusText = "";
	    									}
	    
	    									// Filter status for non standard behaviors
	    
	    									// If the request is local and we have data: assume a success
	    									// (success with no data won't get notified, that's the best we
	    									// can do given current implementations)
	    									if ( !status && s.isLocal && !s.crossDomain ) {
	    										status = responses.text ? 200 : 404;
	    									// IE - #1450: sometimes returns 1223 when it should be 204
	    									} else if ( status === 1223 ) {
	    										status = 204;
	    									}
	    								}
	    							}
	    						} catch( firefoxAccessException ) {
	    							if ( !isAbort ) {
	    								complete( -1, firefoxAccessException );
	    							}
	    						}
	    
	    						// Call complete if needed
	    						if ( responses ) {
	    							complete( status, statusText, responses, responseHeaders );
	    						}
	    					};
	    
	    					// if we're in sync mode or it's in cache
	    					// and has been retrieved directly (IE6 & IE7)
	    					// we need to manually fire the callback
	    					if ( !s.async || xhr.readyState === 4 ) {
	    						callback();
	    					} else {
	    						handle = ++xhrId;
	    						if ( xhrOnUnloadAbort ) {
	    							// Create the active xhrs callbacks list if needed
	    							// and attach the unload handler
	    							if ( !xhrCallbacks ) {
	    								xhrCallbacks = {};
	    								jQuery( window ).unload( xhrOnUnloadAbort );
	    							}
	    							// Add to list of active xhrs callbacks
	    							xhrCallbacks[ handle ] = callback;
	    						}
	    						xhr.onreadystatechange = callback;
	    					}
	    				},
	    
	    				abort: function() {
	    					if ( callback ) {
	    						callback(0,1);
	    					}
	    				}
	    			};
	    		}
	    	});
	    }
	    
	    
	    
	    
	    var elemdisplay = {},
	    	iframe, iframeDoc,
	    	rfxtypes = /^(?:toggle|show|hide)$/,
	    	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	    	timerId,
	    	fxAttrs = [
	    		// height animations
	    		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
	    		// width animations
	    		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
	    		// opacity animations
	    		[ "opacity" ]
	    	],
	    	fxNow;
	    
	    jQuery.fn.extend({
	    	show: function( speed, easing, callback ) {
	    		var elem, display;
	    
	    		if ( speed || speed === 0 ) {
	    			return this.animate( genFx("show", 3), speed, easing, callback );
	    
	    		} else {
	    			for ( var i = 0, j = this.length; i < j; i++ ) {
	    				elem = this[ i ];
	    
	    				if ( elem.style ) {
	    					display = elem.style.display;
	    
	    					// Reset the inline display of this element to learn if it is
	    					// being hidden by cascaded rules or not
	    					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
	    						display = elem.style.display = "";
	    					}
	    
	    					// Set elements which have been overridden with display: none
	    					// in a stylesheet to whatever the default browser style is
	    					// for such an element
	    					if ( display === "" && jQuery.css(elem, "display") === "none" ) {
	    						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
	    					}
	    				}
	    			}
	    
	    			// Set the display of most of the elements in a second loop
	    			// to avoid the constant reflow
	    			for ( i = 0; i < j; i++ ) {
	    				elem = this[ i ];
	    
	    				if ( elem.style ) {
	    					display = elem.style.display;
	    
	    					if ( display === "" || display === "none" ) {
	    						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
	    					}
	    				}
	    			}
	    
	    			return this;
	    		}
	    	},
	    
	    	hide: function( speed, easing, callback ) {
	    		if ( speed || speed === 0 ) {
	    			return this.animate( genFx("hide", 3), speed, easing, callback);
	    
	    		} else {
	    			var elem, display,
	    				i = 0,
	    				j = this.length;
	    
	    			for ( ; i < j; i++ ) {
	    				elem = this[i];
	    				if ( elem.style ) {
	    					display = jQuery.css( elem, "display" );
	    
	    					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
	    						jQuery._data( elem, "olddisplay", display );
	    					}
	    				}
	    			}
	    
	    			// Set the display of the elements in a second loop
	    			// to avoid the constant reflow
	    			for ( i = 0; i < j; i++ ) {
	    				if ( this[i].style ) {
	    					this[i].style.display = "none";
	    				}
	    			}
	    
	    			return this;
	    		}
	    	},
	    
	    	// Save the old toggle function
	    	_toggle: jQuery.fn.toggle,
	    
	    	toggle: function( fn, fn2, callback ) {
	    		var bool = typeof fn === "boolean";
	    
	    		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
	    			this._toggle.apply( this, arguments );
	    
	    		} else if ( fn == null || bool ) {
	    			this.each(function() {
	    				var state = bool ? fn : jQuery(this).is(":hidden");
	    				jQuery(this)[ state ? "show" : "hide" ]();
	    			});
	    
	    		} else {
	    			this.animate(genFx("toggle", 3), fn, fn2, callback);
	    		}
	    
	    		return this;
	    	},
	    
	    	fadeTo: function( speed, to, easing, callback ) {
	    		return this.filter(":hidden").css("opacity", 0).show().end()
	    					.animate({opacity: to}, speed, easing, callback);
	    	},
	    
	    	animate: function( prop, speed, easing, callback ) {
	    		var optall = jQuery.speed( speed, easing, callback );
	    
	    		if ( jQuery.isEmptyObject( prop ) ) {
	    			return this.each( optall.complete, [ false ] );
	    		}
	    
	    		// Do not change referenced properties as per-property easing will be lost
	    		prop = jQuery.extend( {}, prop );
	    
	    		function doAnimation() {
	    			// XXX 'this' does not always have a nodeName when running the
	    			// test suite
	    
	    			if ( optall.queue === false ) {
	    				jQuery._mark( this );
	    			}
	    
	    			var opt = jQuery.extend( {}, optall ),
	    				isElement = this.nodeType === 1,
	    				hidden = isElement && jQuery(this).is(":hidden"),
	    				name, val, p, e,
	    				parts, start, end, unit,
	    				method;
	    
	    			// will store per property easing and be used to determine when an animation is complete
	    			opt.animatedProperties = {};
	    
	    			for ( p in prop ) {
	    
	    				// property name normalization
	    				name = jQuery.camelCase( p );
	    				if ( p !== name ) {
	    					prop[ name ] = prop[ p ];
	    					delete prop[ p ];
	    				}
	    
	    				val = prop[ name ];
	    
	    				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
	    				if ( jQuery.isArray( val ) ) {
	    					opt.animatedProperties[ name ] = val[ 1 ];
	    					val = prop[ name ] = val[ 0 ];
	    				} else {
	    					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
	    				}
	    
	    				if ( val === "hide" && hidden || val === "show" && !hidden ) {
	    					return opt.complete.call( this );
	    				}
	    
	    				if ( isElement && ( name === "height" || name === "width" ) ) {
	    					// Make sure that nothing sneaks out
	    					// Record all 3 overflow attributes because IE does not
	    					// change the overflow attribute when overflowX and
	    					// overflowY are set to the same value
	    					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];
	    
	    					// Set display property to inline-block for height/width
	    					// animations on inline elements that are having width/height animated
	    					if ( jQuery.css( this, "display" ) === "inline" &&
	    							jQuery.css( this, "float" ) === "none" ) {
	    
	    						// inline-level elements accept inline-block;
	    						// block-level elements need to be inline with layout
	    						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
	    							this.style.display = "inline-block";
	    
	    						} else {
	    							this.style.zoom = 1;
	    						}
	    					}
	    				}
	    			}
	    
	    			if ( opt.overflow != null ) {
	    				this.style.overflow = "hidden";
	    			}
	    
	    			for ( p in prop ) {
	    				e = new jQuery.fx( this, opt, p );
	    				val = prop[ p ];
	    
	    				if ( rfxtypes.test( val ) ) {
	    
	    					// Tracks whether to show or hide based on private
	    					// data attached to the element
	    					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
	    					if ( method ) {
	    						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
	    						e[ method ]();
	    					} else {
	    						e[ val ]();
	    					}
	    
	    				} else {
	    					parts = rfxnum.exec( val );
	    					start = e.cur();
	    
	    					if ( parts ) {
	    						end = parseFloat( parts[2] );
	    						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );
	    
	    						// We need to compute starting value
	    						if ( unit !== "px" ) {
	    							jQuery.style( this, p, (end || 1) + unit);
	    							start = ( (end || 1) / e.cur() ) * start;
	    							jQuery.style( this, p, start + unit);
	    						}
	    
	    						// If a +=/-= token was provided, we're doing a relative animation
	    						if ( parts[1] ) {
	    							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
	    						}
	    
	    						e.custom( start, end, unit );
	    
	    					} else {
	    						e.custom( start, val, "" );
	    					}
	    				}
	    			}
	    
	    			// For JS strict compliance
	    			return true;
	    		}
	    
	    		return optall.queue === false ?
	    			this.each( doAnimation ) :
	    			this.queue( optall.queue, doAnimation );
	    	},
	    
	    	stop: function( type, clearQueue, gotoEnd ) {
	    		if ( typeof type !== "string" ) {
	    			gotoEnd = clearQueue;
	    			clearQueue = type;
	    			type = undefined;
	    		}
	    		if ( clearQueue && type !== false ) {
	    			this.queue( type || "fx", [] );
	    		}
	    
	    		return this.each(function() {
	    			var index,
	    				hadTimers = false,
	    				timers = jQuery.timers,
	    				data = jQuery._data( this );
	    
	    			// clear marker counters if we know they won't be
	    			if ( !gotoEnd ) {
	    				jQuery._unmark( true, this );
	    			}
	    
	    			function stopQueue( elem, data, index ) {
	    				var hooks = data[ index ];
	    				jQuery.removeData( elem, index, true );
	    				hooks.stop( gotoEnd );
	    			}
	    
	    			if ( type == null ) {
	    				for ( index in data ) {
	    					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
	    						stopQueue( this, data, index );
	    					}
	    				}
	    			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
	    				stopQueue( this, data, index );
	    			}
	    
	    			for ( index = timers.length; index--; ) {
	    				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
	    					if ( gotoEnd ) {
	    
	    						// force the next step to be the last
	    						timers[ index ]( true );
	    					} else {
	    						timers[ index ].saveState();
	    					}
	    					hadTimers = true;
	    					timers.splice( index, 1 );
	    				}
	    			}
	    
	    			// start the next in the queue if the last step wasn't forced
	    			// timers currently will call their complete callbacks, which will dequeue
	    			// but only if they were gotoEnd
	    			if ( !( gotoEnd && hadTimers ) ) {
	    				jQuery.dequeue( this, type );
	    			}
	    		});
	    	}
	    
	    });
	    
	    // Animations created synchronously will run synchronously
	    function createFxNow() {
	    	setTimeout( clearFxNow, 0 );
	    	return ( fxNow = jQuery.now() );
	    }
	    
	    function clearFxNow() {
	    	fxNow = undefined;
	    }
	    
	    // Generate parameters to create a standard animation
	    function genFx( type, num ) {
	    	var obj = {};
	    
	    	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
	    		obj[ this ] = type;
	    	});
	    
	    	return obj;
	    }
	    
	    // Generate shortcuts for custom animations
	    jQuery.each({
	    	slideDown: genFx( "show", 1 ),
	    	slideUp: genFx( "hide", 1 ),
	    	slideToggle: genFx( "toggle", 1 ),
	    	fadeIn: { opacity: "show" },
	    	fadeOut: { opacity: "hide" },
	    	fadeToggle: { opacity: "toggle" }
	    }, function( name, props ) {
	    	jQuery.fn[ name ] = function( speed, easing, callback ) {
	    		return this.animate( props, speed, easing, callback );
	    	};
	    });
	    
	    jQuery.extend({
	    	speed: function( speed, easing, fn ) {
	    		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
	    			complete: fn || !fn && easing ||
	    				jQuery.isFunction( speed ) && speed,
	    			duration: speed,
	    			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	    		};
	    
	    		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
	    			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	    
	    		// normalize opt.queue - true/undefined/null -> "fx"
	    		if ( opt.queue == null || opt.queue === true ) {
	    			opt.queue = "fx";
	    		}
	    
	    		// Queueing
	    		opt.old = opt.complete;
	    
	    		opt.complete = function( noUnmark ) {
	    			if ( jQuery.isFunction( opt.old ) ) {
	    				opt.old.call( this );
	    			}
	    
	    			if ( opt.queue ) {
	    				jQuery.dequeue( this, opt.queue );
	    			} else if ( noUnmark !== false ) {
	    				jQuery._unmark( this );
	    			}
	    		};
	    
	    		return opt;
	    	},
	    
	    	easing: {
	    		linear: function( p, n, firstNum, diff ) {
	    			return firstNum + diff * p;
	    		},
	    		swing: function( p, n, firstNum, diff ) {
	    			return ( ( -Math.cos( p*Math.PI ) / 2 ) + 0.5 ) * diff + firstNum;
	    		}
	    	},
	    
	    	timers: [],
	    
	    	fx: function( elem, options, prop ) {
	    		this.options = options;
	    		this.elem = elem;
	    		this.prop = prop;
	    
	    		options.orig = options.orig || {};
	    	}
	    
	    });
	    
	    jQuery.fx.prototype = {
	    	// Simple function for setting a style value
	    	update: function() {
	    		if ( this.options.step ) {
	    			this.options.step.call( this.elem, this.now, this );
	    		}
	    
	    		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	    	},
	    
	    	// Get the current size
	    	cur: function() {
	    		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
	    			return this.elem[ this.prop ];
	    		}
	    
	    		var parsed,
	    			r = jQuery.css( this.elem, this.prop );
	    		// Empty strings, null, undefined and "auto" are converted to 0,
	    		// complex values such as "rotate(1rad)" are returned as is,
	    		// simple values such as "10px" are parsed to Float.
	    		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	    	},
	    
	    	// Start an animation from one number to another
	    	custom: function( from, to, unit ) {
	    		var self = this,
	    			fx = jQuery.fx;
	    
	    		this.startTime = fxNow || createFxNow();
	    		this.end = to;
	    		this.now = this.start = from;
	    		this.pos = this.state = 0;
	    		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );
	    
	    		function t( gotoEnd ) {
	    			return self.step( gotoEnd );
	    		}
	    
	    		t.queue = this.options.queue;
	    		t.elem = this.elem;
	    		t.saveState = function() {
	    			if ( self.options.hide && jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
	    				jQuery._data( self.elem, "fxshow" + self.prop, self.start );
	    			}
	    		};
	    
	    		if ( t() && jQuery.timers.push(t) && !timerId ) {
	    			timerId = setInterval( fx.tick, fx.interval );
	    		}
	    	},
	    
	    	// Simple 'show' function
	    	show: function() {
	    		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );
	    
	    		// Remember where we started, so that we can go back to it later
	    		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
	    		this.options.show = true;
	    
	    		// Begin the animation
	    		// Make sure that we start at a small width/height to avoid any flash of content
	    		if ( dataShow !== undefined ) {
	    			// This show is picking up where a previous hide or show left off
	    			this.custom( this.cur(), dataShow );
	    		} else {
	    			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
	    		}
	    
	    		// Start by showing the element
	    		jQuery( this.elem ).show();
	    	},
	    
	    	// Simple 'hide' function
	    	hide: function() {
	    		// Remember where we started, so that we can go back to it later
	    		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
	    		this.options.hide = true;
	    
	    		// Begin the animation
	    		this.custom( this.cur(), 0 );
	    	},
	    
	    	// Each step of an animation
	    	step: function( gotoEnd ) {
	    		var p, n, complete,
	    			t = fxNow || createFxNow(),
	    			done = true,
	    			elem = this.elem,
	    			options = this.options;
	    
	    		if ( gotoEnd || t >= options.duration + this.startTime ) {
	    			this.now = this.end;
	    			this.pos = this.state = 1;
	    			this.update();
	    
	    			options.animatedProperties[ this.prop ] = true;
	    
	    			for ( p in options.animatedProperties ) {
	    				if ( options.animatedProperties[ p ] !== true ) {
	    					done = false;
	    				}
	    			}
	    
	    			if ( done ) {
	    				// Reset the overflow
	    				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {
	    
	    					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
	    						elem.style[ "overflow" + value ] = options.overflow[ index ];
	    					});
	    				}
	    
	    				// Hide the element if the "hide" operation was done
	    				if ( options.hide ) {
	    					jQuery( elem ).hide();
	    				}
	    
	    				// Reset the properties, if the item has been hidden or shown
	    				if ( options.hide || options.show ) {
	    					for ( p in options.animatedProperties ) {
	    						jQuery.style( elem, p, options.orig[ p ] );
	    						jQuery.removeData( elem, "fxshow" + p, true );
	    						// Toggle data is no longer needed
	    						jQuery.removeData( elem, "toggle" + p, true );
	    					}
	    				}
	    
	    				// Execute the complete function
	    				// in the event that the complete function throws an exception
	    				// we must ensure it won't be called twice. #5684
	    
	    				complete = options.complete;
	    				if ( complete ) {
	    
	    					options.complete = false;
	    					complete.call( elem );
	    				}
	    			}
	    
	    			return false;
	    
	    		} else {
	    			// classical easing cannot be used with an Infinity duration
	    			if ( options.duration == Infinity ) {
	    				this.now = t;
	    			} else {
	    				n = t - this.startTime;
	    				this.state = n / options.duration;
	    
	    				// Perform the easing function, defaults to swing
	    				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
	    				this.now = this.start + ( (this.end - this.start) * this.pos );
	    			}
	    			// Perform the next step of the animation
	    			this.update();
	    		}
	    
	    		return true;
	    	}
	    };
	    
	    jQuery.extend( jQuery.fx, {
	    	tick: function() {
	    		var timer,
	    			timers = jQuery.timers,
	    			i = 0;
	    
	    		for ( ; i < timers.length; i++ ) {
	    			timer = timers[ i ];
	    			// Checks the timer has not already been removed
	    			if ( !timer() && timers[ i ] === timer ) {
	    				timers.splice( i--, 1 );
	    			}
	    		}
	    
	    		if ( !timers.length ) {
	    			jQuery.fx.stop();
	    		}
	    	},
	    
	    	interval: 13,
	    
	    	stop: function() {
	    		clearInterval( timerId );
	    		timerId = null;
	    	},
	    
	    	speeds: {
	    		slow: 600,
	    		fast: 200,
	    		// Default speed
	    		_default: 400
	    	},
	    
	    	step: {
	    		opacity: function( fx ) {
	    			jQuery.style( fx.elem, "opacity", fx.now );
	    		},
	    
	    		_default: function( fx ) {
	    			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
	    				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
	    			} else {
	    				fx.elem[ fx.prop ] = fx.now;
	    			}
	    		}
	    	}
	    });
	    
	    // Adds width/height step functions
	    // Do not set anything below 0
	    jQuery.each([ "width", "height" ], function( i, prop ) {
	    	jQuery.fx.step[ prop ] = function( fx ) {
	    		jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
	    	};
	    });
	    
	    if ( jQuery.expr && jQuery.expr.filters ) {
	    	jQuery.expr.filters.animated = function( elem ) {
	    		return jQuery.grep(jQuery.timers, function( fn ) {
	    			return elem === fn.elem;
	    		}).length;
	    	};
	    }
	    
	    // Try to restore the default display value of an element
	    function defaultDisplay( nodeName ) {
	    
	    	if ( !elemdisplay[ nodeName ] ) {
	    
	    		var body = document.body,
	    			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
	    			display = elem.css( "display" );
	    		elem.remove();
	    
	    		// If the simple way fails,
	    		// get element's real default display by attaching it to a temp iframe
	    		if ( display === "none" || display === "" ) {
	    			// No iframe to use yet, so create it
	    			if ( !iframe ) {
	    				iframe = document.createElement( "iframe" );
	    				iframe.frameBorder = iframe.width = iframe.height = 0;
	    			}
	    
	    			body.appendChild( iframe );
	    
	    			// Create a cacheable copy of the iframe document on first call.
	    			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
	    			// document to it; WebKit & Firefox won't allow reusing the iframe document.
	    			if ( !iframeDoc || !iframe.createElement ) {
	    				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
	    				iframeDoc.write( ( document.compatMode === "CSS1Compat" ? "<!doctype html>" : "" ) + "<html><body>" );
	    				iframeDoc.close();
	    			}
	    
	    			elem = iframeDoc.createElement( nodeName );
	    
	    			iframeDoc.body.appendChild( elem );
	    
	    			display = jQuery.css( elem, "display" );
	    			body.removeChild( iframe );
	    		}
	    
	    		// Store the correct default display
	    		elemdisplay[ nodeName ] = display;
	    	}
	    
	    	return elemdisplay[ nodeName ];
	    }
	    
	    
	    
	    
	    var rtable = /^t(?:able|d|h)$/i,
	    	rroot = /^(?:body|html)$/i;
	    
	    if ( "getBoundingClientRect" in document.documentElement ) {
	    	jQuery.fn.offset = function( options ) {
	    		var elem = this[0], box;
	    
	    		if ( options ) {
	    			return this.each(function( i ) {
	    				jQuery.offset.setOffset( this, options, i );
	    			});
	    		}
	    
	    		if ( !elem || !elem.ownerDocument ) {
	    			return null;
	    		}
	    
	    		if ( elem === elem.ownerDocument.body ) {
	    			return jQuery.offset.bodyOffset( elem );
	    		}
	    
	    		try {
	    			box = elem.getBoundingClientRect();
	    		} catch(e) {}
	    
	    		var doc = elem.ownerDocument,
	    			docElem = doc.documentElement;
	    
	    		// Make sure we're not dealing with a disconnected DOM node
	    		if ( !box || !jQuery.contains( docElem, elem ) ) {
	    			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
	    		}
	    
	    		var body = doc.body,
	    			win = getWindow(doc),
	    			clientTop  = docElem.clientTop  || body.clientTop  || 0,
	    			clientLeft = docElem.clientLeft || body.clientLeft || 0,
	    			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
	    			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
	    			top  = box.top  + scrollTop  - clientTop,
	    			left = box.left + scrollLeft - clientLeft;
	    
	    		return { top: top, left: left };
	    	};
	    
	    } else {
	    	jQuery.fn.offset = function( options ) {
	    		var elem = this[0];
	    
	    		if ( options ) {
	    			return this.each(function( i ) {
	    				jQuery.offset.setOffset( this, options, i );
	    			});
	    		}
	    
	    		if ( !elem || !elem.ownerDocument ) {
	    			return null;
	    		}
	    
	    		if ( elem === elem.ownerDocument.body ) {
	    			return jQuery.offset.bodyOffset( elem );
	    		}
	    
	    		var computedStyle,
	    			offsetParent = elem.offsetParent,
	    			prevOffsetParent = elem,
	    			doc = elem.ownerDocument,
	    			docElem = doc.documentElement,
	    			body = doc.body,
	    			defaultView = doc.defaultView,
	    			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
	    			top = elem.offsetTop,
	    			left = elem.offsetLeft;
	    
	    		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
	    			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
	    				break;
	    			}
	    
	    			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
	    			top  -= elem.scrollTop;
	    			left -= elem.scrollLeft;
	    
	    			if ( elem === offsetParent ) {
	    				top  += elem.offsetTop;
	    				left += elem.offsetLeft;
	    
	    				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
	    					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
	    					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
	    				}
	    
	    				prevOffsetParent = offsetParent;
	    				offsetParent = elem.offsetParent;
	    			}
	    
	    			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
	    				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
	    				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
	    			}
	    
	    			prevComputedStyle = computedStyle;
	    		}
	    
	    		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
	    			top  += body.offsetTop;
	    			left += body.offsetLeft;
	    		}
	    
	    		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
	    			top  += Math.max( docElem.scrollTop, body.scrollTop );
	    			left += Math.max( docElem.scrollLeft, body.scrollLeft );
	    		}
	    
	    		return { top: top, left: left };
	    	};
	    }
	    
	    jQuery.offset = {
	    
	    	bodyOffset: function( body ) {
	    		var top = body.offsetTop,
	    			left = body.offsetLeft;
	    
	    		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
	    			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
	    			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
	    		}
	    
	    		return { top: top, left: left };
	    	},
	    
	    	setOffset: function( elem, options, i ) {
	    		var position = jQuery.css( elem, "position" );
	    
	    		// set position first, in-case top/left are set even on static elem
	    		if ( position === "static" ) {
	    			elem.style.position = "relative";
	    		}
	    
	    		var curElem = jQuery( elem ),
	    			curOffset = curElem.offset(),
	    			curCSSTop = jQuery.css( elem, "top" ),
	    			curCSSLeft = jQuery.css( elem, "left" ),
	    			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
	    			props = {}, curPosition = {}, curTop, curLeft;
	    
	    		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
	    		if ( calculatePosition ) {
	    			curPosition = curElem.position();
	    			curTop = curPosition.top;
	    			curLeft = curPosition.left;
	    		} else {
	    			curTop = parseFloat( curCSSTop ) || 0;
	    			curLeft = parseFloat( curCSSLeft ) || 0;
	    		}
	    
	    		if ( jQuery.isFunction( options ) ) {
	    			options = options.call( elem, i, curOffset );
	    		}
	    
	    		if ( options.top != null ) {
	    			props.top = ( options.top - curOffset.top ) + curTop;
	    		}
	    		if ( options.left != null ) {
	    			props.left = ( options.left - curOffset.left ) + curLeft;
	    		}
	    
	    		if ( "using" in options ) {
	    			options.using.call( elem, props );
	    		} else {
	    			curElem.css( props );
	    		}
	    	}
	    };
	    
	    
	    jQuery.fn.extend({
	    
	    	position: function() {
	    		if ( !this[0] ) {
	    			return null;
	    		}
	    
	    		var elem = this[0],
	    
	    		// Get *real* offsetParent
	    		offsetParent = this.offsetParent(),
	    
	    		// Get correct offsets
	    		offset       = this.offset(),
	    		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
	    
	    		// Subtract element margins
	    		// note: when an element has margin: auto the offsetLeft and marginLeft
	    		// are the same in Safari causing offset.left to incorrectly be 0
	    		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
	    		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;
	    
	    		// Add offsetParent borders
	    		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
	    		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;
	    
	    		// Subtract the two offsets
	    		return {
	    			top:  offset.top  - parentOffset.top,
	    			left: offset.left - parentOffset.left
	    		};
	    	},
	    
	    	offsetParent: function() {
	    		return this.map(function() {
	    			var offsetParent = this.offsetParent || document.body;
	    			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
	    				offsetParent = offsetParent.offsetParent;
	    			}
	    			return offsetParent;
	    		});
	    	}
	    });
	    
	    
	    // Create scrollLeft and scrollTop methods
	    jQuery.each( ["Left", "Top"], function( i, name ) {
	    	var method = "scroll" + name;
	    
	    	jQuery.fn[ method ] = function( val ) {
	    		var elem, win;
	    
	    		if ( val === undefined ) {
	    			elem = this[ 0 ];
	    
	    			if ( !elem ) {
	    				return null;
	    			}
	    
	    			win = getWindow( elem );
	    
	    			// Return the scroll offset
	    			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
	    				jQuery.support.boxModel && win.document.documentElement[ method ] ||
	    					win.document.body[ method ] :
	    				elem[ method ];
	    		}
	    
	    		// Set the scroll offset
	    		return this.each(function() {
	    			win = getWindow( this );
	    
	    			if ( win ) {
	    				win.scrollTo(
	    					!i ? val : jQuery( win ).scrollLeft(),
	    					 i ? val : jQuery( win ).scrollTop()
	    				);
	    
	    			} else {
	    				this[ method ] = val;
	    			}
	    		});
	    	};
	    });
	    
	    function getWindow( elem ) {
	    	return jQuery.isWindow( elem ) ?
	    		elem :
	    		elem.nodeType === 9 ?
	    			elem.defaultView || elem.parentWindow :
	    			false;
	    }
	    
	    
	    
	    
	    // Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
	    jQuery.each([ "Height", "Width" ], function( i, name ) {
	    
	    	var type = name.toLowerCase();
	    
	    	// innerHeight and innerWidth
	    	jQuery.fn[ "inner" + name ] = function() {
	    		var elem = this[0];
	    		return elem ?
	    			elem.style ?
	    			parseFloat( jQuery.css( elem, type, "padding" ) ) :
	    			this[ type ]() :
	    			null;
	    	};
	    
	    	// outerHeight and outerWidth
	    	jQuery.fn[ "outer" + name ] = function( margin ) {
	    		var elem = this[0];
	    		return elem ?
	    			elem.style ?
	    			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
	    			this[ type ]() :
	    			null;
	    	};
	    
	    	jQuery.fn[ type ] = function( size ) {
	    		// Get window width or height
	    		var elem = this[0];
	    		if ( !elem ) {
	    			return size == null ? null : this;
	    		}
	    
	    		if ( jQuery.isFunction( size ) ) {
	    			return this.each(function( i ) {
	    				var self = jQuery( this );
	    				self[ type ]( size.call( this, i, self[ type ]() ) );
	    			});
	    		}
	    
	    		if ( jQuery.isWindow( elem ) ) {
	    			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
	    			// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
	    			var docElemProp = elem.document.documentElement[ "client" + name ],
	    				body = elem.document.body;
	    			return elem.document.compatMode === "CSS1Compat" && docElemProp ||
	    				body && body[ "client" + name ] || docElemProp;
	    
	    		// Get document width or height
	    		} else if ( elem.nodeType === 9 ) {
	    			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
	    			return Math.max(
	    				elem.documentElement["client" + name],
	    				elem.body["scroll" + name], elem.documentElement["scroll" + name],
	    				elem.body["offset" + name], elem.documentElement["offset" + name]
	    			);
	    
	    		// Get or set width or height on the element
	    		} else if ( size === undefined ) {
	    			var orig = jQuery.css( elem, type ),
	    				ret = parseFloat( orig );
	    
	    			return jQuery.isNumeric( ret ) ? ret : orig;
	    
	    		// Set the width or height on the element (default to pixels if value is unitless)
	    		} else {
	    			return this.css( type, typeof size === "string" ? size : size + "px" );
	    		}
	    	};
	    
	    });
	    
	    
	    
	    
	    // Expose jQuery to the global object
	    window.jQuery = window.$ = jQuery;
	    
	    // Expose jQuery as an AMD module, but only for AMD loaders that
	    // understand the issues with loading multiple versions of jQuery
	    // in a page that all might call define(). The loader will indicate
	    // they have special allowances for multiple jQuery versions by
	    // specifying define.amd.jQuery = true. Register as a named module,
	    // since jQuery can be concatenated with other files that may use define,
	    // but not use a proper concatenation script that understands anonymous
	    // AMD modules. A named AMD is safest and most robust way to register.
	    // Lowercase jquery is used because AMD module names are derived from
	    // file names, and jQuery is normally delivered in a lowercase file name.
	    // Do this after creating the global so that if an AMD module wants to call
	    // noConflict to hide this version of jQuery, it will work.
	    if ( "function" === "function" && __webpack_require__(32) && __webpack_require__(32).jQuery ) {
	    	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return jQuery; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    
	    
	    
	    })( window );

	    return noConflictMode ? window.jQuery.noConflict(true) : window.jQuery;
	  };

	  // For CommonJS
	  if (true) {
	    if (typeof window !== 'undefined') {
	      module.exports = create(window, true);
	    }
	    module.exports.create = create;

	  // For non-CommonJS
	  } else {
	    create(window, false);
	  }

	}());


/***/ },
/* 32 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// ConfigureCKEditor.js

	'use strict';

	var $ = __webpack_require__(31);

	var ConfigureCKEditor = function (editor, repositoryId) {
	    var MiddlewareService = __webpack_require__(17);

	    editor.config.allowedContent = true;
	    editor.config.extraPlugins = 'uploadimage';
	    editor.config.filebrowserUploadUrl = MiddlewareService.host() + '/repository/repositories/' + repositoryId + '/assets';
	    editor.config.mathJaxLib = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=default';
	};

	module.exports = ConfigureCKEditor;

/***/ },
/* 34 */
/***/ function(module, exports) {

	// ConvertLibraryId2RepositoryId.js
	'use strict';

	let ConvertLibraryId2RepositoryId = function (libraryId) {
	    return libraryId.replace('assessment.Bank', 'repository.Repository');
	};

	module.exports = ConvertLibraryId2RepositoryId;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// WrongAnswerEditor.js
	'use strict';

	__webpack_require__(36);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var Dispatcher = __webpack_require__(9);
	var LibraryItemsStore = __webpack_require__(8);
	var SequenceNumberTexts = __webpack_require__(14).SequenceNumberTexts;

	var WrongAnswerEditor = React.createClass({
	    displayName: 'WrongAnswerEditor',

	    getInitialState: function getInitialState() {
	        var wrongAnswerText = this.props.text === '' ? '' : this.props.text,
	            wrongAnswerFeedback = this.props.feedback === '' ? '' : this.props.feedback;

	        return {
	            wrongAnswerText: wrongAnswerText,
	            wrongAnswerFeedback: wrongAnswerFeedback
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    onChange: function onChange(e) {
	        // update via the parent
	        var data = {
	            index: this.props.index,
	            feedback: this.state.wrongAnswerFeedback,
	            text: this.state.wrongAnswerText
	        };
	        this.props.update(data);
	    },
	    removeWrongAnswer: function removeWrongAnswer() {
	        this.props.remove(this.props.index);
	    },
	    render: function render() {
	        var viewableIndex = this.props.index + 1,
	            answerId = 'wrongAnswer' + viewableIndex,
	            feedbackId = answerId + 'Feedback',
	            nthText = SequenceNumberTexts[this.props.index],
	            placeholder = 'The ' + nthText + ' mis-direction answer',
	            feedbackPlaceholder = 'Feedback for the ' + nthText + ' mis-direction answer',
	            wrongAnswer = '';
	        if (this.props.error) {
	            wrongAnswer = React.createElement(
	                FormGroup,
	                { controlId: answerId,
	                    validationState: 'error' },
	                React.createElement(
	                    'div',
	                    { className: 'wrong-answer-header' },
	                    React.createElement(
	                        ControlLabel,
	                        { className: 'wrong-answer-title' },
	                        'Wrong Answer ',
	                        viewableIndex
	                    ),
	                    React.createElement(
	                        Button,
	                        { onClick: this.addWrongAnswer,
	                            bsStyle: 'danger' },
	                        React.createElement(Glyphicon, { glyph: 'trash' }),
	                        'Delete Wrong Answer'
	                    )
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.wrongAnswerText,
	                    onChange: this.onChange,
	                    placeholder: placeholder }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            wrongAnswer = React.createElement(
	                FormGroup,
	                { controlId: answerId },
	                React.createElement(
	                    'div',
	                    { className: 'wrong-answer-header' },
	                    React.createElement(
	                        ControlLabel,
	                        { className: 'wrong-answer-title' },
	                        'Wrong Answer ',
	                        viewableIndex
	                    ),
	                    React.createElement(
	                        Button,
	                        { onClick: this.removeWrongAnswer,
	                            bsStyle: 'danger' },
	                        React.createElement(Glyphicon, { glyph: 'trash' }),
	                        'Delete Wrong Answer'
	                    )
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.wrongAnswerText,
	                    onChange: this.onChange,
	                    placeholder: placeholder })
	            );
	        }

	        return React.createElement(
	            'div',
	            null,
	            wrongAnswer,
	            React.createElement(
	                FormGroup,
	                { controlId: feedbackId },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Wrong Answer ',
	                    viewableIndex,
	                    ' Feedback (recommended)'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.wrongAnswerFeedback,
	                    onChange: this.onChange,
	                    placeholder: feedbackPlaceholder })
	            )
	        );
	    }
	});

	module.exports = WrongAnswerEditor;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(37);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./WrongAnswerEditor.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./WrongAnswerEditor.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".has-error > .cke_chrome {\n    border-color: #a94442;\n}\n\n.wrong-answer-header {\n    display: flex;\n}\n\n.wrong-answer-title {\n    flex: 1 1 100%;\n}", ""]);

	// exports


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// ItemTypesStore.js
	'use strict';

	var AuthoringConstants = __webpack_require__(14);
	var EventEmitter = __webpack_require__(16).EventEmitter;
	var MiddlewareService = __webpack_require__(17);
	var _ = __webpack_require__(5);

	var ActionTypes = AuthoringConstants.ActionTypes;
	var CHANGE_EVENT = ActionTypes.CHANGE_EVENT;

	var _itemTypes = [];

	var ItemTypesStore = _.assign({}, EventEmitter.prototype, {
	    emitChange: function () {
	        this.emit(CHANGE_EVENT, _itemTypes);
	    },
	    addChangeListener: function (callback) {
	        this.on(CHANGE_EVENT, callback);
	    },
	    removeChangeListener: function (callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	    },
	    getSupportedItemTypes: function (libraryId) {
	        var url = this.url() + libraryId + '/items/types',
	            _this = this;

	        fetch(url, {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            if (response.ok) {
	                response.json().then(function (data) {
	                    _itemTypes = data;
	                    _this.emitChange();
	                });
	            } else {
	                response.text().then(function (data) {
	                    alert(response.statusText + ': ' + data);
	                });
	            }
	        }).catch(function (error) {
	            console.log('Problem with getting item types: ' + error.message);
	        });
	    },
	    url: function () {
	      if (MiddlewareService.shouldReturnStatic()) return '/raw_data/libraries.json';

	      return MiddlewareService.host() + '/assessment/libraries/';
	    }
	});

	module.exports = ItemTypesStore;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ItemSearch.js

	'use strict';

	__webpack_require__(40);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Badge = ReactBS.Badge;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var InputGroup = ReactBS.InputGroup;

	var ModulesList = __webpack_require__(42);
	var LibraryItemsStore = __webpack_require__(8);

	var ItemSearch = React.createClass({
	    displayName: 'ItemSearch',

	    getInitialState: function getInitialState() {
	        return {
	            searchQuery: '',
	            filteredItems: []
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        // re-filter items if they are updated / created
	        var _this = this;
	        LibraryItemsStore.addChangeListener(function (items) {
	            _this.filterItems();
	        });
	    },
	    componentDidMount: function componentDidMount() {
	        this.filterItems();
	    },
	    filterItems: function filterItems() {
	        // TODO: take this.props.items and filter them according to the query term
	        var filteredItems = [],
	            q = this.state.searchQuery.toLowerCase();

	        if (q != '') {
	            _.each(this.props.items, function (item) {
	                var choices = item.question.choices,
	                    choiceMatch = false;

	                _.each(choices, function (choice) {
	                    if (choice.text.toLowerCase().indexOf(q) >= 0) {
	                        choiceMatch = true;
	                    }
	                });

	                if (item.displayName.text.toLowerCase().indexOf(q) >= 0 || item.description.text.toLowerCase().indexOf(q) >= 0 || item.question.text.text.toLowerCase().indexOf(q) >= 0 || choiceMatch) {
	                    filteredItems.push(item);
	                }
	            });
	        } else {
	            filteredItems = this.props.items;
	        }

	        this.setState({ filteredItems: filteredItems });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                FormGroup,
	                { className: 'item-search' },
	                React.createElement(
	                    InputGroup,
	                    null,
	                    React.createElement(
	                        InputGroup.Addon,
	                        null,
	                        React.createElement(Glyphicon, { glyph: 'search' })
	                    ),
	                    React.createElement(FormControl, { type: 'search',
	                        className: 'item-search__input',
	                        placeholder: 'Search question items (text in questions / choices)',
	                        onChange: this._onChange,
	                        value: this.state.searchQuery })
	                )
	            ),
	            React.createElement(ModulesList, { allItems: this.props.items,
	                items: this.state.filteredItems,
	                libraries: this.props.libraries,
	                libraryId: this.props.libraryId })
	        );
	    },
	    _onChange: function _onChange(event) {
	        var _this = this;
	        this.setState({ searchQuery: event.target.value }, function () {
	            _this.filterItems();
	        });
	    }

	});

	module.exports = ItemSearch;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(41);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ItemSearch.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ItemSearch.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, "\n.item-search__input {\n  \n}\n\n.item-search {\n    margin-top: 10px;\n    margin-left: 14px;\n    width: 60%;\n}", ""]);

	// exports


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ModulesList.js

	'use strict';

	__webpack_require__(43);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Badge = ReactBS.Badge;
	var Col = ReactBS.Col;
	var Grid = ReactBS.Grid;
	var Panel = ReactBS.Panel;
	var Row = ReactBS.Row;

	var ItemsList = __webpack_require__(45);
	var LibraryItemsStore = __webpack_require__(8);
	var LORelatedItems = __webpack_require__(95);
	var ModulesStore = __webpack_require__(96);
	var OutcomesStore = __webpack_require__(86);
	var SortItemsByModuleOutcomes = __webpack_require__(97);

	var ModulesList = React.createClass({
	    displayName: 'ModulesList',

	    getInitialState: function getInitialState() {
	        return {
	            moduleExpandedState: {},
	            modules: [],
	            outcomes: [],
	            sortedItemsByModule: {}, // moduleId => [itemsList]
	            sortedItemsByOutcome: {} // loId => [itemsList]
	        };
	    },
	    componentWillMount: function componentWillMount() {
	        var _this = this;
	        _this.initializeModulesAsClosed();
	        ModulesStore.addChangeListener(function (modules) {
	            _this.setState({ modules: modules });
	            _this.sortItemsByModule(_this.props.items);
	        });
	        OutcomesStore.addChangeListener(function (outcomes) {
	            _this.setState({ outcomes: outcomes });
	            _this.sortItemsByOutcome();
	        });
	        LibraryItemsStore.addChangeListener(function (items) {
	            _this.sortItemsByModule(_this.props.items);
	            _this.sortItemsByOutcome();
	        });
	    },
	    componentDidMount: function componentDidMount() {
	        ModulesStore.getAll(this.props.libraryId);
	        OutcomesStore.getAll(this.props.libraryId);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        if (nextProps.libraryId !== this.props.libraryId) {
	            ModulesStore.getAll(nextProps.libraryId);
	            OutcomesStore.getAll(nextProps.libraryId);
	        }
	    },
	    filterOutcomes: function filterOutcomes(item) {
	        // return outcomes that are not currently being used somewhere
	        // in a specific item
	        return _.filter(this.state.outcomes, function (outcome) {
	            return item.usedLOs.indexOf(outcome.id) < 0;
	        });
	    },
	    getModuleDisplayName: function getModuleDisplayName(moduleId) {
	        var module = ModulesStore.get(moduleId);
	        if (module == null) {
	            return "Uncategorized";
	        } else {
	            return module.displayName.text;
	        }
	    },
	    initializeModulesAsClosed: function initializeModulesAsClosed() {
	        var moduleState = {};
	        _.each(this.state.sortedItemsByModule, function (module) {
	            moduleState[module.id] = false;
	        });

	        this.setState({ moduleExpandedState: moduleState });
	    },
	    moduleState: function moduleState(moduleId) {
	        return this.state.moduleExpandedState[moduleId];
	    },
	    renderModules: function renderModules() {
	        var _this = this,

	        // map the choiceIds, etc., in answers back to choices in questions
	        items = [],
	            sortedModuleNames = [];

	        _.each(this.state.modules, function (module) {
	            sortedModuleNames.push({
	                displayName: _this.getModuleDisplayName(module.id),
	                id: module.id
	            });
	        });

	        sortedModuleNames = _.sortBy(sortedModuleNames, ['displayName']);

	        sortedModuleNames.push({
	            displayName: "Uncategorized",
	            id: 'uncategorized'
	        });

	        return _.map(sortedModuleNames, function (moduleData) {
	            var moduleItems = _this.state.sortedItemsByModule[moduleData.id],
	                numItems = 0,
	                header;

	            if (typeof moduleItems !== 'undefined') {
	                numItems = moduleItems.length;
	            }
	            header = React.createElement(
	                'div',
	                null,
	                moduleData.displayName,
	                React.createElement(
	                    Badge,
	                    { pullRight: true },
	                    numItems
	                )
	            );

	            return React.createElement(
	                Row,
	                { key: moduleData.id },
	                React.createElement(
	                    Panel,
	                    { header: header,
	                        collapsible: true,
	                        'data-id': moduleData.id,
	                        'data-type': 'module',
	                        expanded: _this.moduleState(moduleData.id),
	                        onClick: _this.toggleModuleState },
	                    React.createElement(ItemsList, { enableClickthrough: true,
	                        libraries: _this.props.libraries,
	                        libraryId: _this.props.libraryId,
	                        outcomes: _this.state.outcomes,
	                        refreshModulesAndOutcomes: _this._refreshModulesAndOutcomes,
	                        relatedItems: _this.state.sortedItemsByOutcome,
	                        sortedItems: moduleItems })
	                )
	            );
	        });
	    },
	    sortItemsByModule: function sortItemsByModule(itemsList) {
	        // get a pre-sorted list of all items, organized by module
	        this.setState({ sortedItemsByModule: SortItemsByModuleOutcomes(itemsList, this.state.modules) });
	    },
	    sortItemsByOutcome: function sortItemsByOutcome() {
	        // get a pre-sorted list of all items, organized by learning outcome
	        this.setState({ sortedItemsByOutcome: LORelatedItems(this.props.allItems, this.state.outcomes) });
	    },
	    toggleModuleState: function toggleModuleState(e) {
	        var clickedElement = e.target,
	            targetClassName = clickedElement.className,
	            updatedState = this.state.moduleExpandedState,
	            moduleId = e.currentTarget.dataset.id,
	            isModule = clickedElement.parentElement.parentElement.dataset.type === 'module';

	        if (targetClassName.indexOf('panel-title') >= 0 && isModule) {
	            updatedState[moduleId] = !updatedState[moduleId];

	            this.setState({ moduleExpandedState: updatedState });
	        }
	    },
	    render: function render() {
	        return React.createElement(
	            Grid,
	            null,
	            this.renderModules()
	        );
	    },
	    _refreshModulesAndOutcomes: function _refreshModulesAndOutcomes() {
	        ModulesStore.getAll(this.props.libraryId);
	        OutcomesStore.getAll(this.props.libraryId);
	    }
	});

	module.exports = ModulesList;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(44);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ModulesList.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ModulesList.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".panel-title .badge {\n}", ""]);

	// exports


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ItemsList.js

	'use strict';

	__webpack_require__(46);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Col = ReactBS.Col;
	var Grid = ReactBS.Grid;
	var Panel = ReactBS.Panel;
	var Row = ReactBS.Row;

	var AuthoringConstants = __webpack_require__(14);
	var ChoiceLabels = AuthoringConstants.ChoiceLabels;
	var GenusTypes = AuthoringConstants.GenusTypes;

	var AnswerExtraction = __webpack_require__(48);
	var AnswerText = __webpack_require__(49);
	var ItemControls = __webpack_require__(67);
	var ItemRow = __webpack_require__(76);
	var LOText = __webpack_require__(79);
	var OutcomesStore = __webpack_require__(86);
	var QuestionText = __webpack_require__(88);

	var ItemsList = React.createClass({
	    displayName: 'ItemsList',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    componentDidUpdate: function componentDidUpdate() {},
	    renderItems: function renderItems() {
	        var _this = this;
	        return _.map(this.props.sortedItems, function (item) {
	            return React.createElement(ItemRow, { enableClickthrough: _this.props.enableClickthrough,
	                item: item,
	                key: item.id,
	                libraries: _this.props.libraries,
	                libraryId: _this.props.libraryId,
	                outcomes: _this.props.outcomes,
	                refreshModulesAndOutcomes: _this.props.refreshModulesAndOutcomes,
	                relatedItems: _this.props.relatedItems });
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            Grid,
	            null,
	            this.renderItems()
	        );
	    }
	});

	module.exports = ItemsList;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(47);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ItemsList.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ItemsList.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 47 */
22,
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// AnswerExtraction.js
	'use strict';

	var _ = __webpack_require__(5);

	var AnswerExtraction = function (item) {
	    if (item.hasOwnProperty('answers')) {
	        var answers = item.answers,
	            rightAnswer = _.find(answers, {genusTypeId: "answer-type%3Aright-answer%40ODL.MIT.EDU"}),
	            correctChoiceId = rightAnswer.choiceIds[0],
	            wrongAnswers = _.filter(answers, {genusTypeId: "answer-type%3Awrong-answer%40ODL.MIT.EDU"}),
	            wrongAnswerFeedbacks = [],
	            wrongAnswerIds = [],
	            wrongAnswerLOs = [],
	            wrongChoiceIds = [],
	            choices = item.question.choices,
	            correctAnswerFeedback = rightAnswer.texts.feedback,
	            correctAnswerId = rightAnswer.id,
	            correctAnswerText, wrongAnswerTexts;

	        correctAnswerText = _.find(choices, {"id": correctChoiceId});

	        _.each(wrongAnswers, function (wrongAnswer) {
	            wrongAnswerIds.push(wrongAnswer.choiceIds[0]);
	        });

	        wrongAnswerTexts = _.filter(choices, function (choice) {
	            return wrongAnswerIds.indexOf(choice.id) >= 0;
	        });

	        // need to get these in the same order as wrongAnswerTexts
	        wrongAnswerIds = [];

	        _.each(wrongAnswerTexts, function (wrongAnswerText) {
	            var wrongAnswer = _.find(wrongAnswers, function (wrongAnswer) {
	                return wrongAnswer.choiceIds[0] == wrongAnswerText.id;
	            });
	            wrongAnswerFeedbacks.push(wrongAnswer.texts.feedback);
	            wrongAnswerIds.push(wrongAnswer.id);
	            wrongChoiceIds.push(wrongAnswer.choiceIds[0]);

	            if (wrongAnswer.confusedLearningObjectiveIds.length > 0) {
	                wrongAnswerLOs.push(wrongAnswer.confusedLearningObjectiveIds[0]);
	            } else {
	                wrongAnswerLOs.push('None linked yet');
	            }
	        });

	        return {
	            correctAnswerFeedback: correctAnswerFeedback,
	            correctAnswerId: correctAnswerId,
	            correctAnswerText: correctAnswerText,
	            correctChoiceId: correctChoiceId,
	            wrongAnswerFeedbacks: wrongAnswerFeedbacks,
	            wrongAnswerIds: wrongAnswerIds,
	            wrongAnswerLOs: wrongAnswerLOs,
	            wrongAnswerTexts: wrongAnswerTexts,
	            wrongChoiceIds: wrongChoiceIds
	        };
	    } else {
	        return {
	            correctAnswerFeedback: '',
	            correctAnswerId: '',
	            correctAnswerText: '',
	            correctChoiceId: '',
	            wrongAnswerFeedbacks: [],
	            wrongAnswerIds: [],
	            wrongAnswerLOs: [],
	            wrongAnswerTexts: [],
	            wrongChoiceIds: []
	        };
	    }
	};

	module.exports = AnswerExtraction;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// AnswerText.js

	'use strict';

	__webpack_require__(50);
	__webpack_require__(52);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Select = __webpack_require__(54);

	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;
	var Panel = ReactBS.Panel;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var AnswerFeedback = __webpack_require__(61);
	var AnswerFeedbackPreviewBtn = __webpack_require__(63);
	var Dispatcher = __webpack_require__(9);

	var AnswerText = React.createClass({
	  displayName: 'AnswerText',

	  getInitialState: function getInitialState() {
	    var confusedLO = this.props.confusedLO === 'None linked yet' ? '' : this.props.confusedLO;
	    return {
	      confusedLO: confusedLO,
	      showModal: false
	    };
	  },
	  componentWillMount: function componentWillMount() {},
	  componentDidMount: function componentDidMount() {
	    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
	  componentDidUpdate: function componentDidUpdate(nextProps, nextState) {
	    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
	  },
	  getAnswerText: function getAnswerText() {
	    return { __html: this.props.answerText };
	  },
	  render: function render() {
	    var formattedOutcomes = _.map(this.props.outcomes, function (outcome) {
	      return {
	        value: outcome.id,
	        label: outcome.displayName.text
	      };
	    }),
	        linkButton = '';

	    if (this.props.enableClickthrough) {
	      if (!this.props.correctAnswer) {
	        linkButton = React.createElement('div', { className: 'wrong-answer-actions' });
	      } else {
	        linkButton = React.createElement(
	          'div',
	          { className: 'right-answer-actions' },
	          React.createElement(
	            'div',
	            { className: 'right-answer-actions-top-row' },
	            React.createElement(
	              'div',
	              { className: 'actions-horizontal-row' },
	              React.createElement(Glyphicon, { className: 'right-answer-check',
	                glyph: 'ok' }),
	              React.createElement(AnswerFeedback, { answerId: this.props.answerId,
	                feedback: this.props.feedback,
	                feedbackSource: this.props.label,
	                itemId: this.props.itemId,
	                libraryId: this.props.libraryId })
	            ),
	            React.createElement(AnswerFeedbackPreviewBtn, { feedback: this.props.feedback,
	              togglePreview: this.props.togglePreview })
	          )
	        );
	      }
	    }

	    return React.createElement(
	      'div',
	      { className: 'taggable-text' },
	      React.createElement(
	        'div',
	        { className: 'text-blob' },
	        React.createElement('div', { dangerouslySetInnerHTML: this.getAnswerText() })
	      ),
	      linkButton
	    );
	  }
	});

	module.exports = AnswerText;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(51);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./AnswerText.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./AnswerText.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".wrong-answer-actions,\n.right-answer-actions {\n  float: right;\n  display: flex;\n  flex-direction: column;\n}\n\n.right-answer-actions-top-row {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.actions-horizontal-row {\n  display: flex;\n}\n\n.right-answer-actions,\n.text-blob {\n    flex: 1 1 50%;\n}\n\n.wrong-answer-actions button,\n.right-answer-actions button {\n    height: 34px;\n    margin-left: 5px;\n    margin-right: 5px;\n}\n\n.wrong-answer-actions .badge {\n    background-color: gray;\n    margin-right: 5px;\n}\n\n.right-answer-check {\n    color: green;\n    margin-left: 16px;\n    margin-right: 12px;\n    margin-top: 5px;\n}\n\n.taggable-text {\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  overflow: hidden;\n}", ""]);

	// exports


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(53);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./reactSelectOverride.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./reactSelectOverride.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, "/*Override these from react-select*/\n.Select-menu-outer {\n    max-height: 60vh;\n}\n\n.Select-menu {\n    max-height: 59vh;\n}", ""]);

	// exports


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactInputAutosize = __webpack_require__(55);

	var _reactInputAutosize2 = _interopRequireDefault(_reactInputAutosize);

	var _classnames = __webpack_require__(56);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsStripDiacritics = __webpack_require__(57);

	var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);

	var _Async = __webpack_require__(58);

	var _Async2 = _interopRequireDefault(_Async);

	var _Option = __webpack_require__(59);

	var _Option2 = _interopRequireDefault(_Option);

	var _Value = __webpack_require__(60);

	var _Value2 = _interopRequireDefault(_Value);

	function stringifyValue(value) {
		if (typeof value === 'object') {
			return JSON.stringify(value);
		} else {
			return value;
		}
	}

	var stringOrNode = _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]);

	var Select = _react2['default'].createClass({

		displayName: 'Select',

		propTypes: {
			addLabelText: _react2['default'].PropTypes.string, // placeholder displayed when you want to add a label on a multi-value input
			allowCreate: _react2['default'].PropTypes.bool, // whether to allow creation of new entries
			autoBlur: _react2['default'].PropTypes.bool,
			autofocus: _react2['default'].PropTypes.bool, // autofocus the component on mount
			autosize: _react2['default'].PropTypes.bool, // whether to enable autosizing or not
			backspaceRemoves: _react2['default'].PropTypes.bool, // whether backspace removes an item if there is no text input
			className: _react2['default'].PropTypes.string, // className for the outer element
			clearAllText: stringOrNode, // title for the "clear" control when multi: true
			clearValueText: stringOrNode, // title for the "clear" control
			clearable: _react2['default'].PropTypes.bool, // should it be possible to reset value
			delimiter: _react2['default'].PropTypes.string, // delimiter to use to join multiple values for the hidden field value
			disabled: _react2['default'].PropTypes.bool, // whether the Select is disabled or not
			escapeClearsValue: _react2['default'].PropTypes.bool, // whether escape clears the value when the menu is closed
			filterOption: _react2['default'].PropTypes.func, // method to filter a single option (option, filterString)
			filterOptions: _react2['default'].PropTypes.any, // boolean to enable default filtering or function to filter the options array ([options], filterString, [values])
			ignoreAccents: _react2['default'].PropTypes.bool, // whether to strip diacritics when filtering
			ignoreCase: _react2['default'].PropTypes.bool, // whether to perform case-insensitive filtering
			inputProps: _react2['default'].PropTypes.object, // custom attributes for the Input
			isLoading: _react2['default'].PropTypes.bool, // whether the Select is loading externally or not (such as options being loaded)
			joinValues: _react2['default'].PropTypes.bool, // joins multiple values into a single form field with the delimiter (legacy mode)
			labelKey: _react2['default'].PropTypes.string, // path of the label value in option objects
			matchPos: _react2['default'].PropTypes.string, // (any|start) match the start or entire string when filtering
			matchProp: _react2['default'].PropTypes.string, // (any|label|value) which option property to filter on
			menuBuffer: _react2['default'].PropTypes.number, // optional buffer (in px) between the bottom of the viewport and the bottom of the menu
			menuContainerStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu container
			menuRenderer: _react2['default'].PropTypes.func, // renders a custom menu with options
			menuStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu
			multi: _react2['default'].PropTypes.bool, // multi-value input
			name: _react2['default'].PropTypes.string, // generates a hidden <input /> tag with this field name for html forms
			newOptionCreator: _react2['default'].PropTypes.func, // factory to create new options when allowCreate set
			noResultsText: stringOrNode, // placeholder displayed when there are no matching search results
			onBlur: _react2['default'].PropTypes.func, // onBlur handler: function (event) {}
			onBlurResetsInput: _react2['default'].PropTypes.bool, // whether input is cleared on blur
			onChange: _react2['default'].PropTypes.func, // onChange handler: function (newValue) {}
			onClose: _react2['default'].PropTypes.func, // fires when the menu is closed
			onFocus: _react2['default'].PropTypes.func, // onFocus handler: function (event) {}
			onInputChange: _react2['default'].PropTypes.func, // onInputChange handler: function (inputValue) {}
			onMenuScrollToBottom: _react2['default'].PropTypes.func, // fires when the menu is scrolled to the bottom; can be used to paginate options
			onOpen: _react2['default'].PropTypes.func, // fires when the menu is opened
			onValueClick: _react2['default'].PropTypes.func, // onClick handler for value labels: function (value, event) {}
			openAfterFocus: _react2['default'].PropTypes.bool, // boolean to enable opening dropdown when focused
			optionClassName: _react2['default'].PropTypes.string, // additional class(es) to apply to the <Option /> elements
			optionComponent: _react2['default'].PropTypes.func, // option component to render in dropdown
			optionRenderer: _react2['default'].PropTypes.func, // optionRenderer: function (option) {}
			options: _react2['default'].PropTypes.array, // array of options
			placeholder: stringOrNode, // field placeholder, displayed when there's no value
			required: _react2['default'].PropTypes.bool, // applies HTML5 required attribute when needed
			scrollMenuIntoView: _react2['default'].PropTypes.bool, // boolean to enable the viewport to shift so that the full menu fully visible when engaged
			searchable: _react2['default'].PropTypes.bool, // whether to enable searching feature or not
			simpleValue: _react2['default'].PropTypes.bool, // pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false
			style: _react2['default'].PropTypes.object, // optional style to apply to the control
			tabIndex: _react2['default'].PropTypes.string, // optional tab index of the control
			value: _react2['default'].PropTypes.any, // initial field value
			valueComponent: _react2['default'].PropTypes.func, // value component to render
			valueKey: _react2['default'].PropTypes.string, // path of the label value in option objects
			valueRenderer: _react2['default'].PropTypes.func, // valueRenderer: function (option) {}
			wrapperStyle: _react2['default'].PropTypes.object },

		// optional style to apply to the component wrapper
		statics: { Async: _Async2['default'] },

		getDefaultProps: function getDefaultProps() {
			return {
				addLabelText: 'Add "{label}"?',
				autosize: true,
				allowCreate: false,
				backspaceRemoves: true,
				clearable: true,
				clearAllText: 'Clear all',
				clearValueText: 'Clear value',
				delimiter: ',',
				disabled: false,
				escapeClearsValue: true,
				filterOptions: true,
				ignoreAccents: true,
				ignoreCase: true,
				inputProps: {},
				isLoading: false,
				joinValues: false,
				labelKey: 'label',
				matchPos: 'any',
				matchProp: 'any',
				menuBuffer: 0,
				multi: false,
				noResultsText: 'No results found',
				onBlurResetsInput: true,
				openAfterFocus: false,
				optionComponent: _Option2['default'],
				placeholder: 'Select...',
				required: false,
				scrollMenuIntoView: true,
				searchable: true,
				simpleValue: false,
				valueComponent: _Value2['default'],
				valueKey: 'value'
			};
		},

		getInitialState: function getInitialState() {
			return {
				inputValue: '',
				isFocused: false,
				isLoading: false,
				isOpen: false,
				isPseudoFocused: false,
				required: this.props.required && this.handleRequired(this.props.value, this.props.multi)
			};
		},

		componentDidMount: function componentDidMount() {
			if (this.props.autofocus) {
				this.focus();
			}
		},

		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			if (this.props.value !== nextProps.value && nextProps.required) {
				this.setState({
					required: this.handleRequired(nextProps.value, nextProps.multi)
				});
			}
		},

		componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
			if (nextState.isOpen !== this.state.isOpen) {
				var handler = nextState.isOpen ? nextProps.onOpen : nextProps.onClose;
				handler && handler();
			}
		},

		componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
			// focus to the selected option
			if (this.refs.menu && this.refs.focused && this.state.isOpen && !this.hasScrolledToOption) {
				var focusedOptionNode = _reactDom2['default'].findDOMNode(this.refs.focused);
				var menuNode = _reactDom2['default'].findDOMNode(this.refs.menu);
				menuNode.scrollTop = focusedOptionNode.offsetTop;
				this.hasScrolledToOption = true;
			} else if (!this.state.isOpen) {
				this.hasScrolledToOption = false;
			}

			if (prevState.inputValue !== this.state.inputValue && this.props.onInputChange) {
				this.props.onInputChange(this.state.inputValue);
			}
			if (this._scrollToFocusedOptionOnUpdate && this.refs.focused && this.refs.menu) {
				this._scrollToFocusedOptionOnUpdate = false;
				var focusedDOM = _reactDom2['default'].findDOMNode(this.refs.focused);
				var menuDOM = _reactDom2['default'].findDOMNode(this.refs.menu);
				var focusedRect = focusedDOM.getBoundingClientRect();
				var menuRect = menuDOM.getBoundingClientRect();
				if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {
					menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;
				}
			}
			if (this.props.scrollMenuIntoView && this.refs.menuContainer) {
				var menuContainerRect = this.refs.menuContainer.getBoundingClientRect();
				if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {
					window.scrollTo(0, window.scrollY + menuContainerRect.bottom + this.props.menuBuffer - window.innerHeight);
				}
			}
			if (prevProps.disabled !== this.props.disabled) {
				this.setState({ isFocused: false }); // eslint-disable-line react/no-did-update-set-state
			}
		},

		focus: function focus() {
			if (!this.refs.input) return;
			this.refs.input.focus();

			if (this.props.openAfterFocus) {
				this.setState({
					isOpen: true
				});
			}
		},

		blurInput: function blurInput() {
			if (!this.refs.input) return;
			this.refs.input.blur();
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		handleTouchEnd: function handleTouchEnd(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Fire the mouse events
			this.handleMouseDown(event);
		},

		handleTouchEndClearValue: function handleTouchEndClearValue(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Clear the value
			this.clearValue(event);
		},

		handleMouseDown: function handleMouseDown(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}

			// prevent default event handlers
			event.stopPropagation();
			event.preventDefault();

			// for the non-searchable select, toggle the menu
			if (!this.props.searchable) {
				this.focus();
				return this.setState({
					isOpen: !this.state.isOpen
				});
			}

			if (this.state.isFocused) {
				// if the input is focused, ensure the menu is open
				this.setState({
					isOpen: true,
					isPseudoFocused: false
				});
			} else {
				// otherwise, focus the input and open the menu
				this._openAfterFocus = true;
				this.focus();
			}
		},

		handleMouseDownOnArrow: function handleMouseDownOnArrow(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			// If the menu isn't open, let the event bubble to the main handleMouseDown
			if (!this.state.isOpen) {
				return;
			}
			// prevent default event handlers
			event.stopPropagation();
			event.preventDefault();
			// close the menu
			this.closeMenu();
		},

		handleMouseDownOnMenu: function handleMouseDownOnMenu(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();

			this._openAfterFocus = true;
			this.focus();
		},

		closeMenu: function closeMenu() {
			this.setState({
				isOpen: false,
				isPseudoFocused: this.state.isFocused && !this.props.multi,
				inputValue: ''
			});
			this.hasScrolledToOption = false;
		},

		handleInputFocus: function handleInputFocus(event) {
			var isOpen = this.state.isOpen || this._openAfterFocus;
			if (this.props.onFocus) {
				this.props.onFocus(event);
			}
			this.setState({
				isFocused: true,
				isOpen: isOpen
			});
			this._openAfterFocus = false;
		},

		handleInputBlur: function handleInputBlur(event) {
			if (this.refs.menu && document.activeElement.isEqualNode(this.refs.menu)) {
				return;
			}

			if (this.props.onBlur) {
				this.props.onBlur(event);
			}
			var onBlurredState = {
				isFocused: false,
				isOpen: false,
				isPseudoFocused: false
			};
			if (this.props.onBlurResetsInput) {
				onBlurredState.inputValue = '';
			}
			this.setState(onBlurredState);
		},

		handleInputChange: function handleInputChange(event) {
			this.setState({
				isOpen: true,
				isPseudoFocused: false,
				inputValue: event.target.value
			});
		},

		handleKeyDown: function handleKeyDown(event) {
			if (this.props.disabled) return;
			switch (event.keyCode) {
				case 8:
					// backspace
					if (!this.state.inputValue && this.props.backspaceRemoves) {
						event.preventDefault();
						this.popValue();
					}
					return;
				case 9:
					// tab
					if (event.shiftKey || !this.state.isOpen) {
						return;
					}
					this.selectFocusedOption();
					return;
				case 13:
					// enter
					if (!this.state.isOpen) return;
					event.stopPropagation();
					this.selectFocusedOption();
					break;
				case 27:
					// escape
					if (this.state.isOpen) {
						this.closeMenu();
					} else if (this.props.clearable && this.props.escapeClearsValue) {
						this.clearValue(event);
					}
					break;
				case 38:
					// up
					this.focusPreviousOption();
					break;
				case 40:
					// down
					this.focusNextOption();
					break;
				// case 188: // ,
				// 	if (this.props.allowCreate && this.props.multi) {
				// 		event.preventDefault();
				// 		event.stopPropagation();
				// 		this.selectFocusedOption();
				// 	} else {
				// 		return;
				// 	}
				// break;
				default:
					return;
			}
			event.preventDefault();
		},

		handleValueClick: function handleValueClick(option, event) {
			if (!this.props.onValueClick) return;
			this.props.onValueClick(option, event);
		},

		handleMenuScroll: function handleMenuScroll(event) {
			if (!this.props.onMenuScrollToBottom) return;
			var target = event.target;

			if (target.scrollHeight > target.offsetHeight && !(target.scrollHeight - target.offsetHeight - target.scrollTop)) {
				this.props.onMenuScrollToBottom();
			}
		},

		handleRequired: function handleRequired(value, multi) {
			if (!value) return true;
			return multi ? value.length === 0 : Object.keys(value).length === 0;
		},

		getOptionLabel: function getOptionLabel(op) {
			return op[this.props.labelKey];
		},

		getValueArray: function getValueArray() {
			var value = this.props.value;
			if (this.props.multi) {
				if (typeof value === 'string') value = value.split(this.props.delimiter);
				if (!Array.isArray(value)) {
					if (value === null || value === undefined) return [];
					value = [value];
				}
				return value.map(this.expandValue).filter(function (i) {
					return i;
				});
			}
			var expandedValue = this.expandValue(value);
			return expandedValue ? [expandedValue] : [];
		},

		expandValue: function expandValue(value) {
			if (typeof value !== 'string' && typeof value !== 'number') return value;
			var _props = this.props;
			var options = _props.options;
			var valueKey = _props.valueKey;

			if (!options) return;
			for (var i = 0; i < options.length; i++) {
				if (options[i][valueKey] === value) return options[i];
			}
		},

		setValue: function setValue(value) {
			var _this = this;

			if (this.props.autoBlur) {
				this.blurInput();
			}
			if (!this.props.onChange) return;
			if (this.props.required) {
				var required = this.handleRequired(value, this.props.multi);
				this.setState({ required: required });
			}
			if (this.props.simpleValue && value) {
				value = this.props.multi ? value.map(function (i) {
					return i[_this.props.valueKey];
				}).join(this.props.delimiter) : value[this.props.valueKey];
			}
			this.props.onChange(value);
		},

		selectValue: function selectValue(value) {
			this.hasScrolledToOption = false;
			if (this.props.multi) {
				this.addValue(value);
				this.setState({
					inputValue: ''
				});
			} else {
				this.setValue(value);
				this.setState({
					isOpen: false,
					inputValue: '',
					isPseudoFocused: this.state.isFocused
				});
			}
		},

		addValue: function addValue(value) {
			var valueArray = this.getValueArray();
			this.setValue(valueArray.concat(value));
		},

		popValue: function popValue() {
			var valueArray = this.getValueArray();
			if (!valueArray.length) return;
			if (valueArray[valueArray.length - 1].clearableValue === false) return;
			this.setValue(valueArray.slice(0, valueArray.length - 1));
		},

		removeValue: function removeValue(value) {
			var valueArray = this.getValueArray();
			this.setValue(valueArray.filter(function (i) {
				return i !== value;
			}));
			this.focus();
		},

		clearValue: function clearValue(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, ignore it.
			if (event && event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();
			this.setValue(null);
			this.setState({
				isOpen: false,
				inputValue: ''
			}, this.focus);
		},

		focusOption: function focusOption(option) {
			this.setState({
				focusedOption: option
			});
		},

		focusNextOption: function focusNextOption() {
			this.focusAdjacentOption('next');
		},

		focusPreviousOption: function focusPreviousOption() {
			this.focusAdjacentOption('previous');
		},

		focusAdjacentOption: function focusAdjacentOption(dir) {
			var options = this._visibleOptions.filter(function (i) {
				return !i.disabled;
			});
			this._scrollToFocusedOptionOnUpdate = true;
			if (!this.state.isOpen) {
				this.setState({
					isOpen: true,
					inputValue: '',
					focusedOption: this._focusedOption || options[dir === 'next' ? 0 : options.length - 1]
				});
				return;
			}
			if (!options.length) return;
			var focusedIndex = -1;
			for (var i = 0; i < options.length; i++) {
				if (this._focusedOption === options[i]) {
					focusedIndex = i;
					break;
				}
			}
			var focusedOption = options[0];
			if (dir === 'next' && focusedIndex > -1 && focusedIndex < options.length - 1) {
				focusedOption = options[focusedIndex + 1];
			} else if (dir === 'previous') {
				if (focusedIndex > 0) {
					focusedOption = options[focusedIndex - 1];
				} else {
					focusedOption = options[options.length - 1];
				}
			}
			this.setState({
				focusedOption: focusedOption
			});
		},

		selectFocusedOption: function selectFocusedOption() {
			// if (this.props.allowCreate && !this.state.focusedOption) {
			// 	return this.selectValue(this.state.inputValue);
			// }
			if (this._focusedOption) {
				return this.selectValue(this._focusedOption);
			}
		},

		renderLoading: function renderLoading() {
			if (!this.props.isLoading) return;
			return _react2['default'].createElement(
				'span',
				{ className: 'Select-loading-zone', 'aria-hidden': 'true' },
				_react2['default'].createElement('span', { className: 'Select-loading' })
			);
		},

		renderValue: function renderValue(valueArray, isOpen) {
			var _this2 = this;

			var renderLabel = this.props.valueRenderer || this.getOptionLabel;
			var ValueComponent = this.props.valueComponent;
			if (!valueArray.length) {
				return !this.state.inputValue ? _react2['default'].createElement(
					'div',
					{ className: 'Select-placeholder' },
					this.props.placeholder
				) : null;
			}
			var onClick = this.props.onValueClick ? this.handleValueClick : null;
			if (this.props.multi) {
				return valueArray.map(function (value, i) {
					return _react2['default'].createElement(
						ValueComponent,
						{
							disabled: _this2.props.disabled || value.clearableValue === false,
							key: 'value-' + i + '-' + value[_this2.props.valueKey],
							onClick: onClick,
							onRemove: _this2.removeValue,
							value: value
						},
						renderLabel(value)
					);
				});
			} else if (!this.state.inputValue) {
				if (isOpen) onClick = null;
				return _react2['default'].createElement(
					ValueComponent,
					{
						disabled: this.props.disabled,
						onClick: onClick,
						value: valueArray[0]
					},
					renderLabel(valueArray[0])
				);
			}
		},

		renderInput: function renderInput(valueArray) {
			var className = (0, _classnames2['default'])('Select-input', this.props.inputProps.className);
			if (this.props.disabled || !this.props.searchable) {
				return _react2['default'].createElement('div', _extends({}, this.props.inputProps, {
					className: className,
					tabIndex: this.props.tabIndex || 0,
					onBlur: this.handleInputBlur,
					onFocus: this.handleInputFocus,
					ref: 'input',
					style: { border: 0, width: 1, display: 'inline-block' } }));
			}
			if (this.props.autosize) {
				return _react2['default'].createElement(_reactInputAutosize2['default'], _extends({}, this.props.inputProps, {
					className: className,
					tabIndex: this.props.tabIndex,
					onBlur: this.handleInputBlur,
					onChange: this.handleInputChange,
					onFocus: this.handleInputFocus,
					minWidth: '5',
					ref: 'input',
					required: this.state.required,
					value: this.state.inputValue
				}));
			}
			return _react2['default'].createElement(
				'div',
				{ className: className },
				_react2['default'].createElement('input', _extends({}, this.props.inputProps, {
					tabIndex: this.props.tabIndex,
					onBlur: this.handleInputBlur,
					onChange: this.handleInputChange,
					onFocus: this.handleInputFocus,
					ref: 'input',
					required: this.state.required,
					value: this.state.inputValue
				}))
			);
		},

		renderClear: function renderClear() {
			if (!this.props.clearable || !this.props.value || this.props.multi && !this.props.value.length || this.props.disabled || this.props.isLoading) return;
			return _react2['default'].createElement(
				'span',
				{ className: 'Select-clear-zone', title: this.props.multi ? this.props.clearAllText : this.props.clearValueText,
					'aria-label': this.props.multi ? this.props.clearAllText : this.props.clearValueText,
					onMouseDown: this.clearValue,
					onTouchStart: this.handleTouchStart,
					onTouchMove: this.handleTouchMove,
					onTouchEnd: this.handleTouchEndClearValue },
				_react2['default'].createElement('span', { className: 'Select-clear', dangerouslySetInnerHTML: { __html: '&times;' } })
			);
		},

		renderArrow: function renderArrow() {
			return _react2['default'].createElement(
				'span',
				{ className: 'Select-arrow-zone', onMouseDown: this.handleMouseDownOnArrow },
				_react2['default'].createElement('span', { className: 'Select-arrow', onMouseDown: this.handleMouseDownOnArrow })
			);
		},

		filterOptions: function filterOptions(excludeOptions) {
			var _this3 = this;

			var filterValue = this.state.inputValue;
			var options = this.props.options || [];
			if (typeof this.props.filterOptions === 'function') {
				return this.props.filterOptions.call(this, options, filterValue, excludeOptions);
			} else if (this.props.filterOptions) {
				if (this.props.ignoreAccents) {
					filterValue = (0, _utilsStripDiacritics2['default'])(filterValue);
				}
				if (this.props.ignoreCase) {
					filterValue = filterValue.toLowerCase();
				}
				if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
					return i[_this3.props.valueKey];
				});
				return options.filter(function (option) {
					if (excludeOptions && excludeOptions.indexOf(option[_this3.props.valueKey]) > -1) return false;
					if (_this3.props.filterOption) return _this3.props.filterOption.call(_this3, option, filterValue);
					if (!filterValue) return true;
					var valueTest = String(option[_this3.props.valueKey]);
					var labelTest = String(option[_this3.props.labelKey]);
					if (_this3.props.ignoreAccents) {
						if (_this3.props.matchProp !== 'label') valueTest = (0, _utilsStripDiacritics2['default'])(valueTest);
						if (_this3.props.matchProp !== 'value') labelTest = (0, _utilsStripDiacritics2['default'])(labelTest);
					}
					if (_this3.props.ignoreCase) {
						if (_this3.props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
						if (_this3.props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
					}
					return _this3.props.matchPos === 'start' ? _this3.props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || _this3.props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : _this3.props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || _this3.props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
				});
			} else {
				return options;
			}
		},

		renderMenu: function renderMenu(options, valueArray, focusedOption) {
			var _this4 = this;

			if (options && options.length) {
				if (this.props.menuRenderer) {
					return this.props.menuRenderer({
						focusedOption: focusedOption,
						focusOption: this.focusOption,
						labelKey: this.props.labelKey,
						options: options,
						selectValue: this.selectValue,
						valueArray: valueArray
					});
				} else {
					var _ret = (function () {
						var Option = _this4.props.optionComponent;
						var renderLabel = _this4.props.optionRenderer || _this4.getOptionLabel;

						return {
							v: options.map(function (option, i) {
								var isSelected = valueArray && valueArray.indexOf(option) > -1;
								var isFocused = option === focusedOption;
								var optionRef = isFocused ? 'focused' : null;
								var optionClass = (0, _classnames2['default'])(_this4.props.optionClassName, {
									'Select-option': true,
									'is-selected': isSelected,
									'is-focused': isFocused,
									'is-disabled': option.disabled
								});

								return _react2['default'].createElement(
									Option,
									{
										className: optionClass,
										isDisabled: option.disabled,
										isFocused: isFocused,
										key: 'option-' + i + '-' + option[_this4.props.valueKey],
										onSelect: _this4.selectValue,
										onFocus: _this4.focusOption,
										option: option,
										isSelected: isSelected,
										ref: optionRef
									},
									renderLabel(option)
								);
							})
						};
					})();

					if (typeof _ret === 'object') return _ret.v;
				}
			} else if (this.props.noResultsText) {
				return _react2['default'].createElement(
					'div',
					{ className: 'Select-noresults' },
					this.props.noResultsText
				);
			} else {
				return null;
			}
		},

		renderHiddenField: function renderHiddenField(valueArray) {
			var _this5 = this;

			if (!this.props.name) return;
			if (this.props.joinValues) {
				var value = valueArray.map(function (i) {
					return stringifyValue(i[_this5.props.valueKey]);
				}).join(this.props.delimiter);
				return _react2['default'].createElement('input', {
					type: 'hidden',
					ref: 'value',
					name: this.props.name,
					value: value,
					disabled: this.props.disabled });
			}
			return valueArray.map(function (item, index) {
				return _react2['default'].createElement('input', { key: 'hidden.' + index,
					type: 'hidden',
					ref: 'value' + index,
					name: _this5.props.name,
					value: stringifyValue(item[_this5.props.valueKey]),
					disabled: _this5.props.disabled });
			});
		},

		getFocusableOption: function getFocusableOption(selectedOption) {
			var options = this._visibleOptions;
			if (!options.length) return;
			var focusedOption = this.state.focusedOption || selectedOption;
			if (focusedOption && options.indexOf(focusedOption) > -1) return focusedOption;
			for (var i = 0; i < options.length; i++) {
				if (!options[i].disabled) return options[i];
			}
		},

		render: function render() {
			var valueArray = this.getValueArray();
			var options = this._visibleOptions = this.filterOptions(this.props.multi ? valueArray : null);
			var isOpen = this.state.isOpen;
			if (this.props.multi && !options.length && valueArray.length && !this.state.inputValue) isOpen = false;
			var focusedOption = this._focusedOption = this.getFocusableOption(valueArray[0]);
			var className = (0, _classnames2['default'])('Select', this.props.className, {
				'Select--multi': this.props.multi,
				'is-disabled': this.props.disabled,
				'is-focused': this.state.isFocused,
				'is-loading': this.props.isLoading,
				'is-open': isOpen,
				'is-pseudo-focused': this.state.isPseudoFocused,
				'is-searchable': this.props.searchable,
				'has-value': valueArray.length
			});
			return _react2['default'].createElement(
				'div',
				{ ref: 'wrapper', className: className, style: this.props.wrapperStyle },
				this.renderHiddenField(valueArray),
				_react2['default'].createElement(
					'div',
					{ ref: 'control',
						className: 'Select-control',
						style: this.props.style,
						onKeyDown: this.handleKeyDown,
						onMouseDown: this.handleMouseDown,
						onTouchEnd: this.handleTouchEnd,
						onTouchStart: this.handleTouchStart,
						onTouchMove: this.handleTouchMove },
					this.renderValue(valueArray, isOpen),
					this.renderInput(valueArray),
					this.renderLoading(),
					this.renderClear(),
					this.renderArrow()
				),
				isOpen ? _react2['default'].createElement(
					'div',
					{ ref: 'menuContainer', className: 'Select-menu-outer', style: this.props.menuContainerStyle },
					_react2['default'].createElement(
						'div',
						{ ref: 'menu', className: 'Select-menu',
							style: this.props.menuStyle,
							onScroll: this.handleMenuScroll,
							onMouseDown: this.handleMouseDownOnMenu },
						this.renderMenu(options, !this.props.multi ? valueArray : null, focusedOption)
					)
				) : null
			);
		}

	});

	exports['default'] = Select;
	module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(1);

	var sizerStyle = { position: 'absolute', visibility: 'hidden', height: 0, width: 0, overflow: 'scroll', whiteSpace: 'pre' };

	var nextFrame = typeof window !== 'undefined' ? (function () {
		return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
			window.setTimeout(callback, 1000 / 60);
		};
	})().bind(window) : undefined; // If window is undefined, then we can't define a nextFrame function

	var AutosizeInput = React.createClass({
		displayName: 'AutosizeInput',

		propTypes: {
			value: React.PropTypes.any, // field value
			defaultValue: React.PropTypes.any, // default field value
			onChange: React.PropTypes.func, // onChange handler: function(newValue) {}
			style: React.PropTypes.object, // css styles for the outer element
			className: React.PropTypes.string, // className for the outer element
			minWidth: React.PropTypes.oneOfType([// minimum width for input element
			React.PropTypes.number, React.PropTypes.string]),
			inputStyle: React.PropTypes.object, // css styles for the input element
			inputClassName: React.PropTypes.string // className for the input element
		},
		getDefaultProps: function getDefaultProps() {
			return {
				minWidth: 1
			};
		},
		getInitialState: function getInitialState() {
			return {
				inputWidth: this.props.minWidth
			};
		},
		componentDidMount: function componentDidMount() {
			this.copyInputStyles();
			this.updateInputWidth();
		},
		componentDidUpdate: function componentDidUpdate() {
			this.queueUpdateInputWidth();
		},
		copyInputStyles: function copyInputStyles() {
			if (!this.isMounted() || !window.getComputedStyle) {
				return;
			}
			var inputStyle = window.getComputedStyle(this.refs.input);
			var widthNode = this.refs.sizer;
			widthNode.style.fontSize = inputStyle.fontSize;
			widthNode.style.fontFamily = inputStyle.fontFamily;
			widthNode.style.fontWeight = inputStyle.fontWeight;
			widthNode.style.fontStyle = inputStyle.fontStyle;
			widthNode.style.letterSpacing = inputStyle.letterSpacing;
			if (this.props.placeholder) {
				var placeholderNode = this.refs.placeholderSizer;
				placeholderNode.style.fontSize = inputStyle.fontSize;
				placeholderNode.style.fontFamily = inputStyle.fontFamily;
				placeholderNode.style.fontWeight = inputStyle.fontWeight;
				placeholderNode.style.fontStyle = inputStyle.fontStyle;
				placeholderNode.style.letterSpacing = inputStyle.letterSpacing;
			}
		},
		queueUpdateInputWidth: function queueUpdateInputWidth() {
			nextFrame(this.updateInputWidth);
		},
		updateInputWidth: function updateInputWidth() {
			if (!this.isMounted() || typeof this.refs.sizer.scrollWidth === 'undefined') {
				return;
			}
			var newInputWidth = undefined;
			if (this.props.placeholder) {
				newInputWidth = Math.max(this.refs.sizer.scrollWidth, this.refs.placeholderSizer.scrollWidth) + 2;
			} else {
				newInputWidth = this.refs.sizer.scrollWidth + 2;
			}
			if (newInputWidth < this.props.minWidth) {
				newInputWidth = this.props.minWidth;
			}
			if (newInputWidth !== this.state.inputWidth) {
				this.setState({
					inputWidth: newInputWidth
				});
			}
		},
		getInput: function getInput() {
			return this.refs.input;
		},
		focus: function focus() {
			this.refs.input.focus();
		},
		blur: function blur() {
			this.refs.input.blur();
		},
		select: function select() {
			this.refs.input.select();
		},
		render: function render() {
			var sizerValue = this.props.defaultValue || this.props.value || '';
			var wrapperStyle = this.props.style || {};
			if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';
			var inputStyle = _extends({}, this.props.inputStyle);
			inputStyle.width = this.state.inputWidth + 'px';
			inputStyle.boxSizing = 'content-box';
			var placeholder = this.props.placeholder ? React.createElement(
				'div',
				{ ref: 'placeholderSizer', style: sizerStyle },
				this.props.placeholder
			) : null;
			return React.createElement(
				'div',
				{ className: this.props.className, style: wrapperStyle },
				React.createElement('input', _extends({}, this.props, { ref: 'input', className: this.props.inputClassName, style: inputStyle })),
				React.createElement(
					'div',
					{ ref: 'sizer', style: sizerStyle },
					sizerValue
				),
				placeholder
			);
		}
	});

	module.exports = AutosizeInput;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 57 */
/***/ function(module, exports) {

	'use strict';

	var map = [{ 'base': 'A', 'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g }, { 'base': 'AA', 'letters': /[\uA732]/g }, { 'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g }, { 'base': 'AO', 'letters': /[\uA734]/g }, { 'base': 'AU', 'letters': /[\uA736]/g }, { 'base': 'AV', 'letters': /[\uA738\uA73A]/g }, { 'base': 'AY', 'letters': /[\uA73C]/g }, { 'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g }, { 'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g }, { 'base': 'D', 'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g }, { 'base': 'DZ', 'letters': /[\u01F1\u01C4]/g }, { 'base': 'Dz', 'letters': /[\u01F2\u01C5]/g }, { 'base': 'E', 'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g }, { 'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g }, { 'base': 'G', 'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g }, { 'base': 'H', 'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g }, { 'base': 'I', 'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g }, { 'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g }, { 'base': 'K', 'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g }, { 'base': 'L', 'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g }, { 'base': 'LJ', 'letters': /[\u01C7]/g }, { 'base': 'Lj', 'letters': /[\u01C8]/g }, { 'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g }, { 'base': 'N', 'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g }, { 'base': 'NJ', 'letters': /[\u01CA]/g }, { 'base': 'Nj', 'letters': /[\u01CB]/g }, { 'base': 'O', 'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g }, { 'base': 'OI', 'letters': /[\u01A2]/g }, { 'base': 'OO', 'letters': /[\uA74E]/g }, { 'base': 'OU', 'letters': /[\u0222]/g }, { 'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g }, { 'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g }, { 'base': 'R', 'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g }, { 'base': 'S', 'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g }, { 'base': 'T', 'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g }, { 'base': 'TZ', 'letters': /[\uA728]/g }, { 'base': 'U', 'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g }, { 'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g }, { 'base': 'VY', 'letters': /[\uA760]/g }, { 'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g }, { 'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g }, { 'base': 'Y', 'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g }, { 'base': 'Z', 'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g }, { 'base': 'a', 'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g }, { 'base': 'aa', 'letters': /[\uA733]/g }, { 'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g }, { 'base': 'ao', 'letters': /[\uA735]/g }, { 'base': 'au', 'letters': /[\uA737]/g }, { 'base': 'av', 'letters': /[\uA739\uA73B]/g }, { 'base': 'ay', 'letters': /[\uA73D]/g }, { 'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g }, { 'base': 'c', 'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g }, { 'base': 'd', 'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g }, { 'base': 'dz', 'letters': /[\u01F3\u01C6]/g }, { 'base': 'e', 'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g }, { 'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g }, { 'base': 'g', 'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g }, { 'base': 'h', 'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g }, { 'base': 'hv', 'letters': /[\u0195]/g }, { 'base': 'i', 'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g }, { 'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g }, { 'base': 'k', 'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g }, { 'base': 'l', 'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g }, { 'base': 'lj', 'letters': /[\u01C9]/g }, { 'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g }, { 'base': 'n', 'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g }, { 'base': 'nj', 'letters': /[\u01CC]/g }, { 'base': 'o', 'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g }, { 'base': 'oi', 'letters': /[\u01A3]/g }, { 'base': 'ou', 'letters': /[\u0223]/g }, { 'base': 'oo', 'letters': /[\uA74F]/g }, { 'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g }, { 'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g }, { 'base': 'r', 'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g }, { 'base': 's', 'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g }, { 'base': 't', 'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g }, { 'base': 'tz', 'letters': /[\uA729]/g }, { 'base': 'u', 'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g }, { 'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g }, { 'base': 'vy', 'letters': /[\uA761]/g }, { 'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g }, { 'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g }, { 'base': 'y', 'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g }, { 'base': 'z', 'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }];

	module.exports = function stripDiacritics(str) {
		for (var i = 0; i < map.length; i++) {
			str = str.replace(map[i].letters, map[i].base);
		}
		return str;
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(54);

	var _Select2 = _interopRequireDefault(_Select);

	var _utilsStripDiacritics = __webpack_require__(57);

	var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);

	var requestId = 0;

	function initCache(cache) {
		if (cache && typeof cache !== 'object') {
			cache = {};
		}
		return cache ? cache : null;
	}

	function updateCache(cache, input, data) {
		if (!cache) return;
		cache[input] = data;
	}

	function getFromCache(cache, input) {
		if (!cache) return;
		for (var i = input.length; i >= 0; --i) {
			var cacheKey = input.slice(0, i);
			if (cache[cacheKey] && (input === cacheKey || cache[cacheKey].complete)) {
				return cache[cacheKey];
			}
		}
	}

	function thenPromise(promise, callback) {
		if (!promise || typeof promise.then !== 'function') return;
		return promise.then(function (data) {
			callback(null, data);
		}, function (err) {
			callback(err);
		});
	}

	var stringOrNode = _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]);

	var Async = _react2['default'].createClass({
		displayName: 'Async',

		propTypes: {
			cache: _react2['default'].PropTypes.any, // object to use to cache results, can be null to disable cache
			ignoreAccents: _react2['default'].PropTypes.bool, // whether to strip diacritics when filtering (shared with Select)
			ignoreCase: _react2['default'].PropTypes.bool, // whether to perform case-insensitive filtering (shared with Select)
			isLoading: _react2['default'].PropTypes.bool, // overrides the isLoading state when set to true
			loadOptions: _react2['default'].PropTypes.func.isRequired, // function to call to load options asynchronously
			loadingPlaceholder: _react2['default'].PropTypes.string, // replaces the placeholder while options are loading
			minimumInput: _react2['default'].PropTypes.number, // the minimum number of characters that trigger loadOptions
			noResultsText: _react2['default'].PropTypes.string, // placeholder displayed when there are no matching search results (shared with Select)
			placeholder: stringOrNode, // field placeholder, displayed when there's no value (shared with Select)
			searchPromptText: _react2['default'].PropTypes.string, // label to prompt for search input
			searchingText: _react2['default'].PropTypes.string },
		// message to display while options are loading
		getDefaultProps: function getDefaultProps() {
			return {
				cache: true,
				ignoreAccents: true,
				ignoreCase: true,
				loadingPlaceholder: 'Loading...',
				minimumInput: 0,
				searchingText: 'Searching...',
				searchPromptText: 'Type to search'
			};
		},
		getInitialState: function getInitialState() {
			return {
				cache: initCache(this.props.cache),
				isLoading: false,
				options: []
			};
		},
		componentWillMount: function componentWillMount() {
			this._lastInput = '';
		},
		componentDidMount: function componentDidMount() {
			this.loadOptions('');
		},
		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			if (nextProps.cache !== this.props.cache) {
				this.setState({
					cache: initCache(nextProps.cache)
				});
			}
		},
		focus: function focus() {
			this.refs.select.focus();
		},
		resetState: function resetState() {
			this._currentRequestId = -1;
			this.setState({
				isLoading: false,
				options: []
			});
		},
		getResponseHandler: function getResponseHandler(input) {
			var _this = this;

			var _requestId = this._currentRequestId = requestId++;
			return function (err, data) {
				if (err) throw err;
				if (!_this.isMounted()) return;
				updateCache(_this.state.cache, input, data);
				if (_requestId !== _this._currentRequestId) return;
				_this.setState({
					isLoading: false,
					options: data && data.options || []
				});
			};
		},
		loadOptions: function loadOptions(input) {
			if (this.props.ignoreAccents) input = (0, _utilsStripDiacritics2['default'])(input);
			if (this.props.ignoreCase) input = input.toLowerCase();
			this._lastInput = input;
			if (input.length < this.props.minimumInput) {
				return this.resetState();
			}
			var cacheResult = getFromCache(this.state.cache, input);
			if (cacheResult) {
				return this.setState({
					options: cacheResult.options
				});
			}
			this.setState({
				isLoading: true
			});
			var responseHandler = this.getResponseHandler(input);
			return thenPromise(this.props.loadOptions(input, responseHandler), responseHandler);
		},
		render: function render() {
			var noResultsText = this.props.noResultsText;
			var _state = this.state;
			var isLoading = _state.isLoading;
			var options = _state.options;

			if (this.props.isLoading) isLoading = true;
			var placeholder = isLoading ? this.props.loadingPlaceholder : this.props.placeholder;
			if (!options.length) {
				if (this._lastInput.length < this.props.minimumInput) noResultsText = this.props.searchPromptText;
				if (isLoading) noResultsText = this.props.searchingText;
			}
			return _react2['default'].createElement(_Select2['default'], _extends({}, this.props, {
				ref: 'select',
				isLoading: isLoading,
				noResultsText: noResultsText,
				onInputChange: this.loadOptions,
				options: options,
				placeholder: placeholder
			}));
		}
	});

	module.exports = Async;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(56);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Option = _react2['default'].createClass({
		displayName: 'Option',

		propTypes: {
			children: _react2['default'].PropTypes.node,
			className: _react2['default'].PropTypes.string, // className (based on mouse position)
			isDisabled: _react2['default'].PropTypes.bool, // the option is disabled
			isFocused: _react2['default'].PropTypes.bool, // the option is focused
			isSelected: _react2['default'].PropTypes.bool, // the option is selected
			onFocus: _react2['default'].PropTypes.func, // method to handle mouseEnter on option element
			onSelect: _react2['default'].PropTypes.func, // method to handle click on option element
			onUnfocus: _react2['default'].PropTypes.func, // method to handle mouseLeave on option element
			option: _react2['default'].PropTypes.object.isRequired },
		// object that is base for that option
		blockEvent: function blockEvent(event) {
			event.preventDefault();
			event.stopPropagation();
			if (event.target.tagName !== 'A' || !('href' in event.target)) {
				return;
			}
			if (event.target.target) {
				window.open(event.target.href, event.target.target);
			} else {
				window.location.href = event.target.href;
			}
		},

		handleMouseDown: function handleMouseDown(event) {
			event.preventDefault();
			event.stopPropagation();
			this.props.onSelect(this.props.option, event);
		},

		handleMouseEnter: function handleMouseEnter(event) {
			this.onFocus(event);
		},

		handleMouseMove: function handleMouseMove(event) {
			this.onFocus(event);
		},

		handleTouchEnd: function handleTouchEnd(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			this.handleMouseDown(event);
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		onFocus: function onFocus(event) {
			if (!this.props.isFocused) {
				this.props.onFocus(this.props.option, event);
			}
		},
		render: function render() {
			var option = this.props.option;

			var className = (0, _classnames2['default'])(this.props.className, option.className);

			return option.disabled ? _react2['default'].createElement(
				'div',
				{ className: className,
					onMouseDown: this.blockEvent,
					onClick: this.blockEvent },
				this.props.children
			) : _react2['default'].createElement(
				'div',
				{ className: className,
					style: option.style,
					onMouseDown: this.handleMouseDown,
					onMouseEnter: this.handleMouseEnter,
					onMouseMove: this.handleMouseMove,
					onTouchStart: this.handleTouchStart,
					onTouchMove: this.handleTouchMove,
					onTouchEnd: this.handleTouchEnd,
					title: option.title },
				this.props.children
			);
		}
	});

	module.exports = Option;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(56);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Value = _react2['default'].createClass({

		displayName: 'Value',

		propTypes: {
			children: _react2['default'].PropTypes.node,
			disabled: _react2['default'].PropTypes.bool, // disabled prop passed to ReactSelect
			onClick: _react2['default'].PropTypes.func, // method to handle click on value label
			onRemove: _react2['default'].PropTypes.func, // method to handle removal of the value
			value: _react2['default'].PropTypes.object.isRequired },

		// the option object for this value
		handleMouseDown: function handleMouseDown(event) {
			if (event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			if (this.props.onClick) {
				event.stopPropagation();
				this.props.onClick(this.props.value, event);
				return;
			}
			if (this.props.value.href) {
				event.stopPropagation();
			}
		},

		onRemove: function onRemove(event) {
			event.preventDefault();
			event.stopPropagation();
			this.props.onRemove(this.props.value);
		},

		handleTouchEndRemove: function handleTouchEndRemove(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Fire the mouse events
			this.onRemove(event);
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		renderRemoveIcon: function renderRemoveIcon() {
			if (this.props.disabled || !this.props.onRemove) return;
			return _react2['default'].createElement(
				'span',
				{ className: 'Select-value-icon',
					onMouseDown: this.onRemove,
					onTouchEnd: this.handleTouchEndRemove,
					onTouchStart: this.handleTouchStart,
					onTouchMove: this.handleTouchMove },
				'×'
			);
		},

		renderLabel: function renderLabel() {
			var className = 'Select-value-label';
			return this.props.onClick || this.props.value.href ? _react2['default'].createElement(
				'a',
				{ className: className, href: this.props.value.href, target: this.props.value.target, onMouseDown: this.handleMouseDown, onTouchEnd: this.handleMouseDown },
				this.props.children
			) : _react2['default'].createElement(
				'span',
				{ className: className },
				this.props.children
			);
		},

		render: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: (0, _classnames2['default'])('Select-value', this.props.value.className),
					style: this.props.value.style,
					title: this.props.value.title
				},
				this.renderRemoveIcon(),
				this.renderLabel()
			);
		}

	});

	module.exports = Value;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// AnswerFeedback.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var $s = __webpack_require__(29);

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var CKEditorModalHack = __webpack_require__(30);
	var ConfigureCKEditor = __webpack_require__(33);
	var ConvertLibraryId2RepositoryId = __webpack_require__(34);
	var Dispatcher = __webpack_require__(9);
	var LibraryItemsStore = __webpack_require__(8);
	var MiddlewareService = __webpack_require__(17);
	var WrapHTML = __webpack_require__(62);

	var AnswerFeedback = React.createClass({
	    displayName: 'AnswerFeedback',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    close: function close() {
	        this.setState({ showModal: false });
	    },
	    initializeEditors: function initializeEditors(e) {
	        var repositoryId = ConvertLibraryId2RepositoryId(this.props.libraryId),
	            _this = this;

	        // CKEditor
	        // Instructions from here
	        // http://stackoverflow.com/questions/29703324/how-to-use-ckeditor-as-an-npm-module-built-with-webpack-or-similar
	        CKEditorModalHack();
	        $s(MiddlewareService.ckEditor(), function () {
	            ConfigureCKEditor(CKEDITOR, repositoryId);
	            _this.initializeEditorInstance('feedback');
	        });
	    },
	    initializeEditorInstance: function initializeEditorInstance(instance) {
	        $s(MiddlewareService.ckEditor(), function () {
	            CKEDITOR.replace(instance);
	        });
	    },
	    onChange: function onChange(e) {
	        // do nothing, since we have to grab the data from CKEditor
	    },
	    open: function open(e) {
	        e.stopPropagation();
	        this.setState({ showModal: true }, function () {});
	    },
	    save: function save() {
	        var feedback = CKEDITOR.instances.feedback.getData(),
	            payload = {
	            itemId: this.props.itemId,
	            libraryId: this.props.libraryId
	        };

	        if (feedback != this.props.feedback) {
	            payload['answers'] = [{
	                answerId: this.props.answerId,
	                feedback: feedback
	            }];

	            Dispatcher.dispatch({
	                type: ActionTypes.UPDATE_ITEM,
	                content: payload
	            });
	            this.close();
	        }
	    },
	    render: function render() {
	        var title = "Solution Explanation for: " + this.props.feedbackSource;
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open,
	                    title: 'Edit Feedback' },
	                'Solution Explanation'
	            ),
	            React.createElement(
	                Modal,
	                { backdrop: 'static',
	                    bsSize: 'lg', show: this.state.showModal,
	                    onHide: this.close,
	                    onEntered: this.initializeEditors },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        title
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        FormGroup,
	                        { controlId: 'feedback' },
	                        React.createElement(FormControl, { componentClass: 'textarea',
	                            value: this.props.feedback,
	                            onChange: this.onChange,
	                            placeholder: title })
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { onClick: this.close },
	                        'Close'
	                    ),
	                    React.createElement(
	                        Button,
	                        { onClick: this.save, bsStyle: 'success' },
	                        'Save'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = AnswerFeedback;

/***/ },
/* 62 */
/***/ function(module, exports) {

	// WrapHTML.js
	'use strict';

	var WrapHTML = function (str) {
	    var wrappedStr;
	//    if (str.indexOf("math-tex") >= 0) {
	    wrappedStr = '<html>' +
	        '<head>' +
	        '<script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>' +
	        '<style>body * {margin:0px;padding:4px;}</style>' +
	        '</head>' +
	        '<body style="margin:0px;">' + str + '</body>' +
	        '</html>';
	//    } else {
	//        wrappedStr = '<html>' +
	//            '<head>' +
	//            '<style>body * {margin:0px;padding:4px;}</style>' +
	//            '</head>' +
	//            '<body style="margin:0px;">' + str + '</body>' +
	//            '</html>';
	//    }

	    return wrappedStr;
	};

	module.exports = WrapHTML;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// AnswerFeedbackPreviewBtn.jsx
	'use strict';

	__webpack_require__(64);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Button = ReactBS.Button;

	var SetIFrameHeight = __webpack_require__(66);
	var WrapHTML = __webpack_require__(62);

	var AnswerFeedbackPreviewBtn = React.createClass({
	  displayName: 'AnswerFeedbackPreviewBtn',

	  getInitialState: function getInitialState() {
	    return {};
	  },
	  toggle: function toggle(e) {
	    e.stopPropagation();
	    this.props.togglePreview();
	  },
	  render: function render() {
	    return React.createElement(
	      'div',
	      { className: 'answer-feedback-preview' },
	      React.createElement(
	        Button,
	        { onClick: this.toggle,
	          title: 'Preview Solution Explanation' },
	        'Preview Solution Explanation'
	      )
	    );
	  }
	});

	module.exports = AnswerFeedbackPreviewBtn;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(65);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./AnswerFeedbackPreviewBtn.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./AnswerFeedbackPreviewBtn.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".answer-feedback-preview button {\n  height: 34px;\n  margin-left: 5px;\n  margin-right: 5px;\n}", ""]);

	// exports


/***/ },
/* 66 */
/***/ function(module, exports) {

	// SetIFrameHeight.js
	'use strict';

	var SetIFrameHeight = function (frame) {
	    // fix iFrame height
	    // per http://www.dyn-web.com/tutorials/iframes/height/
	    function getDocHeight(doc) {
	        doc = doc || document;
	        // stackoverflow.com/questions/1145850/
	        var body = doc.body, html = doc.documentElement;
	        var height = Math.max( body.scrollHeight, body.offsetHeight,
	            html.clientHeight, html.scrollHeight, html.offsetHeight );
	        return height;
	    }
	    function setIframeHeight(ifrm) {
	        var doc = ifrm.contentDocument? ifrm.contentDocument:
	            ifrm.contentWindow.document;
	        ifrm.style.visibility = 'hidden';
	        ifrm.style.height = "10px"; // reset to minimal height ...
	        // IE opt. for bing/msn needs a bit added or scrollbar appears
	        ifrm.style.height = getDocHeight( doc ) + 4 + "px";
	        ifrm.style.visibility = 'visible';
	    }

	    // this seems hacky...but without the timeout
	    // it sets the height before the iframe content
	    // has fully rendered, making the height 10px;
	    window.setTimeout(function () {
	        try {
	            setIframeHeight(frame);
	        } catch (e) {
	            //console.log('iFrame disappeared before it could be re-sized.');
	        }
	    }, 1000);
	};

	module.exports = SetIFrameHeight;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// ItemControls.js

	'use strict';

	var React = __webpack_require__(1);

	var CopyItem = __webpack_require__(68);
	var DeleteItem = __webpack_require__(69);
	var EditItem = __webpack_require__(70);
	var TransferItem = __webpack_require__(74);

	var ItemControls = React.createClass({
	  displayName: 'ItemControls',

	  getInitialState: function getInitialState() {
	    return {};
	  },
	  componentWillMount: function componentWillMount() {},
	  componentDidMount: function componentDidMount() {},
	  render: function render() {
	    return React.createElement(
	      'div',
	      null,
	      React.createElement(CopyItem, { item: this.props.item,
	        libraryId: this.props.libraryId }),
	      React.createElement(TransferItem, { item: this.props.item,
	        libraries: this.props.libraries,
	        libraryId: this.props.libraryId }),
	      React.createElement(EditItem, { item: this.props.item,
	        libraryId: this.props.libraryId }),
	      React.createElement(DeleteItem, { item: this.props.item,
	        libraryId: this.props.libraryId })
	    );
	  }
	});

	module.exports = ItemControls;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// CopyItem.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Button = ReactBS.Button;
	var Glyphicon = ReactBS.Glyphicon;

	var $s = __webpack_require__(29);

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var AnswerExtraction = __webpack_require__(48);
	var Dispatcher = __webpack_require__(9);
	var GenusTypes = __webpack_require__(14).GenusTypes;
	var LibraryItemsStore = __webpack_require__(8);
	var MiddlewareService = __webpack_require__(17);

	var CopyItem = React.createClass({
	  displayName: 'CopyItem',

	  getInitialState: function getInitialState() {
	    return {};
	  },
	  componentWillMount: function componentWillMount() {},
	  componentDidUpdate: function componentDidUpdate() {},
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
	  copyItem: function copyItem(e) {
	    e.stopPropagation();

	    var payload = {
	      itemType: 'multiple-choice',
	      libraryId: this.props.libraryId,
	      provenanceId: this.props.item.id
	    },
	        originalItem = this.props.item,
	        choiceData = AnswerExtraction(this.props.item);

	    payload['displayName'] = 'Copy of ' + originalItem.displayName.text;
	    payload['description'] = originalItem.description.text;

	    payload['question'] = {
	      text: originalItem.question.text.text,
	      choices: [choiceData.correctAnswerText]
	    };
	    payload['learningObjectiveId'] = originalItem.learningObjectiveIds[0];

	    payload['answers'] = [{
	      choiceId: 0,
	      feedback: choiceData.correctAnswerFeedback,
	      genusTypeId: GenusTypes.CORRECT_ANSWER
	    }];

	    _.each(choiceData.wrongAnswerTexts, function (wrongAnswerText, index) {
	      var wrongChoiceId = index + 1,
	          // because right answer is already there
	      wrongChoiceFeedback = choiceData.wrongAnswerFeedbacks[index],
	          wrongChoiceLO = choiceData.wrongAnswerLOs[index];

	      payload.question.choices.push(wrongAnswerText);

	      payload.answers.push({
	        choiceId: wrongChoiceId,
	        feedback: wrongChoiceFeedback,
	        genusTypeId: GenusTypes.WRONG_ANSWER,
	        learningObjectiveId: wrongChoiceLO
	      });
	    });

	    Dispatcher.dispatch({
	      type: ActionTypes.CREATE_ITEM,
	      content: payload
	    });
	  },
	  render: function render() {
	    return React.createElement(
	      'span',
	      null,
	      React.createElement(
	        Button,
	        { onClick: this.copyItem,
	          bsSize: 'large',
	          title: 'Copy Item' },
	        React.createElement(Glyphicon, { glyph: 'copy' })
	      )
	    );
	  }
	});

	module.exports = CopyItem;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// DeleteItem.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Button = ReactBS.Button;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;
	var ActionTypes = __webpack_require__(14).ActionTypes;
	var dispatcher = __webpack_require__(9);

	var DeleteItem = React.createClass({
	    displayName: 'DeleteItem',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    close: function close() {
	        this.setState({ showModal: false });
	    },
	    open: function open(e) {
	        e.stopPropagation();
	        this.setState({ showModal: true }, function () {});
	    },
	    save: function save(e) {
	        dispatcher.dispatch({
	            type: ActionTypes.DELETE_ITEM,
	            content: {
	                itemId: this.props.item.id,
	                libraryId: this.props.libraryId
	            }
	        });
	        this.close();
	    },
	    render: function render() {
	        return React.createElement(
	            'span',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open,
	                    bsSize: 'large',
	                    title: 'Delete Item' },
	                React.createElement(Glyphicon, { glyph: 'trash' })
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Delete Item'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'div',
	                        null,
	                        React.createElement(
	                            'span',
	                            { className: 'red' },
	                            'Are you sure you want to delete ',
	                            this.props.item.displayName.text,
	                            '?'
	                        ),
	                        React.createElement(
	                            'p',
	                            null,
	                            'This action ',
	                            React.createElement(
	                                'strong',
	                                null,
	                                'CANNOT'
	                            ),
	                            ' be undone!'
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'success', onClick: this.close },
	                        'Cancel'
	                    ),
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'danger', onClick: this.save },
	                        'Delete'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = DeleteItem;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// EditItem.jsx
	'use strict';

	__webpack_require__(71);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Button = ReactBS.Button;
	var Glyphicon = ReactBS.Glyphicon;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var EditMultipleChoice = __webpack_require__(73);
	var GenusTypes = __webpack_require__(14).GenusTypes;

	var EditItem = React.createClass({
	    displayName: 'EditItem',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({ showModal: false });
	    },
	    open: function open(e) {
	        e.stopPropagation();
	        this.setState({ showModal: true });
	    },
	    render: function render() {
	        var questionForm = '';

	        if (this.props.item.question.genusTypeId === GenusTypes.MC_QUESTION) {
	            questionForm = React.createElement(EditMultipleChoice, { close: this.close,
	                item: this.props.item,
	                libraryId: this.props.libraryId,
	                showModal: this.state.showModal });
	        }

	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open,
	                    bsSize: 'large',
	                    title: 'Edit Item' },
	                React.createElement(Glyphicon, { glyph: 'pencil' })
	            ),
	            questionForm
	        );
	    }
	});

	module.exports = EditItem;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(72);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./EditItem.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./EditItem.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".has-error > .cke_chrome {\n    border-color: #a94442;\n}\n\n.image-preview {\n    display: flex;\n}\n\n.image-preview img {\n    max-width: 400px;\n    max-height: 300px;\n}\n\n.image-controls {\n    display: flex;\n    flex-direction: column;\n}\n\n.image-controls button {\n    height: 34px;\n}", ""]);

	// exports


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// EditMultipleChoice.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var ListGroup = ReactBS.ListGroup;
	var Modal = ReactBS.Modal;

	var $s = __webpack_require__(29);

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var AnswerExtraction = __webpack_require__(48);
	var CKEditorModalHack = __webpack_require__(30);
	var ConfigureCKEditor = __webpack_require__(33);
	var ConvertLibraryId2RepositoryId = __webpack_require__(34);
	var Dispatcher = __webpack_require__(9);
	var GenusTypes = __webpack_require__(14).GenusTypes;
	var LibraryItemsStore = __webpack_require__(8);
	var MiddlewareService = __webpack_require__(17);
	var WrongAnswerEditor = __webpack_require__(35);

	var EditMultipleChoice = React.createClass({
	    displayName: 'EditMultipleChoice',

	    getInitialState: function getInitialState() {
	        var me = this.props.item,
	            answers = AnswerExtraction(me),
	            wrongAnswerErrors = [];

	        _.each(answers.wrongAnswers, function (wrongAnswer) {
	            wrongAnswerErrors.push(false);
	        });

	        return {
	            correctAnswer: answers.correctAnswerText.text,
	            correctAnswerError: false,
	            correctAnswerId: answers.correctAnswerId,
	            correctAnswerFeedback: answers.correctAnswerFeedback,
	            itemDescription: me.description.text,
	            itemDisplayName: me.displayName.text,
	            itemDisplayNameError: false,
	            newWrongAnswerIndices: [],
	            questionString: me.question.text.text,
	            questionStringError: false,
	            removedAnswerIds: [],
	            removedChoiceIds: [],
	            showAlert: false,
	            wrongAnswers: answers.wrongAnswerTexts,
	            wrongAnswerErrors: wrongAnswerErrors,
	            wrongAnswerIds: answers.wrongAnswerIds,
	            wrongAnswerFeedbacks: answers.wrongAnswerFeedbacks,
	            wrongChoiceIds: answers.wrongChoiceIds
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        setTimeout(this.checkNewEditorInstances, 500);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        this.checkState(nextProps);
	    },
	    addWrongAnswer: function addWrongAnswer() {
	        var newIndex = this.state.wrongAnswers.length + 1;
	        this.setState({ wrongAnswers: this.state.wrongAnswers.concat(['']) });
	        this.setState({ wrongAnswerErrors: this.state.wrongAnswerErrors.concat([false]) });
	        this.setState({ wrongAnswerFeedbacks: this.state.wrongAnswerFeedbacks.concat(['']) });

	        this.setState({ newWrongAnswerIndices: [newIndex] });
	    },
	    checkNewEditorInstances: function checkNewEditorInstances() {
	        if (this.state.newWrongAnswerIndices.length > 0) {
	            this.initializeNewEditorInstances();
	        }
	    },
	    checkState: function checkState(nextProps) {
	        var me = nextProps.item,
	            answers = AnswerExtraction(me),
	            wrongAnswerFeedbacks = [];

	        if (answers.correctAnswerFeedback != this.state.correctAnswerFeedback) {
	            this.setState({ correctAnswerFeedback: answers.correctAnswerFeedback });
	        }

	        _.each(answers.wrongAnswerFeedbacks, function (feedback) {
	            wrongAnswerFeedbacks.push(feedback);
	        });

	        if (wrongAnswerFeedbacks != this.state.wrongAnswerFeedbacks) {
	            this.setState({ wrongAnswerFeedbacks: wrongAnswerFeedbacks });
	        }

	        if (answers.correctAnswerText.text != this.state.correctAnswer) {
	            this.setState({ correctAnswer: answers.correctAnswerText.text });
	        }

	        if (answers.correctAnswerId != this.state.correctAnswerId) {
	            this.setState({ correctAnswerId: answers.correctAnswerId });
	        }

	        if (me.description.text != this.state.itemDescription) {
	            this.setState({ itemDescription: me.description.text });
	        }

	        if (me.displayName.text != this.state.itemDisplayName) {
	            this.setState({ itemDisplayName: me.displayName.text });
	        }

	        if (me.question.text.text != this.state.questionString) {
	            this.setState({ questionString: me.question.text.text });
	        }

	        if (answers.wrongAnswerTexts != this.state.wrongAnswers) {
	            this.setState({ wrongAnswers: answers.wrongAnswerTexts });
	        }

	        if (answers.wrongAnswerIds != this.state.wrongAnswerIds) {
	            this.setState({ wrongAnswerIds: answers.wrongAnswerIds });
	        }

	        if (answers.wrongChoiceIds != this.state.wrongChoiceIds) {
	            this.setState({ wrongChoiceIds: answers.wrongChoiceIds });
	        }
	    },
	    close: function close() {
	        this.props.close();
	    },
	    closeAndReset: function closeAndReset() {
	        this.reset();
	        this.close();
	    },
	    formatWrongAnswers: function formatWrongAnswers() {
	        var _this = this;
	        return _.map(this.state.wrongAnswers, function (wrongAnswer, index) {
	            var errorState = _this.state.wrongAnswerErrors[index],
	                feedback = _this.state.wrongAnswerFeedbacks[index],
	                answerId = _this.state.wrongAnswerIds[index],
	                choiceId = _this.state.wrongChoiceIds[index],
	                key = typeof answerId === 'undefined' ? index : answerId;

	            return React.createElement(WrongAnswerEditor, { answerId: answerId,
	                choiceId: choiceId,
	                error: errorState,
	                feedback: feedback,
	                index: index,
	                key: key,
	                remove: _this.removeWrongAnswer,
	                text: wrongAnswer.text });
	        });
	    },
	    getWrongAnswerChoiceIds: function getWrongAnswerChoiceIds() {
	        var results = [];
	        _.each(this.refs.wrongAnswers.props.children, function (wrongAnswerEditor) {
	            if (wrongAnswerEditor.props.choiceId !== 'undefined') {
	                results.push(wrongAnswerEditor.props.choiceId);
	            } else {
	                results.push(null);
	            }
	        });

	        return results;
	    },
	    getWrongAnswerEditorIds: function getWrongAnswerEditorIds() {
	        var results = [];
	        _.each(this.refs.wrongAnswers.props.children, function (wrongAnswerEditor) {
	            if (wrongAnswerEditor.key !== 'undefined') {
	                results.push(wrongAnswerEditor.key);
	            } else {
	                results.push(null);
	            }
	        });

	        return results;
	    },
	    getWrongAnswerFeedbacks: function getWrongAnswerFeedbacks() {
	        var results = [];

	        _.each(this.refs.wrongAnswers.props.children, function (wrongAnswerEditor, index) {
	            var visibleIndex = index + 1,
	                editorInstance = 'wrongAnswer' + visibleIndex,
	                feedbackEditor = editorInstance + 'Feedback';
	            results.push(CKEDITOR.instances[feedbackEditor].getData());
	        });

	        return results;
	    },
	    getWrongAnswers: function getWrongAnswers() {
	        var results = [];
	        _.each(this.refs.wrongAnswers.props.children, function (wrongAnswerEditor, index) {
	            var visibleIndex = index + 1,
	                editorInstance = 'wrongAnswer' + visibleIndex;
	            results.push(CKEDITOR.instances[editorInstance].getData());
	        });

	        return results;
	    },
	    initializeEditorInstance: function initializeEditorInstance(instance) {
	        $s(MiddlewareService.ckEditor(), function () {
	            CKEDITOR.replace(instance);
	        });
	    },
	    initializeEditors: function initializeEditors(e) {
	        var repositoryId = ConvertLibraryId2RepositoryId(this.props.libraryId),
	            _this = this;

	        // CKEditor
	        // Instructions from here
	        // http://stackoverflow.com/questions/29703324/how-to-use-ckeditor-as-an-npm-module-built-with-webpack-or-similar
	        CKEditorModalHack();
	        $s(MiddlewareService.ckEditor(), function () {
	            ConfigureCKEditor(CKEDITOR, repositoryId);
	            _this.initializeEditorInstance('correctAnswer');
	            _this.initializeEditorInstance('correctAnswerFeedback');
	            _this.initializeEditorInstance('questionString');

	            _.each(_this.state.wrongAnswers, function (wrongAnswer, index) {
	                var visibleIndex = index + 1,
	                    editorInstance = 'wrongAnswer' + visibleIndex,
	                    feedbackInstance = editorInstance + 'Feedback';

	                _this.initializeEditorInstance(editorInstance);
	                _this.initializeEditorInstance(feedbackInstance);
	            });
	        });
	    },
	    initializeNewEditorInstances: function initializeNewEditorInstances() {
	        var _this = this;
	        _.each(this.state.newWrongAnswerIndices, function (index) {
	            var visibleIndex = index,
	                editorInstance = 'wrongAnswer' + visibleIndex,
	                feedbackInstance = editorInstance + 'Feedback';

	            _this.initializeEditorInstance(editorInstance);
	            _this.initializeEditorInstance(feedbackInstance);
	        });

	        this.setState({ newWrongAnswerIndices: [] });
	    },
	    onChange: function onChange(e) {
	        var inputId = e.currentTarget.id,
	            inputValue = e.target.value,
	            update = {};

	        update[inputId] = inputValue;
	        this.setState(update);
	    },
	    removeWrongAnswer: function removeWrongAnswer(index) {
	        // remove wrong answer & feedback & errors with the given index
	        // will also have to remove this from the actual item...
	        // so store the choiceId + answerId in the component

	        var editorInstance = 'wrongAnswer' + (index + 1),
	            feedbackEditor = editorInstance + 'Feedback',
	            wrongAnswerId = this.state.wrongAnswerIds[index],
	            wrongChoiceId = this.state.wrongChoiceIds[index],
	            updatedWrongAnswers = this.state.wrongAnswers,
	            updatedWrongAnswerErrors = this.state.wrongAnswerErrors,
	            updatedWrongAnswerFeedbacks = this.state.wrongAnswerFeedbacks,
	            updatedWrongAnswerIds = this.state.wrongAnswerIds,
	            updatedWrongChoiceIds = this.state.wrongChoiceIds,
	            _this = this;

	        // need to remove the CKEditor instances on wrongAnswers
	        // before React re-renders the DOM, otherwise the instance
	        // values won't match, i.e. wrongAnswer1 will have CKEditor instance wrongAnswer2
	        _.each(this.state.wrongAnswers, function (wrongAnswer, index) {
	            var remainingInstance = 'wrongAnswer' + (index + 1),
	                feedbackInstance = remainingInstance + 'Feedback';
	            CKEDITOR.instances[remainingInstance].destroy();
	            CKEDITOR.instances[feedbackInstance].destroy();
	        });

	        updatedWrongAnswers.splice(index, 1);
	        updatedWrongAnswerErrors.splice(index, 1);
	        updatedWrongAnswerFeedbacks.splice(index, 1);
	        updatedWrongAnswerIds.splice(index, 1);
	        updatedWrongChoiceIds.splice(index, 1);

	        this.setState({ wrongAnswers: updatedWrongAnswers });
	        this.setState({ wrongAnswerErrors: updatedWrongAnswerErrors });
	        this.setState({ wrongAnswerFeedbacks: updatedWrongAnswerFeedbacks });
	        this.setState({ wrongAnswerIds: updatedWrongAnswerIds });
	        this.setState({ wrongChoiceIds: updatedWrongChoiceIds });

	        this.setState({ removedAnswerIds: this.state.removedAnswerIds.concat(wrongAnswerId) });
	        this.setState({ removedChoiceIds: this.state.removedChoiceIds.concat(wrongChoiceId) });

	        if (this.state.wrongAnswers.length === 0) {
	            this.setState({ wrongAnswers: [''] });
	            this.setState({ wrongAnswerErrors: [false] });
	            this.setState({ wrongAnswerFeedbacks: [''] });
	        }

	        // can we re-add the CKEditors here? Is that enough time?
	        setTimeout(function () {
	            _.each(_this.state.wrongAnswers, function (wrongAnswer, index) {
	                var remainingInstance = 'wrongAnswer' + (index + 1),
	                    feedbackInstance = remainingInstance + 'Feedback';
	                CKEDITOR.replace(remainingInstance);
	                CKEDITOR.replace(feedbackInstance);
	            });
	        }, 250);
	    },
	    reset: function reset() {
	        var me = this.props.item,
	            answers = AnswerExtraction(me),
	            wrongAnswerErrors = [];

	        _.each(answers.wrongAnswers, function (wrongAnswer) {
	            wrongAnswerErrors.push(false);
	        });

	        this.setState({ correctAnswer: answers.correctAnswerText.text });
	        this.setState({ correctAnswerError: false });
	        this.setState({ correctAnswerId: answers.correctAnswerId });
	        this.setState({ correctAnswerFeedback: answers.correctAnswerFeedback });
	        this.setState({ itemDescription: me.description.text });
	        this.setState({ itemDisplayName: me.displayName.text });
	        this.setState({ itemDisplayNameError: false });
	        this.setState({ questionString: me.question.text.text });
	        this.setState({ questionStringError: false });
	        this.setState({ removedAnswerIds: [] });
	        this.setState({ removedChoiceIds: [] });
	        this.setState({ showAlert: false });
	        this.setState({ wrongAnswers: answers.wrongAnswerTexts });
	        this.setState({ wrongAnswerErrors: wrongAnswerErrors });
	        this.setState({ wrongAnswerIds: answers.wrongAnswerIds });
	        this.setState({ wrongAnswerFeedbacks: answers.wrongAnswerFeedbacks });
	        this.setState({ wrongChoiceIds: answers.wrongChoiceIds });
	    },
	    save: function save(e) {
	        // NOTE: include all the deleted choices and answers
	        //     up front in the wrongAnswer sections, with the "delete": true flag set
	        // NOTE: the choiceId index for any new choices / answers should
	        //     assume the index position post-delete

	        var payload = {
	            itemId: this.props.item.id,
	            libraryId: this.props.libraryId
	        },
	            correctAnswer = CKEDITOR.instances.correctAnswer.getData(),
	            correctAnswerFeedback = CKEDITOR.instances.correctAnswerFeedback.getData(),
	            questionString = CKEDITOR.instances.questionString.getData(),
	            wrongAnswers = this.getWrongAnswers(),
	            wrongAnswerFeedbacks = this.getWrongAnswerFeedbacks(),
	            wrongAnswerIds = this.getWrongAnswerEditorIds(),
	            wrongChoiceIds = this.getWrongAnswerChoiceIds(),
	            _this = this;

	        if (this.state.itemDisplayName === '' || correctAnswer === '' || questionString === '' || wrongAnswers.indexOf('') >= 0) {

	            var firstEmptyWrongAnswer = wrongAnswers.indexOf(''),
	                validationState = [];
	            _.each(this.state.wrongAnswerErrors, function (errorState) {
	                validationState.push(false);
	            });

	            if (firstEmptyWrongAnswer >= 0) {
	                _.each(wrongAnswers, function (wrongAnswer, index) {
	                    if (wrongAnswer === '') {
	                        validationState[index] = true;
	                    }
	                });
	            }

	            this.setState({ showAlert: true });

	            this.setState({ itemDisplayNameError: this.state.itemDisplayName === '' });
	            this.setState({ correctAnswerError: correctAnswer === '' });
	            this.setState({ questionStringError: questionString === '' });
	            this.setState({ wrongAnswerErrors: validationState });
	        } else {
	            var choiceData = AnswerExtraction(this.props.item);

	            payload['displayName'] = this.state.itemDisplayName;
	            payload['description'] = this.state.itemDescription;

	            payload['question'] = {
	                text: questionString,
	                choices: [{
	                    choiceId: choiceData.correctChoiceId,
	                    text: correctAnswer
	                }]
	            };

	            _.each(this.state.removedChoiceIds, function (choiceId) {
	                payload.question.choices.push({
	                    choiceId: choiceId,
	                    delete: true
	                });
	            });

	            _.each(wrongAnswers, function (wrongAnswer, index) {
	                var wrongChoiceId = wrongChoiceIds[index];

	                if (_this.state.removedChoiceIds.indexOf(wrongChoiceId) < 0) {
	                    // choice was not deleted, so add it back to the
	                    // payload with the given MC3 ID
	                    if (wrongChoiceId != null) {
	                        payload.question.choices.push({
	                            choiceId: wrongChoiceId,
	                            text: wrongAnswer
	                        });
	                    } else {
	                        // or create a new choice here
	                        payload.question.choices.push({
	                            text: wrongAnswer
	                        });
	                    }
	                }
	            });

	            payload['answers'] = [{
	                answerId: this.state.correctAnswerId,
	                choiceId: choiceData.correctChoiceId,
	                feedback: correctAnswerFeedback
	            }];

	            _.each(this.state.removedAnswerIds, function (answerId) {
	                payload.answers.push({
	                    answerId: answerId,
	                    delete: true
	                });
	            });

	            _.each(wrongAnswerFeedbacks, function (feedback, index) {
	                var wrongAnswerId = wrongAnswerIds[index],
	                    wrongChoiceId = wrongChoiceIds[index];

	                if (_this.state.removedAnswerIds.indexOf(wrongAnswerId) < 0) {
	                    // answer was not deleted, so add it back to the
	                    // payload with the given MC3 ID
	                    if (wrongAnswerId.indexOf('assessment.Answer') >= 0) {
	                        payload.answers.push({
	                            answerId: wrongAnswerId,
	                            choiceId: wrongChoiceId,
	                            feedback: feedback
	                        });
	                    } else {
	                        // or create a new answer mapping here
	                        payload.answers.push({
	                            choiceId: index + 1,
	                            feedback: feedback,
	                            genusTypeId: GenusTypes.WRONG_ANSWER
	                        });
	                    }
	                }
	            });

	            Dispatcher.dispatch({
	                type: ActionTypes.UPDATE_ITEM,
	                content: payload
	            });
	            this.close();
	            //            setTimeout(this.reset, 1000);
	        }
	    },
	    render: function render() {
	        var alert = '',
	            wrongAnswers = this.formatWrongAnswers(),
	            correctAnswer,
	            itemDisplayName,
	            questionString;

	        if (this.state.showAlert) {
	            alert = React.createElement(
	                Alert,
	                { bsStyle: 'danger' },
	                'You are missing some required fields'
	            );
	        }

	        if (this.state.correctAnswerError) {
	            correctAnswer = React.createElement(
	                FormGroup,
	                { controlId: 'correctAnswer',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Correct Answer'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.correctAnswer,
	                    onChange: this.onChange,
	                    placeholder: 'The correct answer' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            correctAnswer = React.createElement(
	                FormGroup,
	                { controlId: 'correctAnswer' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Correct Answer'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.correctAnswer,
	                    onChange: this.onChange,
	                    placeholder: 'The correct answer' })
	            );
	        }

	        if (this.state.itemDisplayNameError) {
	            itemDisplayName = React.createElement(
	                FormGroup,
	                { controlId: 'itemDisplayName',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Item Name'
	                ),
	                React.createElement(FormControl, { type: 'text',
	                    value: this.state.itemDisplayName,
	                    onChange: this.onChange,
	                    placeholder: 'A name for the item' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            itemDisplayName = React.createElement(
	                FormGroup,
	                { controlId: 'itemDisplayName' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Item Name'
	                ),
	                React.createElement(FormControl, { type: 'text',
	                    value: this.state.itemDisplayName,
	                    onChange: this.onChange,
	                    placeholder: 'A name for the item' })
	            );
	        }

	        if (this.state.questionStringError) {
	            questionString = React.createElement(
	                FormGroup,
	                { controlId: 'questionString',
	                    validationState: 'error' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Question'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.questionString,
	                    onChange: this.onChange,
	                    placeholder: 'Please enter the question string, like \'What is your favorite color?\'' }),
	                React.createElement(FormControl.Feedback, null)
	            );
	        } else {
	            questionString = React.createElement(
	                FormGroup,
	                { controlId: 'questionString' },
	                React.createElement(
	                    ControlLabel,
	                    null,
	                    'Question'
	                ),
	                React.createElement(FormControl, { componentClass: 'textarea',
	                    value: this.state.questionString,
	                    onChange: this.onChange,
	                    placeholder: 'Please enter the question string, like \'What is your favorite color?\'' })
	            );
	        }

	        return React.createElement(
	            Modal,
	            { backdrop: 'static',
	                bsSize: 'lg',
	                show: this.props.showModal,
	                onHide: this.closeAndReset,
	                onEntered: this.initializeEditors },
	            React.createElement(
	                Modal.Header,
	                { closeButton: true },
	                React.createElement(
	                    Modal.Title,
	                    null,
	                    'Edit Question'
	                )
	            ),
	            React.createElement(
	                Modal.Body,
	                null,
	                alert,
	                React.createElement(
	                    'form',
	                    null,
	                    itemDisplayName,
	                    React.createElement(
	                        FormGroup,
	                        { controlId: 'itemDescription' },
	                        React.createElement(
	                            ControlLabel,
	                            null,
	                            'Item Description (optional)'
	                        ),
	                        React.createElement(FormControl, { type: 'text',
	                            value: this.state.itemDescription,
	                            onChange: this.onChange,
	                            placeholder: 'A description for this item' })
	                    ),
	                    questionString,
	                    correctAnswer,
	                    React.createElement(
	                        FormGroup,
	                        { controlId: 'correctAnswerFeedback' },
	                        React.createElement(
	                            ControlLabel,
	                            null,
	                            'Solution Explanation (recommended)'
	                        ),
	                        React.createElement(FormControl, { componentClass: 'textarea',
	                            value: this.state.correctAnswerFeedback,
	                            onChange: this.onChange,
	                            placeholder: 'Solution Explanation' })
	                    ),
	                    React.createElement(
	                        ListGroup,
	                        { ref: 'wrongAnswers' },
	                        wrongAnswers
	                    ),
	                    React.createElement(
	                        Button,
	                        { onClick: this.addWrongAnswer,
	                            bsStyle: 'success' },
	                        React.createElement(Glyphicon, { glyph: 'plus' }),
	                        'Add Wrong Answer'
	                    )
	                )
	            ),
	            React.createElement(
	                Modal.Footer,
	                null,
	                React.createElement(
	                    Button,
	                    { onClick: this.closeAndReset },
	                    'Cancel'
	                ),
	                React.createElement(
	                    Button,
	                    { bsStyle: 'success', onClick: this.save },
	                    'Save'
	                )
	            )
	        );
	    }
	});

	module.exports = EditMultipleChoice;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// TransferItem.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Button = ReactBS.Button;
	var Glyphicon = ReactBS.Glyphicon;

	var AssignableBanks = __webpack_require__(75);

	var TransferItem = React.createClass({
	    displayName: 'TransferItem',

	    getInitialState: function getInitialState() {
	        return {
	            showModal: false
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.setState({ showModal: false });
	    },
	    open: function open(e) {
	        e.stopPropagation();
	        this.setState({ showModal: true });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open,
	                    bsSize: 'large',
	                    title: 'Transfer Item' },
	                React.createElement(Glyphicon, { glyph: 'transfer' })
	            ),
	            React.createElement(AssignableBanks, { close: this.close,
	                item: this.props.item,
	                libraries: this.props.libraries,
	                libraryId: this.props.libraryId,
	                showModal: this.state.showModal })
	        );
	    }
	});

	module.exports = TransferItem;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// AssignableBanks.jsx
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Button = ReactBS.Button;
	var Checkbox = ReactBS.Checkbox;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var Dispatcher = __webpack_require__(9);
	var LibraryItemsStore = __webpack_require__(8);
	var MiddlewareService = __webpack_require__(17);

	var AssignableBanks = React.createClass({
	    displayName: 'AssignableBanks',

	    getInitialState: function getInitialState() {
	        var state = {
	            showAlert: false
	        },
	            _this = this;

	        _.each(this.props.libraries, function (library, index) {
	            if (_this.props.item.assignedBankIds.indexOf(library.id) >= 0) {
	                state['assignedBankId' + index] = true;
	            } else {
	                state['assignedBankId' + index] = false;
	            }
	        });

	        return state;
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {},
	    close: function close() {
	        this.props.close();
	    },
	    closeAndReset: function closeAndReset() {
	        this.reset();
	        this.close();
	    },
	    onChange: function onChange(e) {
	        var checked = e.currentTarget.checked,
	            index = 'assignedBankId' + e.currentTarget.id,
	            state = {};

	        state[index] = checked;
	        this.setState(state);
	    },
	    renderBanks: function renderBanks() {
	        var _this = this;
	        return _.map(this.props.libraries, function (library, index) {
	            var valueState = 'assignedBankId' + index;
	            if (_this.state[valueState]) {
	                return React.createElement(
	                    Checkbox,
	                    { checked: true,
	                        id: index,
	                        key: library.id,
	                        onChange: _this.onChange,
	                        value: _this.state[valueState] },
	                    library.displayName.text
	                );
	            } else {
	                return React.createElement(
	                    Checkbox,
	                    { id: index,
	                        key: library.id,
	                        onChange: _this.onChange,
	                        value: _this.state[valueState] },
	                    library.displayName.text
	                );
	            }
	        });
	    },
	    reset: function reset() {
	        var state = {
	            showAlert: false
	        },
	            _this = this;

	        _.each(this.props.libraries, function (library, index) {
	            if (_this.props.item.assignedBankIds.indexOf(library.id) >= 0) {
	                state['assignedBankId' + index] = true;
	            } else {
	                state['assignedBankId' + index] = false;
	            }
	        });
	        this.setState(state);
	    },
	    save: function save(e) {
	        var payload = {
	            itemId: this.props.item.id,
	            libraryId: this.props.libraryId
	        },
	            _this = this,
	            assignedBankIds = this.props.item.assignedBankIds,
	            bankFields = [];

	        _.each(this.props.libraries, function (library, index) {
	            var valueState = 'assignedBankId' + index;
	            if (_this.state[valueState]) {
	                bankFields.push(library.id);
	            }
	        });

	        if (bankFields.length === 0) {
	            this.setState({ showAlert: true });
	        } else {
	            _.each(this.props.libraries, function (library, index) {
	                var valueState = 'assignedBankId' + index;

	                if (_this.state[valueState] && assignedBankIds.indexOf(library.id) < 0) {
	                    assignedBankIds.push(library.id);
	                } else if (!_this.state[valueState] && assignedBankIds.indexOf(library.id) >= 0) {
	                    assignedBankIds.splice(assignedBankIds.indexOf(library.id), 1);
	                }
	            });
	            payload['assignedBankIds'] = assignedBankIds;

	            Dispatcher.dispatch({
	                type: ActionTypes.UPDATE_ITEM,
	                content: payload
	            });
	            this.closeAndReset();
	            setTimeout(_this.reset, 500);
	        }
	    },
	    render: function render() {
	        var alert = '';

	        if (this.state.showAlert) {
	            alert = React.createElement(
	                Alert,
	                { bsStyle: 'danger' },
	                'You must keep the question in at least one domain, otherwise you will lose access to it forever.'
	            );
	        }

	        return React.createElement(
	            Modal,
	            { bsSize: 'lg',
	                show: this.props.showModal,
	                onHide: this.closeAndReset },
	            React.createElement(
	                Modal.Header,
	                { closeButton: true },
	                React.createElement(
	                    Modal.Title,
	                    null,
	                    'Assign to Domains'
	                )
	            ),
	            React.createElement(
	                Modal.Body,
	                null,
	                alert,
	                React.createElement(
	                    'form',
	                    null,
	                    React.createElement(
	                        FormGroup,
	                        null,
	                        this.renderBanks()
	                    )
	                )
	            ),
	            React.createElement(
	                Modal.Footer,
	                null,
	                React.createElement(
	                    Button,
	                    { onClick: this.closeAndReset },
	                    'Cancel'
	                ),
	                React.createElement(
	                    Button,
	                    { bsStyle: 'success', onClick: this.save },
	                    'Save'
	                )
	            )
	        );
	    }
	});

	module.exports = AssignableBanks;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ItemRow.js

	'use strict';

	__webpack_require__(77);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Col = ReactBS.Col;
	var Grid = ReactBS.Grid;
	var Panel = ReactBS.Panel;
	var Row = ReactBS.Row;

	var AuthoringConstants = __webpack_require__(14);
	var ChoiceLabels = AuthoringConstants.ChoiceLabels;
	var GenusTypes = AuthoringConstants.GenusTypes;

	var AnswerExtraction = __webpack_require__(48);
	var AnswerText = __webpack_require__(49);
	var ItemControls = __webpack_require__(67);
	var LOText = __webpack_require__(79);
	var OutcomesStore = __webpack_require__(86);
	var QuestionText = __webpack_require__(88);
	var SetIFrameHeight = __webpack_require__(66);
	var WrapHTML = __webpack_require__(62);

	var ItemRow = React.createClass({
	  displayName: 'ItemRow',

	  getInitialState: function getInitialState() {
	    return {
	      itemExpanded: false,
	      showPreview: false
	    };
	  },
	  componentWillMount: function componentWillMount() {},
	  componentDidMount: function componentDidMount() {},
	  componentDidUpdate: function componentDidUpdate() {},
	  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
	    if (nextState.showPreview) {
	      SetIFrameHeight(this.refs.myPreviewFrame);
	    }
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    var equalityKeys = ["minStringLength", "displayName", "description", "license", "texts", "bankId", "question", "answers", "id", "recordTypeIds", "providerId", "brandingIds", "assignedBankIds", "genusTypeId", "type", "maxStringLength", "learningObjectiveIds"],
	        _this = this,
	        unequalPropsItem;

	    unequalPropsItem = _.some(equalityKeys, function (key) {
	      var unequalProp = !_.isEqual(nextProps.item[key], _this.props.item[key]);
	      return unequalProp;
	    });

	    var shouldUpdate = unequalPropsItem || this.state.itemExpanded !== nextState.itemExpanded || this.state.showPreview !== nextState.showPreview;

	    return shouldUpdate;
	  },
	  filterOutcomes: function filterOutcomes(item) {
	    // return outcomes that are not currently being used somewhere
	    // in a specific item
	    return _.filter(this.props.outcomes, function (outcome) {
	      return item.usedLOs.indexOf(outcome.id) < 0;
	    });
	  },
	  getOutcomeDescription: function getOutcomeDescription(outcomeId) {
	    var outcome = OutcomesStore.get(outcomeId);
	    if (outcome == null) {
	      return '';
	    } else {
	      return outcome.description.text;
	    }
	  },
	  getOutcomeDisplayName: function getOutcomeDisplayName(outcomeId) {
	    var outcome = OutcomesStore.get(outcomeId);
	    if (outcome == null) {
	      return React.createElement(
	        'p',
	        { className: 'missing-lo' },
	        'None linked yet'
	      );
	    } else {
	      return outcome.displayName.text;
	    }
	  },
	  getQuestionLO: function getQuestionLO(item) {
	    var questionLO;
	    if (item.question.learningObjectiveIds.length > 0) {
	      questionLO = item.question.learningObjectiveIds[0];
	    } else {
	      questionLO = '';
	    }

	    return questionLO;
	  },
	  getRelatedItems: function getRelatedItems(outcomeId) {
	    var items = this.props.relatedItems[outcomeId];

	    if (typeof items !== 'undefined') {
	      return items;
	    } else {
	      return [];
	    }
	  },
	  renderItemAnswerLOs: function renderItemAnswerLOs(item) {
	    // just generate the answer los
	    var _this = this;
	    return _.map(item.wrongAnswerLOs, function (outcomeId, index) {
	      var visibleIndex = index + 1,
	          answerId = item.wrongAnswerIds[index],
	          relatedItems = _this.getRelatedItems(outcomeId),
	          choiceLetter = ChoiceLabels[visibleIndex];

	      return React.createElement(
	        'div',
	        { className: 'text-row-wrapper',
	          key: index },
	        React.createElement(
	          'p',
	          { className: 'answer-label' },
	          choiceLetter,
	          ')'
	        ),
	        React.createElement(LOText, { answerId: answerId,
	          component: 'answer',
	          enableClickthrough: _this.props.enableClickthrough,
	          itemId: item.id,
	          libraryId: _this.props.libraryId,
	          outcomeDescription: _this.getOutcomeDescription(outcomeId),
	          outcomeDisplayName: _this.getOutcomeDisplayName(outcomeId),
	          outcomeId: _this.getQuestionLO(item),
	          outcomes: _this.filterOutcomes(item),
	          refreshModulesAndOutcomes: _this.props.refreshModulesAndOutcomes,
	          relatedItems: relatedItems })
	      );
	    });
	  },
	  renderItemAnswerTexts: function renderItemAnswerTexts(item) {
	    var _this = this;
	    // just generate the answer objects
	    return _.map(item.wrongAnswers, function (answer, index) {
	      var visibleIndex = index + 1,
	          wrongAnswerId = item.wrongAnswerIds[index],
	          wrongAnswerLabel = 'Wrong Answer ' + visibleIndex,
	          feedback = item.wrongAnswerFeedbacks[index],
	          choiceLetter = ChoiceLabels[visibleIndex];

	      return React.createElement(
	        'div',
	        { className: 'text-row-wrapper',
	          key: index },
	        React.createElement(
	          'p',
	          { className: 'answer-label' },
	          choiceLetter,
	          ')'
	        ),
	        React.createElement(AnswerText, { answerId: wrongAnswerId,
	          answerText: answer.text,
	          enableClickthrough: _this.props.enableClickthrough,
	          expanded: _this.state.itemExpanded,
	          feedback: feedback,
	          itemId: item.id,
	          label: wrongAnswerLabel,
	          libraryId: _this.props.libraryId })
	      );
	    });
	  },
	  toggleItemState: function toggleItemState(e) {
	    // NOTE: Do NOT add any sort of validation check here
	    //       It seems to break Jennifer's set up for whatever reason...
	    //if (e.target.className == 'panel-title') {
	    this.setState({ itemExpanded: !this.state.itemExpanded });
	    //}
	  },
	  render: function render() {
	    var _this = this,

	    // map the choiceIds, etc., in answers back to choices in questions
	    updatedItem = this.props.item;

	    var answers = AnswerExtraction(updatedItem),
	        previewHTML = WrapHTML(answers.correctAnswerFeedback);

	    updatedItem['correctAnswer'] = answers.correctAnswerText.text;
	    updatedItem['correctAnswerId'] = answers.correctAnswerId;
	    updatedItem['correctAnswerFeedback'] = answers.correctAnswerFeedback;
	    updatedItem['questionRelatedItems'] = _this.getRelatedItems(updatedItem.learningObjectiveIds[0]);
	    updatedItem['usedLOs'] = updatedItem.learningObjectiveIds;
	    updatedItem['wrongAnswers'] = answers.wrongAnswerTexts;
	    updatedItem['wrongAnswerFeedbacks'] = answers.wrongAnswerFeedbacks;
	    updatedItem['wrongAnswerIds'] = answers.wrongAnswerIds;
	    updatedItem['wrongAnswerLOs'] = answers.wrongAnswerLOs;

	    var questionLO = _this.getQuestionLO(updatedItem),
	        itemCreator = 'Unknown',
	        itemControls;

	    if (_this.props.enableClickthrough) {
	      itemControls = React.createElement(
	        'div',
	        { className: 'item-controls' },
	        React.createElement(ItemControls, { item: updatedItem,
	          libraries: _this.props.libraries,
	          libraryId: _this.props.libraryId })
	      );
	    } else {
	      itemControls = '';
	    }

	    if (updatedItem.hasOwnProperty('providerId')) {
	      if (updatedItem.providerId != '') {
	        itemCreator = updatedItem.providerId;
	      }
	    }

	    return React.createElement(
	      Row,
	      null,
	      React.createElement(
	        Col,
	        { sm: 8, md: 8, lg: 8 },
	        React.createElement(
	          Panel,
	          { header: updatedItem.displayName.text,
	            collapsible: true,
	            'data-id': updatedItem.id,
	            'data-type': 'item',
	            expanded: _this.state.itemExpanded,
	            onClick: _this.toggleItemState },
	          React.createElement(
	            'div',
	            { className: 'text-row-wrapper' },
	            React.createElement(
	              'p',
	              { className: 'question-label' },
	              'Q:'
	            ),
	            React.createElement(QuestionText, { expanded: _this.state.itemExpanded,
	              questionText: updatedItem.question.text.text,
	              itemCreator: itemCreator })
	          ),
	          React.createElement(
	            'div',
	            { className: 'text-row-wrapper' },
	            React.createElement(
	              'p',
	              { className: 'answer-label' },
	              'a)'
	            ),
	            React.createElement(AnswerText, { answerId: updatedItem.correctAnswerId,
	              answerText: updatedItem.correctAnswer,
	              correctAnswer: 'true',
	              enableClickthrough: _this.props.enableClickthrough,
	              expanded: _this.state.itemExpanded,
	              feedback: updatedItem.correctAnswerFeedback,
	              itemId: updatedItem.id,
	              label: 'Correct Answer',
	              libraryId: _this.props.libraryId,
	              togglePreview: _this._togglePreview })
	          ),
	          React.createElement(
	            'div',
	            { className: 'right-answer-feedback-preview' },
	            React.createElement(
	              Panel,
	              { collapsible: true,
	                expanded: _this.state.showPreview },
	              React.createElement('iframe', { ref: 'myPreviewFrame',
	                srcDoc: previewHTML,
	                frameBorder: 0,
	                width: '100%',
	                sandbox: 'allow-scripts allow-same-origin'
	              })
	            )
	          ),
	          _this.renderItemAnswerTexts(updatedItem),
	          itemControls
	        )
	      ),
	      React.createElement(
	        Col,
	        { sm: 4, md: 4, lg: 4 },
	        React.createElement(
	          Panel,
	          { header: 'Learning Outcomes',
	            collapsible: true,
	            expanded: _this.state.itemExpanded },
	          React.createElement(
	            'div',
	            { className: 'text-row-wrapper' },
	            React.createElement(
	              'p',
	              { className: 'question-label' },
	              'Q:'
	            ),
	            React.createElement(LOText, { component: 'question',
	              enableClickthrough: _this.props.enableClickthrough,
	              itemId: updatedItem.id,
	              libraryId: _this.props.libraryId,
	              outcomeDescription: _this.getOutcomeDescription(questionLO),
	              outcomeDisplayName: _this.getOutcomeDisplayName(questionLO),
	              outcomeId: questionLO,
	              outcomes: _this.filterOutcomes(updatedItem),
	              refreshModulesAndOutcomes: _this.props.refreshModulesAndOutcomes,
	              relatedItems: updatedItem.questionRelatedItems })
	          ),
	          React.createElement(
	            'div',
	            { className: 'text-row-wrapper' },
	            React.createElement(
	              'p',
	              { className: 'answer-label' },
	              'a)'
	            ),
	            React.createElement(
	              'p',
	              { className: 'correct-answer-lo' },
	              'Correct answer -- no confused LO'
	            )
	          ),
	          _this.renderItemAnswerLOs(updatedItem)
	        )
	      )
	    );
	  },
	  _togglePreview: function _togglePreview() {
	    this.setState({ showPreview: !this.state.showPreview });
	  }
	});

	module.exports = ItemRow;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(78);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ItemRow.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ItemRow.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".item-controls {\n    float: right;\n}\n\n.item-controls button {\n    margin-left: 5px;\n    margin-right: 5px;\n}\n\n.item-controls div {\n    display: inline;\n}\n\n.text-row-wrapper {\n    display: flex;\n    padding: 5px 5px;\n}\n\n.answer-label {\n    margin-right: 10px;\n}\n\n.correct-answer-lo {\n    color: darkgreen;\n    font-weight: bold;\n}\n\n.missing-lo {\n    color: darkred;\n    font-weight: bold;\n}\n\n.question-label {\n    font-weight: bold;\n    margin-right: 10px;\n}\n\n.taggable-text {\n    display: flex;\n    flex: 1 1 100%;\n}\n\n.text-blob {\n    flex: 1 1 90%;\n}\n\n.panel-body {\n  padding-left: 0;\n}\n\n.right-answer-feedback-preview {\n  margin-left: 15px;\n  padding: 5px;\n}", ""]);

	// exports


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// LOText.js

	'use strict';

	__webpack_require__(80);

	var React = __webpack_require__(1);

	var LinkLO = __webpack_require__(82);
	var LORelatedItemsBadge = __webpack_require__(83);

	var LOText = React.createClass({
	    displayName: 'LOText',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    render: function render() {
	        var loControls = '';

	        if (this.props.enableClickthrough) {
	            loControls = React.createElement(
	                'div',
	                { className: 'outcome-controls' },
	                React.createElement(LORelatedItemsBadge, { libraryId: this.props.libraryId,
	                    outcomeId: this.props.outcomeId,
	                    relatedItems: this.props.relatedItems }),
	                React.createElement(LinkLO, { answerId: this.props.answerId,
	                    component: this.props.component,
	                    itemId: this.props.itemId,
	                    libraryId: this.props.libraryId,
	                    outcomeId: this.props.outcomeId,
	                    outcomes: this.props.outcomes,
	                    refreshModulesAndOutcomes: this.props.refreshModulesAndOutcomes })
	            );
	        }

	        return React.createElement(
	            'div',
	            { className: 'outcome-text' },
	            React.createElement(
	                'div',
	                { className: 'outcome-text-wrapper' },
	                React.createElement(
	                    'div',
	                    { className: 'outcome-display-name' },
	                    this.props.outcomeDisplayName
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'outcome-description' },
	                    this.props.outcomeDescription
	                )
	            ),
	            loControls
	        );
	    }
	});

	module.exports = LOText;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(81);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./LOText.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./LOText.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".outcome-text {\n    display: flex;\n    width: 100%;\n}\n\n.outcome-controls {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n}\n\n.outcome-text .badge {\n    margin-right: 5px;\n}\n\n.outcome-display-name,\n.outcome-description {\n    flex: 1 1 100%;\n}\n\n.outcome-description {\n  color: gray;\n  font-size: 10pt;\n}\n\n.outcome-text-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n", ""]);

	// exports


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// LinkLO.js

	'use strict';

	__webpack_require__(52);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Select = __webpack_require__(54);

	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var Dispatcher = __webpack_require__(9);

	var LinkLO = React.createClass({
	    displayName: 'LinkLO',

	    getInitialState: function getInitialState() {
	        var outcomeId = this.props.outcomeId === 'None linked yet' ? '' : this.props.outcomeId;
	        return {
	            outcomeId: outcomeId,
	            showModal: false
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    close: function close() {
	        this.setState({ showModal: false });
	        this.reset();
	    },
	    onChange: function onChange(e) {
	        if (e == null) {
	            this.setState({ outcomeId: '' });
	        } else {
	            this.setState({ outcomeId: e.value });
	        }
	    },
	    open: function open(e) {
	        this.props.refreshModulesAndOutcomes();
	        this.setState({ showModal: true }, function () {});
	    },
	    renderOutcomes: function renderOutcomes() {
	        return _.map(this.props.outcomes, function (outcome) {
	            return React.createElement(
	                'option',
	                { value: outcome.id,
	                    title: outcome.description.text,
	                    key: outcome.id },
	                outcome.displayName.text
	            );
	        });
	    },
	    reset: function reset() {},
	    save: function save(e) {
	        if (this.props.component == 'answer') {
	            var payload = {
	                answerId: this.props.answerId,
	                confusedLearningObjectiveId: this.state.outcomeId,
	                itemId: this.props.itemId,
	                libraryId: this.props.libraryId
	            };

	            Dispatcher.dispatch({
	                type: ActionTypes.LINK_ANSWER_LO,
	                content: payload
	            });
	        } else {
	            // question
	            var payload = {
	                learningObjectiveId: this.state.outcomeId,
	                itemId: this.props.itemId,
	                libraryId: this.props.libraryId
	            };

	            Dispatcher.dispatch({
	                type: ActionTypes.LINK_ITEM_LO,
	                content: payload
	            });
	        }
	        this.close();
	    },
	    render: function render() {
	        var formattedOutcomes = _.map(this.props.outcomes, function (outcome) {
	            return {
	                value: outcome.id,
	                label: outcome.displayName.text
	            };
	        });

	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open,
	                    title: 'Link to an Outcome' },
	                React.createElement(Glyphicon, { glyph: 'link' })
	            ),
	            React.createElement(
	                Modal,
	                { show: this.state.showModal, onHide: this.close },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Link to Outcome'
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    React.createElement(
	                        'form',
	                        null,
	                        React.createElement(
	                            FormGroup,
	                            { controlId: 'outcomeSelector' },
	                            React.createElement(
	                                ControlLabel,
	                                null,
	                                'Select a learning outcome ...'
	                            ),
	                            React.createElement(Select, { name: 'confusedOutcomeSelector',
	                                placeholder: 'Select an outcome ... ',
	                                value: this.state.outcomeId,
	                                onChange: this.onChange,
	                                options: formattedOutcomes })
	                        )
	                    )
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { onClick: this.close },
	                        'Close'
	                    ),
	                    React.createElement(
	                        Button,
	                        { bsStyle: 'success', onClick: this.save },
	                        'Save'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = LinkLO;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	// LORelatedItemsBadge.jsx
	'use strict';

	__webpack_require__(84);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Alert = ReactBS.Alert;
	var Badge = ReactBS.Badge;
	var Button = ReactBS.Button;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var Dispatcher = __webpack_require__(9);
	var LibraryItemsStore = __webpack_require__(8);
	var OutcomesStore = __webpack_require__(86);

	var LORelatedItemsBadge = React.createClass({
	    displayName: 'LORelatedItemsBadge',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    close: function close() {
	        this.setState({ showModal: false });
	    },
	    open: function open() {
	        this.setState({ showModal: true });
	    },
	    render: function render() {
	        var ItemsList = __webpack_require__(45);
	        var items, lo;

	        lo = OutcomesStore.get(this.props.outcomeId) == null ? '' : OutcomesStore.get(this.props.outcomeId).displayName.text;

	        if (this.props.relatedItems.length > 0) {
	            items = React.createElement(ItemsList, { enableClickthrough: false,
	                libraryId: this.props.libraryId,
	                relatedItems: [],
	                sortedItems: this.props.relatedItems });
	        } else {
	            items = React.createElement(
	                Alert,
	                { bsStyle: 'danger' },
	                'No items with this LO'
	            );
	        }
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                Button,
	                { onClick: this.open, title: 'Related Items' },
	                React.createElement(
	                    Badge,
	                    null,
	                    this.props.relatedItems.length
	                ),
	                'Items'
	            ),
	            React.createElement(
	                Modal,
	                { bsSize: 'lg', show: this.state.showModal,
	                    onHide: this.close,
	                    dialogClassName: 'extra-wide-modal' },
	                React.createElement(
	                    Modal.Header,
	                    { closeButton: true },
	                    React.createElement(
	                        Modal.Title,
	                        null,
	                        'Items related to: ',
	                        lo
	                    )
	                ),
	                React.createElement(
	                    Modal.Body,
	                    null,
	                    items
	                ),
	                React.createElement(
	                    Modal.Footer,
	                    null,
	                    React.createElement(
	                        Button,
	                        { onClick: this.close },
	                        'Close'
	                    )
	                )
	            )
	        );
	    }
	});

	module.exports = LORelatedItemsBadge;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(85);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./LORelatedItemsBadge.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./LORelatedItemsBadge.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".extra-wide-modal {\n    width: 90%;\n}", ""]);

	// exports


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// OutcomesStore.js

	'use strict';

	var OutcomesDispatcher = __webpack_require__(87);
	var AuthoringConstants = __webpack_require__(14);
	var MiddlewareService = __webpack_require__(17);

	var EventEmitter = __webpack_require__(16).EventEmitter;

	var ActionTypes = AuthoringConstants.ActionTypes;
	var CHANGE_EVENT = ActionTypes.CHANGE_EVENT;

	var _outcomes = [];

	var OutcomesStore = _.assign({}, EventEmitter.prototype, {
	    emitChange: function () {
	        this.emit(CHANGE_EVENT, _outcomes);
	    },
	    addChangeListener: function (callback) {
	        this.on(CHANGE_EVENT, callback);
	    },
	    removeChangeListener: function (callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	    },
	    get: function (id) {
	        return _.find(_outcomes, function (outcome) {
	            return outcome.id == id;
	        });
	    },
	    getAll: function (libraryId) {
	        var _this = this,
	            url = this.url() + libraryId + '/objectives';
	        fetch(url, {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            response.json().then(function (data) {
	                _outcomes = data;
	                _this.emitChange();
	            });
	        })
	        .catch(function (error) {
	            console.log('Problem with getting objectives: ' + error.message);
	        });
	    },
	    url: function () {
	      if (MiddlewareService.shouldReturnStatic()) return '/raw_data/objectives.json';

	      return MiddlewareService.host() + '/learning/objectivebanks/';
	    }
	});

	OutcomesStore.dispatchToken = OutcomesDispatcher.register(function (action) {
	    switch(action.type) {
	    }
	});

	module.exports = OutcomesStore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 87 */
9,
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// QuestionText.js

	'use strict';

	__webpack_require__(89);
	__webpack_require__(52);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Select = __webpack_require__(54);
	var ReactTooltip = __webpack_require__(91);

	var Button = ReactBS.Button;
	var ControlLabel = ReactBS.ControlLabel;
	var FormGroup = ReactBS.FormGroup;
	var Glyphicon = ReactBS.Glyphicon;
	var Modal = ReactBS.Modal;

	var ActionTypes = __webpack_require__(14).ActionTypes;
	var Dispatcher = __webpack_require__(9);
	var OsidId = __webpack_require__(94);

	var QuestionText = React.createClass({
	    displayName: 'QuestionText',

	    getInitialState: function getInitialState() {
	        var questionLO = this.props.questionLO === '' ? '' : this.props.questionLO;
	        return {
	            questionLO: questionLO,
	            showModal: false
	        };
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {
	        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
	    componentDidUpdate: function componentDidUpdate(nextProps, nextState) {
	        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
	    },
	    close: function close() {
	        this.setState({ showModal: false });
	        this.reset();
	    },
	    getQuestionText: function getQuestionText() {
	        return { __html: this.props.questionText };
	    },
	    onChange: function onChange(e) {
	        if (e == null) {
	            this.setState({ questionLO: '' });
	        } else {
	            this.setState({ questionLO: e.value });
	        }
	    },
	    open: function open(e) {
	        this.setState({ showModal: true }, function () {});
	    },
	    renderOutcomes: function renderOutcomes() {
	        return _.map(this.props.outcomes, function (outcome) {
	            return React.createElement(
	                'option',
	                { value: outcome.id,
	                    title: outcome.description.text,
	                    key: outcome.id },
	                outcome.displayName.text
	            );
	        });
	    },
	    reset: function reset() {},
	    save: function save(e) {
	        var payload = {
	            learningObjectiveId: this.state.questionLO,
	            itemId: this.props.questionId,
	            libraryId: this.props.libraryId
	        };

	        Dispatcher.dispatch({
	            type: ActionTypes.LINK_ITEM_LO,
	            content: payload
	        });
	        this.close();
	    },
	    render: function render() {
	        var agent = OsidId.getIdentifier(this.props.itemCreator);

	        return React.createElement(
	            'div',
	            { className: 'taggable-text' },
	            React.createElement(
	                'div',
	                { className: 'text-blob' },
	                React.createElement('div', { dangerouslySetInnerHTML: this.getQuestionText() })
	            ),
	            React.createElement(Glyphicon, { glyph: 'envelope',
	                'data-tip': agent }),
	            React.createElement(ReactTooltip, null)
	        );
	    }
	});

	module.exports = QuestionText;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(90);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./QuestionText.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./QuestionText.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".question-actions  button {\n    height: 34px;\n}", ""]);

	// exports


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	module.exports = __webpack_require__(92)


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(2);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(56);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _style = __webpack_require__(93);

	var _style2 = _interopRequireDefault(_style);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ReactTooltip = function (_Component) {
	  _inherits(ReactTooltip, _Component);

	  _createClass(ReactTooltip, [{
	    key: 'globalHide',
	    value: function globalHide() {
	      if (this.mount) {
	        this.hideTooltip();
	      }
	    }
	  }, {
	    key: 'globalRebuild',
	    value: function globalRebuild() {
	      if (this.mount) {
	        this.unbindListener();
	        this.bindListener();
	      }
	    }
	  }], [{
	    key: 'hide',

	    /**
	     * Class method
	     * @see ReactTooltip.hide() && ReactTooltup.rebuild()
	     */
	    value: function hide() {
	      /**
	       * Check for ie
	       * @see http://stackoverflow.com/questions/26596123/internet-explorer-9-10-11-event-constructor-doesnt-work
	       */
	      if (typeof window.Event === 'function') {
	        window.dispatchEvent(new window.Event('__react_tooltip_hide_event'));
	      } else {
	        var event = document.createEvent('Event');
	        event.initEvent('__react_tooltip_hide_event', false, true);
	        window.dispatchEvent(event);
	      }
	    }
	  }, {
	    key: 'rebuild',
	    value: function rebuild() {
	      if (typeof window.Event === 'function') {
	        window.dispatchEvent(new window.Event('__react_tooltip_rebuild_event'));
	      } else {
	        var event = document.createEvent('Event');
	        event.initEvent('__react_tooltip_rebuild_event', false, true);
	        window.dispatchEvent(event);
	      }
	    }
	  }]);

	  function ReactTooltip(props) {
	    _classCallCheck(this, ReactTooltip);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactTooltip).call(this, props));

	    _this._bind('showTooltip', 'updateTooltip', 'hideTooltip', 'checkStatus', 'onWindowResize', 'bindClickListener', 'globalHide', 'globalRebuild');
	    _this.mount = true;
	    _this.state = {
	      show: false,
	      border: false,
	      multilineCount: 0,
	      placeholder: '',
	      x: 'NONE',
	      y: 'NONE',
	      place: '',
	      type: '',
	      effect: '',
	      multiline: false,
	      offset: {},
	      extraClass: '',
	      html: false,
	      delayHide: 0,
	      delayShow: 0,
	      event: props.event || null,
	      isCapture: props.isCapture || false
	    };
	    _this.delayShowLoop = null;
	    return _this;
	  }

	  /* Bind this with method */


	  _createClass(ReactTooltip, [{
	    key: '_bind',
	    value: function _bind() {
	      var _this2 = this;

	      for (var _len = arguments.length, handlers = Array(_len), _key = 0; _key < _len; _key++) {
	        handlers[_key] = arguments[_key];
	      }

	      handlers.forEach(function (handler) {
	        return _this2[handler] = _this2[handler].bind(_this2);
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.bindListener();
	      this.setStyleHeader();
	      /* Add window event listener for hide and rebuild */
	      window.removeEventListener('__react_tooltip_hide_event', this.globalHide);
	      window.addEventListener('__react_tooltip_hide_event', this.globalHide, false);

	      window.removeEventListener('__react_tooltip_rebuild_event', this.globalRebuild);
	      window.addEventListener('__react_tooltip_rebuild_event', this.globalRebuild, false);
	      /* Add listener on window resize  */
	      window.removeEventListener('resize', this.onWindowResize);
	      window.addEventListener('resize', this.onWindowResize, false);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate() {
	      this.unbindListener();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.updatePosition();
	      this.bindListener();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.delayShowLoop);
	      this.unbindListener();
	      this.removeScrollListener();
	      this.mount = false;
	      window.removeEventListener('__react_tooltip_hide_event', this.globalHide);
	      window.removeEventListener('__react_tooltip_rebuild_event', this.globalRebuild);
	      window.removeEventListener('resize', this.onWindowResize);
	    }

	    /* TODO: optimize, bind has been trigger too many times */

	  }, {
	    key: 'bindListener',
	    value: function bindListener() {
	      var targetArray = this.getTargetArray();

	      var dataEvent = undefined;
	      for (var i = 0; i < targetArray.length; i++) {
	        if (targetArray[i].getAttribute('currentItem') === null) {
	          targetArray[i].setAttribute('currentItem', 'false');
	        }
	        dataEvent = this.state.event || targetArray[i].getAttribute('data-event');
	        if (dataEvent) {
	          targetArray[i].removeEventListener(dataEvent, this.checkStatus);
	          targetArray[i].addEventListener(dataEvent, this.checkStatus, false);
	        } else {
	          targetArray[i].removeEventListener('mouseenter', this.showTooltip);
	          targetArray[i].addEventListener('mouseenter', this.showTooltip, false);

	          if (this.state.effect === 'float') {
	            targetArray[i].removeEventListener('mousemove', this.updateTooltip);
	            targetArray[i].addEventListener('mousemove', this.updateTooltip, false);
	          }

	          targetArray[i].removeEventListener('mouseleave', this.hideTooltip);
	          targetArray[i].addEventListener('mouseleave', this.hideTooltip, false);
	        }
	      }
	    }
	  }, {
	    key: 'unbindListener',
	    value: function unbindListener() {
	      var targetArray = document.querySelectorAll('[data-tip]');
	      var dataEvent = undefined;

	      for (var i = 0; i < targetArray.length; i++) {
	        dataEvent = this.state.event || targetArray[i].getAttribute('data-event');
	        if (dataEvent) {
	          targetArray[i].removeEventListener(dataEvent, this.checkStatus);
	        } else {
	          targetArray[i].removeEventListener('mouseenter', this.showTooltip);
	          targetArray[i].removeEventListener('mousemove', this.updateTooltip);
	          targetArray[i].removeEventListener('mouseleave', this.hideTooltip);
	        }
	      }
	    }

	    /**
	     * Get all tooltip targets
	     */

	  }, {
	    key: 'getTargetArray',
	    value: function getTargetArray() {
	      var id = this.props.id;

	      var targetArray = undefined;

	      if (id === undefined) {
	        targetArray = document.querySelectorAll('[data-tip]:not([data-for])');
	      } else {
	        targetArray = document.querySelectorAll('[data-tip][data-for="' + id + '"]');
	      }

	      return targetArray;
	    }

	    /**
	     * listener on window resize
	     */

	  }, {
	    key: 'onWindowResize',
	    value: function onWindowResize() {
	      if (!this.mount) return;
	      var targetArray = this.getTargetArray();

	      for (var i = 0; i < targetArray.length; i++) {
	        if (targetArray[i].getAttribute('currentItem') === 'true') {
	          // todo: timer for performance

	          var _getPosition = this.getPosition(targetArray[i]);

	          var x = _getPosition.x;
	          var y = _getPosition.y;

	          _reactDom2.default.findDOMNode(this).style.left = x + 'px';
	          _reactDom2.default.findDOMNode(this).style.top = y + 'px';
	          /* this.setState({
	           x,
	           y
	           }) */
	        }
	      }
	    }

	    /**
	     * Used in customer event
	     */

	  }, {
	    key: 'checkStatus',
	    value: function checkStatus(e) {
	      var show = this.state.show;

	      var isCapture = undefined;

	      if (e.currentTarget.getAttribute('data-iscapture')) {
	        isCapture = e.currentTarget.getAttribute('data-iscapture') === 'true';
	      } else {
	        isCapture = this.state.isCapture;
	      }

	      if (!isCapture) e.stopPropagation();
	      if (show && e.currentTarget.getAttribute('currentItem') === 'true') {
	        this.hideTooltip(e);
	      } else {
	        e.currentTarget.setAttribute('currentItem', 'true');
	        /* when click other place, the tooltip should be removed */
	        window.removeEventListener('click', this.bindClickListener);
	        window.addEventListener('click', this.bindClickListener, isCapture);

	        this.showTooltip(e);
	        this.setUntargetItems(e.currentTarget);
	      }
	    }
	  }, {
	    key: 'setUntargetItems',
	    value: function setUntargetItems(currentTarget) {
	      var targetArray = this.getTargetArray();
	      for (var i = 0; i < targetArray.length; i++) {
	        if (currentTarget !== targetArray[i]) {
	          targetArray[i].setAttribute('currentItem', 'false');
	        } else {
	          targetArray[i].setAttribute('currentItem', 'true');
	        }
	      }
	    }
	  }, {
	    key: 'bindClickListener',
	    value: function bindClickListener() {
	      this.globalHide();
	      window.removeEventListener('click', this.bindClickListener);
	    }

	    /**
	     * When mouse enter, show update
	     */

	  }, {
	    key: 'showTooltip',
	    value: function showTooltip(e) {
	      var originTooltip = e.currentTarget.getAttribute('data-tip');
	      /* Detect multiline */
	      var regexp = /<br\s*\/?>/;
	      var multiline = e.currentTarget.getAttribute('data-multiline') ? e.currentTarget.getAttribute('data-multiline') : this.props.multiline ? this.props.multiline : false;
	      var tooltipText = undefined;
	      var multilineCount = 0;
	      if (!multiline || multiline === 'false' || !regexp.test(originTooltip)) {
	        tooltipText = originTooltip;
	      } else {
	        tooltipText = originTooltip.split(regexp).map(function (d, i) {
	          multilineCount += 1;
	          return _react2.default.createElement(
	            'span',
	            { key: i, className: 'multi-line' },
	            d
	          );
	        });
	      }
	      /* Define extra class */
	      var extraClass = e.currentTarget.getAttribute('data-class') ? e.currentTarget.getAttribute('data-class') : '';
	      extraClass = this.props.class ? this.props.class + ' ' + extraClass : extraClass;
	      this.setState({
	        placeholder: tooltipText,
	        multilineCount: multilineCount,
	        place: e.currentTarget.getAttribute('data-place') ? e.currentTarget.getAttribute('data-place') : this.props.place ? this.props.place : 'top',
	        type: e.currentTarget.getAttribute('data-type') ? e.currentTarget.getAttribute('data-type') : this.props.type ? this.props.type : 'dark',
	        effect: e.currentTarget.getAttribute('data-effect') ? e.currentTarget.getAttribute('data-effect') : this.props.effect ? this.props.effect : 'float',
	        offset: e.currentTarget.getAttribute('data-offset') ? e.currentTarget.getAttribute('data-offset') : this.props.offset ? this.props.offset : {},
	        html: e.currentTarget.getAttribute('data-html') ? e.currentTarget.getAttribute('data-html') : this.props.html ? this.props.html : false,
	        delayShow: e.currentTarget.getAttribute('data-delay-show') ? e.currentTarget.getAttribute('data-delay-show') : this.props.delayShow ? this.props.delayShow : 0,
	        delayHide: e.currentTarget.getAttribute('data-delay-hide') ? e.currentTarget.getAttribute('data-delay-hide') : this.props.delayHide ? this.props.delayHide : 0,
	        border: e.currentTarget.getAttribute('data-border') ? e.currentTarget.getAttribute('data-border') === 'true' : this.props.border ? this.props.border : false,
	        extraClass: extraClass,
	        multiline: multiline
	      });

	      this.addScrollListener();
	      this.updateTooltip(e);
	    }

	    /**
	     * When mouse hover, updatetooltip
	     */

	  }, {
	    key: 'updateTooltip',
	    value: function updateTooltip(e) {
	      var _this3 = this;

	      var _state = this.state;
	      var delayShow = _state.delayShow;
	      var show = _state.show;

	      var delayTime = show ? 0 : parseInt(delayShow, 10);
	      var eventTarget = e.currentTarget;

	      clearTimeout(this.delayShowLoop);
	      this.delayShowLoop = setTimeout(function () {
	        if (_this3.trim(_this3.state.placeholder).length > 0) {
	          if (_this3.state.effect === 'float') {
	            _this3.setState({
	              show: true,
	              x: e.clientX,
	              y: e.clientY
	            });
	          } else if (_this3.state.effect === 'solid') {
	            var _getPosition2 = _this3.getPosition(eventTarget);

	            var x = _getPosition2.x;
	            var y = _getPosition2.y;

	            _this3.setState({
	              show: true,
	              x: x,
	              y: y
	            });
	          }
	        }
	      }, delayTime);
	    }

	    /**
	     * When mouse leave, hide tooltip
	     */

	  }, {
	    key: 'hideTooltip',
	    value: function hideTooltip() {
	      var _this4 = this;

	      var delayHide = this.state.delayHide;

	      clearTimeout(this.delayShowLoop);
	      setTimeout(function () {
	        _this4.setState({
	          show: false
	        });
	        _this4.removeScrollListener();
	      }, parseInt(delayHide, 10));
	    }

	    /**
	     * Add scroll eventlistener when tooltip show
	     * or tooltip will always existed
	     */

	  }, {
	    key: 'addScrollListener',
	    value: function addScrollListener() {
	      window.addEventListener('scroll', this.hideTooltip);
	    }
	  }, {
	    key: 'removeScrollListener',
	    value: function removeScrollListener() {
	      window.removeEventListener('scroll', this.hideTooltip);
	    }

	    /**
	     * Get tooltip poisition by current target
	     */

	  }, {
	    key: 'getPosition',
	    value: function getPosition(currentTarget) {
	      var _this5 = this;

	      var place = this.state.place;

	      var node = _reactDom2.default.findDOMNode(this);
	      var boundingClientRect = currentTarget.getBoundingClientRect();
	      var targetTop = boundingClientRect.top;
	      var targetLeft = boundingClientRect.left;
	      var tipWidth = node.clientWidth;
	      var tipHeight = node.clientHeight;
	      var targetWidth = currentTarget.clientWidth;
	      var targetHeight = currentTarget.clientHeight;
	      var windoWidth = window.innerWidth;
	      var windowHeight = window.innerHeight;
	      var x = undefined;
	      var y = undefined;
	      var defaultTopY = targetTop - tipHeight - 8;
	      var defaultBottomY = targetTop + targetHeight + 8;
	      var defaultLeftX = targetLeft - tipWidth - 6;
	      var defaultRightX = targetLeft + targetWidth + 6;

	      var outsideTop = function outsideTop() {
	        return defaultTopY - 10 < 0;
	      };

	      var outsideBottom = function outsideBottom() {
	        return targetTop + targetHeight + tipHeight + 25 > windowHeight;
	      };

	      var outsideLeft = function outsideLeft() {
	        return defaultLeftX - 10 < 0;
	      };

	      var outsideRight = function outsideRight() {
	        return targetLeft + targetWidth + tipWidth + 25 > windoWidth;
	      };

	      var getTopPositionY = function getTopPositionY() {
	        if (outsideTop(defaultTopY) && !outsideBottom()) {
	          _this5.setState({
	            place: 'bottom'
	          });
	          return defaultBottomY;
	        }

	        return defaultTopY;
	      };

	      var getBottomPositionY = function getBottomPositionY() {
	        if (outsideBottom() && !outsideTop()) {
	          _this5.setState({
	            place: 'top'
	          });
	          return defaultTopY;
	        }

	        return defaultBottomY;
	      };

	      var getLeftPositionX = function getLeftPositionX() {
	        if (outsideLeft() && !outsideRight()) {
	          _this5.setState({
	            place: 'right'
	          });
	          return defaultRightX;
	        }

	        return defaultLeftX;
	      };

	      var getRightPositionX = function getRightPositionX() {
	        if (outsideRight() && !outsideLeft()) {
	          _this5.setState({
	            place: 'left'
	          });
	          return defaultLeftX;
	        }

	        return defaultRightX;
	      };

	      if (place === 'top') {
	        x = targetLeft - tipWidth / 2 + targetWidth / 2;
	        y = getTopPositionY();
	      } else if (place === 'bottom') {
	        x = targetLeft - tipWidth / 2 + targetWidth / 2;
	        y = getBottomPositionY();
	      } else if (place === 'left') {
	        x = getLeftPositionX();
	        y = targetTop + targetHeight / 2 - tipHeight / 2;
	      } else if (place === 'right') {
	        x = getRightPositionX();
	        y = targetTop + targetHeight / 2 - tipHeight / 2;
	      }

	      return { x: x, y: y };
	    }

	    /**
	     * Execute in componentDidUpdate, can't put this into render() to support server rendering
	     */

	  }, {
	    key: 'updatePosition',
	    value: function updatePosition() {
	      var node = _reactDom2.default.findDOMNode(this);

	      var tipWidth = node.clientWidth;
	      var tipHeight = node.clientHeight;
	      var _state2 = this.state;
	      var effect = _state2.effect;
	      var place = _state2.place;
	      var offset = _state2.offset;

	      var offsetFromEffect = {};

	      /**
	       * List all situations for different placement,
	       * then tooltip can judge switch to which side if window space is not enough
	       * @note only support for float at the moment
	       */
	      var placements = ['top', 'bottom', 'left', 'right'];
	      placements.forEach(function (key) {
	        offsetFromEffect[key] = { x: 0, y: 0 };
	      });

	      if (effect === 'float') {
	        offsetFromEffect.top = {
	          x: -(tipWidth / 2),
	          y: -tipHeight
	        };
	        offsetFromEffect.bottom = {
	          x: -(tipWidth / 2),
	          y: 15
	        };
	        offsetFromEffect.left = {
	          x: -(tipWidth + 15),
	          y: -(tipHeight / 2)
	        };
	        offsetFromEffect.right = {
	          x: 10,
	          y: -(tipHeight / 2)
	        };
	      }

	      var xPosition = 0;
	      var yPosition = 0;

	      /* If user set offset attribute, we have to consider it into out position calculating */
	      if (Object.prototype.toString.apply(offset) === '[object String]') {
	        offset = JSON.parse(offset.toString().replace(/\'/g, '\"'));
	      }
	      for (var key in offset) {
	        if (key === 'top') {
	          yPosition -= parseInt(offset[key], 10);
	        } else if (key === 'bottom') {
	          yPosition += parseInt(offset[key], 10);
	        } else if (key === 'left') {
	          xPosition -= parseInt(offset[key], 10);
	        } else if (key === 'right') {
	          xPosition += parseInt(offset[key], 10);
	        }
	      }

	      /* If our tooltip goes outside the window we want to try and change its place to be inside the window */
	      var x = this.state.x;
	      var y = this.state.y;
	      var windoWidth = window.innerWidth;
	      var windowHeight = window.innerHeight;

	      var getStyleLeft = function getStyleLeft(place) {
	        var offsetEffectX = effect === 'solid' ? 0 : place ? offsetFromEffect[place].x : 0;
	        return x + offsetEffectX + xPosition;
	      };
	      var getStyleTop = function getStyleTop(place) {
	        var offsetEffectY = effect === 'solid' ? 0 : place ? offsetFromEffect[place].y : 0;
	        return y + offsetEffectY + yPosition;
	      };

	      var outsideLeft = function outsideLeft(place) {
	        var styleLeft = getStyleLeft(place);
	        return styleLeft < 0 && x + offsetFromEffect['right'].x + xPosition <= windoWidth;
	      };
	      var outsideRight = function outsideRight(place) {
	        var styleLeft = getStyleLeft(place);
	        return styleLeft + tipWidth > windoWidth && x + offsetFromEffect['left'].x + xPosition >= 0;
	      };
	      var outsideTop = function outsideTop(place) {
	        var styleTop = getStyleTop(place);
	        return styleTop < 0 && y + offsetFromEffect['bottom'].y + yPosition + tipHeight < windowHeight;
	      };
	      var outsideBottom = function outsideBottom(place) {
	        var styleTop = getStyleTop(place);
	        return styleTop + tipHeight >= windowHeight && y + offsetFromEffect['top'].y + yPosition >= 0;
	      };

	      /* We want to make sure the place we switch to will not go outside either */
	      var outside = function outside(place) {
	        return outsideTop(place) || outsideRight(place) || outsideBottom(place) || outsideLeft(place);
	      };

	      /* We check each side and switch if the new place will be in bounds */
	      if (outsideLeft(place)) {
	        if (!outside('right')) {
	          this.setState({
	            place: 'right'
	          });
	          return;
	        }
	      } else if (outsideRight(place)) {
	        if (!outside('left')) {
	          this.setState({
	            place: 'left'
	          });
	          return;
	        }
	      } else if (outsideTop(place)) {
	        if (!outside('bottom')) {
	          this.setState({
	            place: 'bottom'
	          });
	          return;
	        }
	      } else if (outsideBottom(place)) {
	        if (!outside('top')) {
	          this.setState({
	            place: 'top'
	          });
	          return;
	        }
	      }

	      node.style.left = getStyleLeft(place) + 'px';
	      node.style.top = getStyleTop(place) + 'px';
	    }

	    /**
	     * Set style tag in header
	     * Insert style by this way
	     */

	  }, {
	    key: 'setStyleHeader',
	    value: function setStyleHeader() {
	      if (!document.getElementsByTagName('head')[0].querySelector('style[id="react-tooltip"]')) {
	        var tag = document.createElement('style');
	        tag.id = 'react-tooltip';
	        tag.innerHTML = _style2.default;
	        document.getElementsByTagName('head')[0].appendChild(tag);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state3 = this.state;
	      var placeholder = _state3.placeholder;
	      var extraClass = _state3.extraClass;
	      var html = _state3.html;

	      var tooltipClass = (0, _classnames2.default)('__react_component_tooltip', { 'show': this.state.show }, { 'border': this.state.border }, { 'place-top': this.state.place === 'top' }, { 'place-bottom': this.state.place === 'bottom' }, { 'place-left': this.state.place === 'left' }, { 'place-right': this.state.place === 'right' }, { 'type-dark': this.state.type === 'dark' }, { 'type-success': this.state.type === 'success' }, { 'type-warning': this.state.type === 'warning' }, { 'type-error': this.state.type === 'error' }, { 'type-info': this.state.type === 'info' }, { 'type-light': this.state.type === 'light' });

	      if (html) {
	        return _react2.default.createElement('div', { className: tooltipClass + ' ' + extraClass, 'data-id': 'tooltip', dangerouslySetInnerHTML: { __html: placeholder } });
	      } else {
	        var content = this.props.children ? this.props.children : placeholder;
	        return _react2.default.createElement(
	          'div',
	          { className: tooltipClass + ' ' + extraClass, 'data-id': 'tooltip' },
	          content
	        );
	      }
	    }
	  }, {
	    key: 'trim',
	    value: function trim(string) {
	      if (Object.prototype.toString.call(string) !== '[object String]') {
	        return string;
	      }
	      var newString = string.split('');
	      var firstCount = 0;
	      var lastCount = 0;
	      for (var i = 0; i < string.length; i++) {
	        if (string[i] !== ' ') {
	          break;
	        }
	        firstCount++;
	      }
	      for (var i = string.length - 1; i >= 0; i--) {
	        if (string[i] !== ' ') {
	          break;
	        }
	        lastCount++;
	      }
	      newString.splice(0, firstCount);
	      newString.splice(-lastCount, lastCount);
	      return newString.join('');
	    }
	  }]);

	  return ReactTooltip;
	}(_react.Component);

	ReactTooltip.propTypes = {
	  children: _react.PropTypes.any,
	  place: _react.PropTypes.string,
	  type: _react.PropTypes.string,
	  effect: _react.PropTypes.string,
	  offset: _react.PropTypes.object,
	  multiline: _react.PropTypes.bool,
	  border: _react.PropTypes.bool,
	  class: _react.PropTypes.string,
	  id: _react.PropTypes.string,
	  html: _react.PropTypes.bool,
	  delayHide: _react.PropTypes.number,
	  delayShow: _react.PropTypes.number,
	  event: _react.PropTypes.any,
	  watchWindow: _react.PropTypes.bool,
	  isCapture: _react.PropTypes.bool
	};

	/* export default not fit for standalone, it will exports {default:...} */
	module.exports = ReactTooltip;


/***/ },
/* 93 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = '.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out , margin-top 0.3s ease-out, margin-left 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip:before,.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top:6px solid #222}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom:6px solid #222}.__react_component_tooltip.type-dark.place-left:after{border-left:6px solid #222}.__react_component_tooltip.type-dark.place-right:after{border-right:6px solid #222}.__react_component_tooltip.type-dark.border{border:1px solid #fff}.__react_component_tooltip.type-dark.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-dark.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-dark.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-dark.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top:6px solid #8DC572}.__react_component_tooltip.type-success.place-bottom:after{border-bottom:6px solid #8DC572}.__react_component_tooltip.type-success.place-left:after{border-left:6px solid #8DC572}.__react_component_tooltip.type-success.place-right:after{border-right:6px solid #8DC572}.__react_component_tooltip.type-success.border{border:1px solid #fff}.__react_component_tooltip.type-success.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-success.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-success.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-success.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top:6px solid #F0AD4E}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom:6px solid #F0AD4E}.__react_component_tooltip.type-warning.place-left:after{border-left:6px solid #F0AD4E}.__react_component_tooltip.type-warning.place-right:after{border-right:6px solid #F0AD4E}.__react_component_tooltip.type-warning.border{border:1px solid #fff}.__react_component_tooltip.type-warning.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-warning.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-warning.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-warning.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top:6px solid #BE6464}.__react_component_tooltip.type-error.place-bottom:after{border-bottom:6px solid #BE6464}.__react_component_tooltip.type-error.place-left:after{border-left:6px solid #BE6464}.__react_component_tooltip.type-error.place-right:after{border-right:6px solid #BE6464}.__react_component_tooltip.type-error.border{border:1px solid #fff}.__react_component_tooltip.type-error.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-error.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-error.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-error.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top:6px solid #337AB7}.__react_component_tooltip.type-info.place-bottom:after{border-bottom:6px solid #337AB7}.__react_component_tooltip.type-info.place-left:after{border-left:6px solid #337AB7}.__react_component_tooltip.type-info.place-right:after{border-right:6px solid #337AB7}.__react_component_tooltip.type-info.border{border:1px solid #fff}.__react_component_tooltip.type-info.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-info.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-info.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-info.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top:6px solid #fff}.__react_component_tooltip.type-light.place-bottom:after{border-bottom:6px solid #fff}.__react_component_tooltip.type-light.place-left:after{border-left:6px solid #fff}.__react_component_tooltip.type-light.place-right:after{border-right:6px solid #fff}.__react_component_tooltip.type-light.border{border:1px solid #222}.__react_component_tooltip.type-light.border.place-top:before{border-top:8px solid #222}.__react_component_tooltip.type-light.border.place-bottom:before{border-bottom:8px solid #222}.__react_component_tooltip.type-light.border.place-left:before{border-left:8px solid #222}.__react_component_tooltip.type-light.border.place-right:before{border-right:8px solid #222}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:before{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-top:after{border-left:8px solid transparent;border-right:8px solid transparent;bottom:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:before{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom:after{border-left:8px solid transparent;border-right:8px solid transparent;top:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:before{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-left:after{border-top:5px solid transparent;border-bottom:5px solid transparent;right:-6px;top:50%;margin-top:-4px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:before{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right:after{border-top:5px solid transparent;border-bottom:5px solid transparent;left:-6px;top:50%;margin-top:-4px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}';


/***/ },
/* 94 */
/***/ function(module, exports) {

	// OsidId.js
	'use strict';

	var OsidId = {
	    getIdentifier: function (idString) {
	        var identifier = idString.slice(idString.indexOf('%3A') + 3,
	                                        idString.indexOf('%40'));
	        return decodeURIComponent(decodeURIComponent(identifier));
	    }
	};

	module.exports = OsidId;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// LORelatedItems.js
	'use strict';

	var _ = __webpack_require__(5);


	var LORelatedItems = function (items, outcomes) {
	    // given a list of items, and a list of learning outcomes,
	    // returns a sorted dictionary of the items where the question itself
	    // is tagged with each given LO.
	    // loId => [itemsList]

	    var returnData = {};

	    _.each(items, function (item) {
	        _.each(outcomes, function (outcome) {
	            var outcomeId = outcome.id;
	            if (!returnData.hasOwnProperty(outcomeId)) {
	                returnData[outcomeId] = [];
	            }
	            if (item.learningObjectiveIds[0] == outcomeId) {
	                returnData[outcomeId].push(item);
	            }
	        });
	    });

	    return returnData;
	};

	module.exports = LORelatedItems;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ModulesStore.js

	'use strict';

	var AuthoringConstants = __webpack_require__(14);
	var MiddlewareService = __webpack_require__(17);

	var EventEmitter = __webpack_require__(16).EventEmitter;

	var ActionTypes = AuthoringConstants.ActionTypes;
	var CHANGE_EVENT = ActionTypes.CHANGE_EVENT;

	var _modules = [];

	var ModulesStore = _.assign({}, EventEmitter.prototype, {
	    emitChange: function () {
	        this.emit(CHANGE_EVENT, _modules);
	    },
	    addChangeListener: function (callback) {
	        this.on(CHANGE_EVENT, callback);
	    },
	    removeChangeListener: function (callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	    },
	    get: function (id) {
	        return _.find(_modules, function (module) {
	            return module.id == id;
	        });
	    },
	    getAll: function (libraryId) {
	        var _this = this,
	            url = this.url() + libraryId + '/modules';
	        fetch(url, {
	            cache: "no-store",
	            credentials: "same-origin"
	        }).then(function (response) {
	            response.json().then(function (data) {
	                _modules = data;
	                _this.emitChange();
	            });
	        })
	        .catch(function (error) {
	            console.log('Problem with getting modules: ' + error.message);
	        });
	    },
	    url: function () {
	      if (MiddlewareService.shouldReturnStatic()) return '/raw_data/objectives.json';

	      return MiddlewareService.host() + '/learning/objectivebanks/';
	    }
	});


	module.exports = ModulesStore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// SortItemsByModuleOutcomes.js
	'use strict';

	var _ = __webpack_require__(5);


	var SortItemsByModuleOutcomes = function (items, modules) {
	    // given a list of items, and a list of modules (learning topics),
	    // returns a sorted dictionary of the items where the question itself
	    // is tagged with each given LO.
	    // loId => [itemsList]

	    var returnData = {
	        uncategorized: []
	    };

	    _.each(items, function (item) {
	        var foundModuleMatch = false;
	        _.each(modules, function (module) {
	            var outcomes = module.childNodes,
	                outcomeIds = _.map(outcomes, 'id'),
	                moduleId = module.id;

	            if (!returnData.hasOwnProperty(moduleId)) {
	                returnData[moduleId] = [];
	            }
	            if (outcomeIds.indexOf(item.learningObjectiveIds[0]) >= 0) {
	                returnData[moduleId].push(item);
	                foundModuleMatch = true;
	            }
	        });

	        if (!foundModuleMatch) {
	            returnData.uncategorized.push(item);
	        }
	    });

	    return returnData;
	};

	module.exports = SortItemsByModuleOutcomes;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// ItemStatus.js

	'use strict';

	__webpack_require__(99);

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var Glyphicon = ReactBS.Glyphicon;
	var Label = ReactBS.Label;
	var ReactTooltip = __webpack_require__(91);

	var AuthoringConstants = __webpack_require__(14);
	var GenusTypes = __webpack_require__(14).GenusTypes;
	var LibraryItemsStore = __webpack_require__(8);

	var ItemStatus = React.createClass({
	    displayName: 'ItemStatus',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    render: function render() {
	        // How to figure out how many are uncurated?
	        var libraryName = this.props.libraryDescription,
	            numberItems = this.props.items.length,
	            numberUncuratedItems = 0,
	            uncuratedLabel;

	        _.each(this.props.items, function (item) {
	            var unlinkedAnswers = _.find(item.answers, function (answer) {
	                return answer.confusedLearningObjectiveIds.length === 0 && answer.genusTypeId === GenusTypes.WRONG_ANSWER;
	            });
	            if (item.question.learningObjectiveIds.length === 0 || unlinkedAnswers != null) {
	                numberUncuratedItems++;
	            }
	        });

	        if (numberUncuratedItems === 0) {
	            uncuratedLabel = React.createElement(
	                Label,
	                { bsStyle: 'success' },
	                numberUncuratedItems
	            );
	        } else {
	            uncuratedLabel = React.createElement(
	                Label,
	                { bsStyle: 'danger' },
	                numberUncuratedItems
	            );
	        }

	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'div',
	                null,
	                libraryName,
	                ': ',
	                numberItems,
	                ' questions'
	            ),
	            React.createElement(
	                'div',
	                null,
	                'Number of uncurated questions: ',
	                uncuratedLabel,
	                React.createElement(Glyphicon, { className: 'uncurated-help-icon',
	                    glyph: 'question-sign',
	                    'data-tip': 'Questions not tagged with learning outcomes (or have wrong answers not tagged)' })
	            ),
	            React.createElement(ReactTooltip, null)
	        );
	    }
	});

	module.exports = ItemStatus;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(100);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(24)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./ItemStatus.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./ItemStatus.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(23)();
	// imports


	// module
	exports.push([module.id, ".uncurated-help-icon {\n    margin-left: 5px;\n}", ""]);

	// exports


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {// LibrarySelector.js
	'use strict';

	var React = __webpack_require__(1);
	var ReactBS = __webpack_require__(4);
	var ControlLabel = ReactBS.ControlLabel;
	var FormControl = ReactBS.FormControl;
	var FormGroup = ReactBS.FormGroup;

	var LibraryItemsStore = __webpack_require__(8);

	var LibrarySelector = React.createClass({
	    displayName: 'LibrarySelector',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    componentWillMount: function componentWillMount() {},
	    componentDidMount: function componentDidMount() {},
	    renderLibraries: function renderLibraries() {
	        return _.map(this.props.libraries, function (library) {
	            return React.createElement(
	                'option',
	                { value: library.id,
	                    title: library.description.text,
	                    key: library.id },
	                library.displayName.text
	            );
	        });
	    },
	    showItems: function showItems(e) {
	        var option = e.currentTarget.selectedOptions[0],
	            id = option.value,
	            description = option.title;
	        if (id !== '-1') {
	            LibraryItemsStore.getItems(id);
	            this.props.onSelect(id, description);
	        } else {
	            this.props.hideItems();
	        }
	    },
	    render: function render() {
	        return React.createElement(
	            FormGroup,
	            { controlId: 'librarySelector' },
	            React.createElement(
	                ControlLabel,
	                null,
	                'Select class ...'
	            ),
	            React.createElement(
	                FormControl,
	                { componentClass: 'select',
	                    placeholder: 'Select a class',
	                    onChange: this.showItems },
	                React.createElement(
	                    'option',
	                    { value: '-1' },
	                    'Please select a content domain ... '
	                ),
	                this.renderLibraries()
	            )
	        );
	    }
	});

	module.exports = LibrarySelector;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// ShibSessionCheck.js
	'use strict';

	var _ = __webpack_require__(5);

	var ShibSessionCheck = function (item) {
	  var hostLocation = window.location.host,
	    path = window.location.pathname;

	  if (path.indexOf('touchstone') >= 0) {
	    setInterval(function () {
	      // TODO: move this to the middleware service
	      if (hostLocation.indexOf('localhost') >= 0 || hostLocation.indexOf('127.0.0.1') >= 0) {
	        var testUrl = '/touchstone/api/v1/assessment/libraries';
	      } else {
	        var testUrl = '/fbw-author/touchstone/api/v1/assessment/libraries';
	      }

	      fetch(testUrl, {
	          cache: "no-store",
	          credentials: "same-origin",
	          mode: "no-cors"
	        })
	      .then(function (response) {
	        if (!response.ok) {
	          alert('Your Touchstone session has expired. Please reload the page and sign back in.');
	        }
	      }).catch(function (error) {
	        console.log('Server error: ' + error.message);
	      });
	    }, 10 * 60 * 1000);
	  }
	};

	module.exports = ShibSessionCheck;

/***/ }
/******/ ])));